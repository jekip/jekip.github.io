const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/404-DwL9NKrt.js","assets/vue-router-DVIe63a7.js","assets/vue-C3qUmXuJ.js","assets/naive-ui-zccZ3jep.js","assets/lodash-es-Wid6WkHk.js","assets/pinia-DjitYwKU.js","assets/vue-quill-DMQesYph.js","assets/vicons-antd-g9a0d-xa.js","assets/vicons-ionicons5-Ctkv33lH.js","assets/404-C6-1tBHb.css","assets/index-CIYD8UKT.js","assets/website.config-BTwa7-xM.js","assets/vuedraggable-tl9zbDm_.js","assets/useDesignSetting-BQE1soGM.js","assets/index-DJKfrBbF.css","assets/parentLayout-DKpnT2r7.js","assets/index-jk-l93XS.js","assets/basic-CxVvlXq-.js","assets/Table-hOMJHovZ.js","assets/propTypes-BvihHqXo.js","assets/componentSetting-DYSsJNsh.js","assets/vueuse-CJoAbtOQ.js","assets/Table-DjTwZd7R.css","assets/TableAction-h2fMWYZW.js","assets/list-MpWUSPks.js","assets/editCell-KTxyxhWV.js","assets/editRow-qCGK53im.js","assets/basic-S6S53ZDa.js","assets/BasicForm-BcMXd9Ty.js","assets/BasicForm-DfKYnNkf.css","assets/basic-Co_qkAcp.css","assets/useForm-8RKCouDT.js","assets/useForm-DuIJ5O__.js","assets/useForm-DmHOHNkV.css","assets/index-DE-qLJoy.js","assets/BasicUpload-DRgeO7ZW.js","assets/BasicUpload-DKwDOufb.css","assets/index-Cfene4oS.js","assets/useModal-mVBTfGuI.js","assets/useModal-DbyYhys_.css","assets/index-BAfGdo6K.css","assets/vue-quill-CYzGuerY.js","assets/vue-quill-u2bCNxUj.css","assets/index-nTYw3IVe.js","assets/index-4Oefj_MQ.css","assets/console-DoIVFooB.js","assets/VisiTab.vue_vue_type_script_setup_true_lang-C5EYD1uL.js","assets/FluxTrend.vue_vue_type_script_setup_true_lang-Bvd-Gv9K.js","assets/props-ds_2r7RU.js","assets/echarts-Vw2FdyDQ.js","assets/VisitAmount.vue_vue_type_script_setup_true_lang-B_63Jp-W.js","assets/workplace-rflwL6fG.js","assets/workplace-DHwabFCs.css","assets/index-CvtO90oY.js","assets/index-UuUyQeqK.css","assets/403-BHJjRcck.js","assets/403-Car6kZPP.css","assets/500-D25Kj5En.js","assets/500-Er-d67NB.css","assets/index-B1Thw49Y.js","assets/stepForm-CSZXupuw.js","assets/Step1.vue_vue_type_script_setup_true_lang-CdTmygdR.js","assets/Step2.vue_vue_type_script_setup_true_lang-BFXARp0S.js","assets/Step3-DFiEr4U0.js","assets/Step3-DIyB-EMX.css","assets/stepForm-D0JNL4mL.css","assets/index-DND4v4IW.js","assets/index-CfcBoXAF.js","assets/index-C7uG6Yq5.css","assets/index-BIm1dsaH.js","assets/info-vZbT9a7o.js","assets/success-CFOGelnv.js","assets/success-DSu-n1yB.css","assets/fail-ZX36aY8a.js","assets/fail-CHC_x0M6.css","assets/info-B7a8dTHJ.js","assets/info-E_LSOW-c.css","assets/account-RBbFUHjI.js","assets/BasicSetting.vue_vue_type_script_setup_true_lang-C-4JQSPg.js","assets/SafetySetting-De0udgjN.js","assets/account-CEoVk8XY.css","assets/system-DYo5KSv6.js","assets/BasicSetting.vue_vue_type_script_setup_true_lang-BiPWn1MT.js","assets/RevealSetting.vue_vue_type_script_setup_true_lang-9-yJ9YIh.js","assets/EmailSetting.vue_vue_type_script_setup_true_lang-DzYcLjSg.js","assets/system-BGbRbu5w.css","assets/menu-Ba5Tci0F.js","assets/CreateDrawer.vue_vue_type_script_setup_true_lang-C02Z5_El.js","assets/role-DUznBL57.js","assets/CreateModal.vue_vue_type_script_setup_true_lang-BJi171k6.js","assets/EditModal.vue_vue_type_script_setup_true_lang-HWIcmSC9.js","assets/index-Q5luFLOi.js","assets/FluxTrend-DTlQvTWk.js","assets/VisiTab-OwAF9yeq.js","assets/VisitAmount-CxxoN6_0.js","assets/monitor-BFH_8Dmc.js","assets/Step1-COxCc1oF.js","assets/Step2-D5iwnIRz.js","assets/docs-IU1ahACg.js","assets/index-C3pdQTaH.js","assets/index-3q9Gdwa_.css","assets/BasicSetting-CZr7w5wX.js","assets/BasicSetting-D1Xhtoxa.js","assets/EmailSetting-CtV1CB2z.js","assets/RevealSetting-DDOfUVxl.js","assets/CreateDrawer-Bmv4FNpa.js","assets/CreateModal-CXpB36aS.js","assets/EditModal-BPNgaTJI.js"])))=>i.map(i=>d[i]);
var Mu=Object.defineProperty;var Ru=(en,rn,an)=>rn in en?Mu(en,rn,{enumerable:!0,configurable:!0,writable:!0,value:an}):en[rn]=an;var Wn=(en,rn,an)=>Ru(en,typeof rn!="symbol"?rn+"":rn,an);import{m as h$1,K as unref,c as computed,r as ref,g as getCurrentInstance,E as onUnmounted,o as onMounted,w as watch,k as defineComponent,N as createElementBlock,O as openBlock,P as createBaseVNode,_ as toDisplayString,F as Fragment,$ as renderList,l as withDirectives,v as vShow,e as reactive,Z as toRefs,a0 as resolveComponent,a1 as createCommentVNode,a2 as createVNode,a3 as withCtx,I as normalizeClass,a4 as createBlock,a5 as withKeys,a6 as withModifiers,q as renderSlot,z as Transition,Y as toRaw,J as createApp}from"./vue-C3qUmXuJ.js";import{c as create,_ as __unplugin_components_0,N as NDialogProvider,a as __unplugin_components_0$1,b as __unplugin_components_1$1,B as Button,d as __unplugin_components_5,e as __unplugin_components_2,f as __unplugin_components_4,g as __unplugin_components_3,h as NIcon,i as __unplugin_components_5$1,j as __unplugin_components_2$1,k as __unplugin_components_3$1,l as NLayoutFooter,m as __unplugin_components_0$2,n as __unplugin_components_0$3,o as __unplugin_components_3$2,p as __unplugin_components_2$2,q as __unplugin_components_3$3,r as __unplugin_components_4$1,s as __unplugin_components_1$2,t as NAvatar,u as __unplugin_components_1$3,v as __unplugin_components_0$4,w as __unplugin_components_0$5,x as __unplugin_components_4$2,y as __unplugin_components_3$4,z as __unplugin_components_9,A as __unplugin_components_8,C as __unplugin_components_1$4,D as __unplugin_components_5$2,E as __unplugin_components_4$3,F as __unplugin_components_9$1,G as NElement,H as NTag,I as __unplugin_components_1$5,J as __unplugin_components_5$3,K as __unplugin_components_5$4,L as __unplugin_components_14,M as __unplugin_components_8$1,O as __unplugin_components_3$5,P as __unplugin_components_2$3,Q as __unplugin_components_0$6,R as __unplugin_components_5$5,S as NPopover,T as NPagination,U as __unplugin_components_6,V as __unplugin_components_12,W as __unplugin_components_11,X as __unplugin_components_2$4,Y as __unplugin_components_1$6,Z as __unplugin_components_3$6,$ as __unplugin_components_3$7,a0 as __unplugin_components_3$8,a1 as __unplugin_components_1$7,a2 as __unplugin_components_6$1,a3 as __unplugin_components_3$9,a4 as NLoadingBarProvider,a5 as __unplugin_components_5$6,a6 as __unplugin_components_5$7,a7 as __unplugin_components_3$a,a8 as __unplugin_components_6$2,a9 as NTimePicker,aa as __unplugin_components_4$4,ab as __unplugin_components_1$8,ac as NCascader,ad as darkTheme$1,ae as createDiscreteApi,af as dateZhCN,ag as zhCN}from"./naive-ui-zccZ3jep.js";import{c as createPinia,d as defineStore}from"./pinia-DjitYwKU.js";import{c as cloneDeep,i as isString$2}from"./lodash-es-Wid6WkHk.js";import{c as commonjsGlobal,a as getDefaultExportFromCjs}from"./vue-quill-DMQesYph.js";import{u as useRouter,a as useRoute,i as isNavigationFailure,c as createRouter,b as createWebHistory}from"./vue-router-DVIe63a7.js";import{W as WifiOutlined,A as ApiOutlined,a as ArrowRightOutlined,U as UserOutlined,L as LoadingOutlined,b as LockOutlined,P as ProjectOutlined,c as WalletOutlined,D as DashboardOutlined,B as BorderOuterOutlined,E as ExclamationCircleOutlined,d as ProfileOutlined,T as TableOutlined,S as SketchOutlined,C as CheckCircleOutlined,e as SettingOutlined}from"./vicons-antd-g9a0d-xa.js";import{D as DocumentTextOutline,a as DesktopOutline,O as OptionsSharp}from"./vicons-ionicons5-Ctkv33lH.js";(function(){const rn=document.createElement("link").relList;if(rn&&rn.supports&&rn.supports("modulepreload"))return;for(const tn of document.querySelectorAll('link[rel="modulepreload"]'))nn(tn);new MutationObserver(tn=>{for(const un of tn)if(un.type==="childList")for(const ln of un.addedNodes)ln.tagName==="LINK"&&ln.rel==="modulepreload"&&nn(ln)}).observe(document,{childList:!0,subtree:!0});function an(tn){const un={};return tn.integrity&&(un.integrity=tn.integrity),tn.referrerPolicy&&(un.referrerPolicy=tn.referrerPolicy),tn.crossOrigin==="use-credentials"?un.credentials="include":tn.crossOrigin==="anonymous"?un.credentials="omit":un.credentials="same-origin",un}function nn(tn){if(tn.ep)return;tn.ep=!0;const un=an(tn);fetch(tn.href,un)}})();const naive=create({components:[__unplugin_components_0,NDialogProvider,__unplugin_components_0$1,__unplugin_components_1$1,Button,__unplugin_components_5,__unplugin_components_2,__unplugin_components_4,__unplugin_components_3,NIcon,__unplugin_components_5$1,__unplugin_components_2$1,__unplugin_components_3$1,NLayoutFooter,__unplugin_components_0$2,__unplugin_components_0$3,__unplugin_components_3$2,__unplugin_components_2$2,__unplugin_components_3$3,__unplugin_components_4$1,__unplugin_components_1$2,NAvatar,__unplugin_components_1$3,__unplugin_components_0$4,__unplugin_components_0$5,__unplugin_components_4$2,__unplugin_components_3$4,__unplugin_components_9,__unplugin_components_8,__unplugin_components_1$4,__unplugin_components_5$2,__unplugin_components_4$3,__unplugin_components_9$1,NElement,NTag,__unplugin_components_1$5,__unplugin_components_5$3,__unplugin_components_5$4,__unplugin_components_14,__unplugin_components_8$1,__unplugin_components_3$5,__unplugin_components_2$3,__unplugin_components_0$6,__unplugin_components_5$5,NPopover,NPagination,__unplugin_components_6,__unplugin_components_12,__unplugin_components_11,__unplugin_components_2$4,__unplugin_components_1$6,__unplugin_components_3$6,__unplugin_components_3$7,__unplugin_components_3$8,__unplugin_components_1$7,__unplugin_components_6$1,__unplugin_components_3$9,NLoadingBarProvider,__unplugin_components_5$6,__unplugin_components_5$7,__unplugin_components_3$a,__unplugin_components_6$2,NTimePicker,__unplugin_components_4$4,__unplugin_components_1$8,NCascader]});function setupNaive(en){en.use(naive)}const store=createPinia();function setupStore(en){en.use(store)}const appThemeList$1=["#2d8cf0","#0960bd","#0084f4","#009688","#536dfe","#ff5c93","#ee4f12","#0096c7","#9c27b0","#ff9800","#FF3D68","#00C1D4","#71EFA3","#171010","#78DEC7","#1768AC","#FB9300","#FC5404"],setting$1={darkTheme:!1,appTheme:"#2d8cf0",appThemeList:appThemeList$1},{darkTheme,appTheme,appThemeList}=setting$1,useDesignSettingStore=defineStore({id:"app-design-setting",state:()=>({darkTheme,appTheme,appThemeList}),getters:{getDarkTheme(){return this.darkTheme},getAppTheme(){return this.appTheme},getAppThemeList(){return this.appThemeList}},actions:{}});function useDesignSetting(){return useDesignSettingStore(store)}var PageEnum=(en=>(en.BASE_LOGIN="/login",en.BASE_LOGIN_NAME="Login",en.REDIRECT="/redirect",en.REDIRECT_NAME="Redirect",en.BASE_HOME="/dashboard",en.BASE_HOME_REDIRECT="/dashboard/console",en.ERROR_PAGE_NAME="ErrorPage",en))(PageEnum||{});const toString=Object.prototype.toString;function is(en,rn){return toString.call(en)===`[object ${rn}]`}function isFunction(en){return is(en,"Function")||is(en,"AsyncFunction")}const isDef=en=>typeof en<"u",isUnDef=en=>!isDef(en),isObject=en=>en!==null&&is(en,"Object");function isNumber$1(en){return is(en,"Number")}function isString$1(en){return is(en,"String")}function isBoolean(en){return is(en,"Boolean")}function isArray$1(en){return en&&Array.isArray(en)}const isServer=typeof window>"u";function isNull(en){return en===null}function isNullOrUnDef(en){return isUnDef(en)||isNull(en)}function renderIcon(en){return()=>h$1(NIcon,null,{default:()=>h$1(en)})}const newTagColors={color:"#f90",textColor:"#fff",borderColor:"#f90"};function renderNew(en="warning",rn="New",an=newTagColors){return()=>h$1(NTag,{type:en,round:!0,size:"small",color:an},{default:()=>rn})}function generatorMenu(en){return filterRouter(en).map(rn=>{const an=isRootRouter(rn),nn=an?rn.children[0]:rn,tn={...nn,...nn.meta,label:nn.meta?.title,key:nn.name,icon:an?rn.meta?.icon:nn.meta?.icon};return nn.children&&nn.children.length>0&&(tn.children=generatorMenu(nn.children)),tn})}function generatorMenuMix(en,rn,an){const nn=cloneDeep(en),tn=filterRouter(nn);if(an==="header"){const un=[];return tn.forEach(ln=>{const hn=isRootRouter(ln)?ln.children[0]:ln;hn.children=void 0;const cn={...hn,...hn.meta,label:hn.meta?.title,key:hn.name};un.push(cn)}),un}else return getChildrenRouter(tn.filter(un=>un.name===rn))}function getChildrenRouter(en){return filterRouter(en).map(rn=>{const nn=isRootRouter(rn)?rn.children[0]:rn,tn={...nn,...nn.meta,label:nn.meta?.title,key:nn.name};return nn.children&&nn.children.length>0&&(tn.children=getChildrenRouter(nn.children)),tn})}function isRootRouter(en){return en.meta?.alwaysShow!=!0&&en?.children?.filter(rn=>!rn?.meta?.hidden)?.length===1}function filterRouter(en){return en.filter(rn=>(rn.meta?.hidden||!1)!=!0&&!["/:path(.*)*","/",PageEnum.REDIRECT,PageEnum.BASE_LOGIN].includes(rn.path))}const withInstall=(en,rn)=>{const an=en;return an.install=nn=>{nn.component(an.name||an.displayName,en)},en};let result$1=null;function getTreeItem(en,rn){return en.map(an=>{an.key===rn?result$1=an:an.children&&an.children.length&&getTreeItem(an.children,rn)}),result$1}const treeAll=[];function getTreeAll(en){return en.map(rn=>{treeAll.push(rn.key),rn.children&&rn.children.length&&getTreeAll(rn.children)}),treeAll}function getDynamicProps(en){const rn={};return Object.keys(en).map(an=>{rn[an]=unref(en[an])}),rn}function deepMerge(en={},rn={}){let an;for(an in rn)en[an]=isObject(en[an])?deepMerge(en[an],rn[an]):en[an]=rn[an];return en}function addLight(en,rn){const an=parseInt(en,16)+rn,nn=an>255?255:an;return nn.toString(16).length>1?nn.toString(16):`0${nn.toString(16)}`}function lighten(en,rn){return en=en.indexOf("#")>=0?en.substring(1,en.length):en,rn=Math.trunc(255*rn/100),`#${addLight(en.substring(0,2),rn)}${addLight(en.substring(2,4),rn)}${addLight(en.substring(4,6),rn)}`}function isUrl(en){return/^(http|https):\/\//g.test(en)}function setupNaiveDiscreteApi(){const en=useDesignSetting(),rn=computed(()=>({theme:en.darkTheme?darkTheme$1:void 0,themeOverrides:{common:{primaryColor:en.appTheme,primaryColorHover:lighten(en.appTheme,6),primaryColorPressed:lighten(en.appTheme,6)},LoadingBar:{colorLoading:en.appTheme}}})),{message:an,dialog:nn,notification:tn,loadingBar:un}=createDiscreteApi(["message","dialog","notification","loadingBar"],{configProviderProps:rn});window.$message=an,window.$dialog=nn,window.$notification=tn,window.$loading=un}const ACCESS_TOKEN="ACCESS-TOKEN",CURRENT_USER="CURRENT-USER",IS_SCREENLOCKED="IS-SCREENLOCKED",TABS_ROUTES="TABS-ROUTES";var ResultEnum=(en=>(en[en.SUCCESS=200]="SUCCESS",en[en.ERROR=-1]="ERROR",en[en.TIMEOUT=10042]="TIMEOUT",en.TYPE="success",en))(ResultEnum||{});const undefStr="undefined",PromiseCls=Promise,promiseResolve=en=>PromiseCls.resolve(en),promiseReject=en=>PromiseCls.reject(en),ObjectCls=Object,RegExpCls=RegExp,undefinedValue=void 0,nullValue=null,trueValue=!0,falseValue=!1,promiseThen=(en,rn,an)=>en.then(rn,an),promiseCatch=(en,rn)=>en.catch(rn),promiseFinally=(en,rn)=>en.finally(rn),JSONStringify=(en,rn,an)=>JSON.stringify(en,rn,an),JSONParse=en=>JSON.parse(en),setTimeoutFn=(en,rn=0)=>setTimeout(en,rn),clearTimeoutTimer=en=>clearTimeout(en),objectKeys=en=>ObjectCls.keys(en),forEach=(en,rn)=>en.forEach(rn),pushItem=(en,...rn)=>en.push(...rn),mapItem=(en,rn)=>en.map(rn),filterItem=(en,rn)=>en.filter(rn),len=en=>en.length,isArray=en=>Array.isArray(en),deleteAttr=(en,rn)=>delete en[rn],typeOf=en=>typeof en,isSSR=typeof window===undefStr&&(typeof process!==undefStr?!process.browser:typeof Deno!==undefStr),MEMORY="memory",STORAGE_RESTORE="restore",noop=()=>{},$self=en=>en,isFn=en=>typeOf(en)==="function",isNumber=en=>typeOf(en)==="number"&&!Number.isNaN(en),isString=en=>typeOf(en)==="string",globalToString=en=>ObjectCls.prototype.toString.call(en),isPlainObject=en=>globalToString(en)==="[object Object]",instanceOf=(en,rn)=>en instanceof rn,getTime=en=>en?en.getTime():Date.now(),getContext=en=>en.context,getConfig$1=en=>en.config,getContextOptions=en=>en.options,getOptions=en=>getContextOptions(getContext(en)),key=en=>{const{params:rn,headers:an}=getConfig$1(en);return JSONStringify([en.type,en.url,rn,en.data,an])},getMethodInternalKey=en=>en.key,isSpecialRequestBody=en=>{const rn=globalToString(en);return/^\[object (Blob|FormData|ReadableStream|URLSearchParams)\]$/i.test(rn)||instanceOf(en,ArrayBuffer)},objAssign=(en,...rn)=>ObjectCls.assign(en,...rn);function usePromise(){let en,rn;return{promise:new Promise((nn,tn)=>{en=nn,rn=tn}),resolve:en,reject:rn}}const getLocalCacheConfigParam=en=>{const{cacheFor:rn}=getConfig$1(en),an=hn=>isNumber(hn)?getTime()+hn:getTime(hn||undefinedValue);let nn=MEMORY,tn=()=>0,un=falseValue,ln=undefinedValue;const dn=isFn(rn);if(!dn){let hn=rn;if(isPlainObject(rn)){const{mode:cn=MEMORY,expire:Fn,tag:yn}=rn||{};nn=cn,un=cn===STORAGE_RESTORE,ln=yn?yn.toString():undefinedValue,hn=Fn}tn=cn=>an(isFn(hn)?hn({method:en,mode:cn}):hn)}return{f:rn,c:dn,e:tn,m:nn,s:un,t:ln}},newInstance=(en,...rn)=>new en(...rn),sloughFunction=(en,rn)=>isFn(en)?en:[falseValue,nullValue].includes(en)?noop:rn,cacheKeyPrefix="$a.",buildNamespacedCacheKey=(en,rn)=>cacheKeyPrefix+en+rn,buildCompletedURL=(en,rn,an)=>{const nn=/^https?:\/\//i.test(rn);nn||(en=en.endsWith("/")?en.slice(0,-1):en,rn!==""&&(rn=rn.startsWith("/")?rn:`/${rn}`));const tn=nn?rn:en+rn,un=isString(an)?an:mapItem(filterItem(objectKeys(an),ln=>an[ln]!==undefinedValue),ln=>`${ln}=${an[ln]}`).join("&");return un?+tn.includes("?")?`${tn}&${un}`:`${tn}?${un}`:tn},deepClone=en=>{if(isArray(en))return mapItem(en,deepClone);if(isPlainObject(en)&&en.constructor===ObjectCls){const rn={};return forEach(objectKeys(en),an=>{rn[an]=deepClone(en[an])}),rn}return en};class AlovaError extends Error{constructor(rn,an,nn){super(an+(nn?`

For detailed: https://alova.js.org/error#${nn}`:"")),this.name=`[alova${rn?`/${rn}`:""}]`}}const createAssert=(en="")=>(rn,an,nn)=>{if(!rn)throw newInstance(AlovaError,en,an,nn)},createEventManager=()=>{const en={};return{eventMap:en,on(rn,an){const nn=en[rn]=en[rn]||[];return pushItem(nn,an),()=>{en[rn]=filterItem(nn,tn=>tn!==an)}},off(rn,an){const nn=en[rn];if(nn)if(an){const tn=nn.indexOf(an);tn>-1&&nn.splice(tn,1)}else delete en[rn]},emit(rn,an){const nn=en[rn]||[];return mapItem(nn,tn=>tn(an))}}};let globalConfigMap={autoHitCache:"global",ssr:isSSR};const titleStyle$1="color: black; font-size: 12px; font-weight: bolder";var defaultCacheLogger=(en,rn,an,nn)=>{const tn=console,un=(...gn)=>console.log(...gn),{url:ln}=rn,dn=an===STORAGE_RESTORE,hn="\x1B[42m%s\x1B[49m",cn="\x1B[32m%s\x1B[39m",Fn=` [HitCache]${ln} `,yn=()=>Array(len(Fn)+1).join("^");globalConfigMap.ssr?(un(hn,Fn),un(cn," Cache ",en),un(cn," Mode  ",an),dn&&un(cn," Tag   ",nn),un(cn,yn())):(tn.groupCollapsed?tn.groupCollapsed("%cHitCache","padding: 2px 6px; background: #c4fcd3; color: #53b56d;",ln):un(hn,Fn),un("%c[Cache]",titleStyle$1,en),un("%c[Mode]",titleStyle$1,an),dn&&un("%c[Tag]",titleStyle$1,nn),un("%c[Method]",titleStyle$1,rn),tn.groupEnd?tn.groupEnd():un(cn,yn()))};const hitSourceStringCacheKey=en=>`hss.${en}`,hitSourceRegexpPrefix="hsr.",hitSourceRegexpCacheKey=en=>hitSourceRegexpPrefix+en,unifiedHitSourceRegexpCacheKey="$$hsrs",regexpSourceFlagSeparator="__$<>$__",addItem=(en,rn)=>{en[rn]=0},setWithCacheAdapter=async(en,rn,an,nn,tn,un,ln)=>{if(nn>getTime()&&an){const dn=buildNamespacedCacheKey(en,rn);if(await tn.set(dn,filterItem([an,nn===1/0?undefinedValue:nn,ln],Boolean)),un){const hn={},cn=[];forEach(un,gn=>{const bn=instanceOf(gn,RegExpCls),pn=bn?gn.source+(gn.flags?regexpSourceFlagSeparator+gn.flags:""):gn;pn&&(bn&&!hn[pn]&&pushItem(cn,pn),addItem(hn,bn?hitSourceRegexpCacheKey(pn):hitSourceStringCacheKey(pn)))});const Fn=mapItem(objectKeys(hn),async gn=>{const bn=await tn.get(gn)||{};addItem(bn,dn),await tn.set(gn,bn)}),yn=async()=>{if(len(cn)){const gn=await tn.get(unifiedHitSourceRegexpCacheKey)||[];pushItem(gn,...cn),await tn.set(unifiedHitSourceRegexpCacheKey,gn)}};await PromiseCls.all([...Fn,yn()])}}},removeWithCacheAdapter=async(en,rn,an)=>{const nn=buildNamespacedCacheKey(en,rn);await an.remove(nn)},getRawWithCacheAdapter=async(en,rn,an,nn)=>{const tn=await an.get(buildNamespacedCacheKey(en,rn));if(tn){const[un,ln,dn]=tn;if(dn===nn&&(!ln||ln>getTime()))return tn;await removeWithCacheAdapter(en,rn,an)}},getWithCacheAdapter=async(en,rn,an,nn)=>{const tn=await getRawWithCacheAdapter(en,rn,an,nn);return tn?tn[0]:undefinedValue},hitTargetCacheWithCacheAdapter=async(en,rn,an)=>{const nn=`${rn}`,tn={},un=hitSourceStringCacheKey(en);tn[un]=await an.get(un);let ln;if(rn){const Fn=hitSourceStringCacheKey(nn);tn[Fn]=await an.get(Fn),ln=await an.get(unifiedHitSourceRegexpCacheKey);const yn=[];ln&&len(ln)&&(forEach(ln,gn=>{const[bn,pn]=gn.split(regexpSourceFlagSeparator);newInstance(RegExpCls,bn,pn).test(nn)&&pushItem(yn,gn)}),await PromiseCls.all(mapItem(yn,async gn=>{const bn=hitSourceRegexpCacheKey(gn);tn[bn]=await an.get(bn)})))}const dn=async Fn=>{try{await an.remove(Fn);for(const yn in tn){const gn=tn[yn];gn&&deleteAttr(gn,Fn)}}catch{}},hn={};await PromiseCls.all(mapItem(objectKeys(tn),async Fn=>{const yn=tn[Fn];if(yn){const gn=[];for(const bn in yn)hn[bn]||(addItem(hn,bn),pushItem(gn,dn(bn)));await PromiseCls.all(gn)}}));const cn=len(ln||[]);await PromiseCls.all(mapItem(objectKeys(tn),async Fn=>{const yn=tn[Fn];yn&&(len(objectKeys(yn))?await an.set(Fn,yn):(await an.remove(Fn),Fn.includes(hitSourceRegexpPrefix)&&ln&&(ln=filterItem(ln,gn=>hitSourceRegexpCacheKey(gn)!==Fn))))})),cn!==len(ln||[])&&await an.set(unifiedHitSourceRegexpCacheKey,ln)};var cloneMethod=en=>{const{data:rn,config:an}=en,nn={...an},{headers:tn={},params:un={}}=nn,ln=getContext(en);nn.headers={...tn},nn.params=isString(un)?un:{...un};const dn=newInstance(Method,en.type,ln,en.url,nn,rn);return objAssign(dn,{...en,config:nn})};const hitCacheBySource=async en=>{const{autoHitCache:rn}=globalConfigMap,{l1Cache:an,l2Cache:nn}=getContext(en),tn=getMethodInternalKey(en),{name:un}=getConfig$1(en),ln={global:[...usingL1CacheAdapters,...usingL2CacheAdapters],self:[an,nn],close:[]}[rn];ln&&len(ln)&&await PromiseCls.all(mapItem(ln,dn=>hitTargetCacheWithCacheAdapter(tn,un,dn)))},adapterReturnMap={};function sendRequest(en,rn){let an=trueValue,nn;const tn=newInstance(PromiseCls,ln=>{nn=ln});return{abort:()=>{promiseThen(tn,ln=>ln&&ln.abort())},onDownload:ln=>{promiseThen(tn,dn=>dn&&dn.onDownload&&dn.onDownload(ln))},onUpload:ln=>{promiseThen(tn,dn=>dn&&dn.onUpload&&dn.onUpload(ln))},response:async()=>{const{beforeRequest:ln=noop,responded:dn,requestAdapter:hn,cacheLogger:cn}=getOptions(en),Fn=getMethodInternalKey(en),{s:yn,t:gn,m:bn,e:pn}=getLocalCacheConfigParam(en),{id:fn,l1Cache:Cn,l2Cache:Sn,snapshots:Gn}=getContext(en),{cacheFor:Jn}=getConfig$1(en),{hitSource:Mn}=en;let Tn=await(isFn(Jn)?Jn():rn?undefinedValue:getWithCacheAdapter(fn,Fn,Cn));if(bn===STORAGE_RESTORE&&!Tn&&!rn){const On=await getRawWithCacheAdapter(fn,Fn,Sn,gn);if(On){const[Un,Zn]=On;await setWithCacheAdapter(fn,Fn,Un,Zn,Cn,Mn),Tn=Un}}const In=cloneMethod(en);await ln(In);const{baseURL:An,url:$n,type:qn,data:zn}=In,{params:kn={},headers:Xn={},transform:jn=$self,shareRequest:Ln}=getConfig$1(In),Dn=adapterReturnMap[fn]=adapterReturnMap[fn]||{},En=In.data,Pn=isSpecialRequestBody(En);let Bn=Pn?undefinedValue:Dn[Fn],Hn=$self,_n=undefinedValue,Vn=noop;if(isFn(dn))Hn=dn;else if(isPlainObject(dn)){const{onSuccess:On,onError:Un,onComplete:Zn}=dn;Hn=isFn(On)?On:Hn,_n=isFn(Un)?Un:_n,Vn=isFn(Zn)?Zn:Vn}if(Tn!==undefinedValue)return nn(),In.fromCache=trueValue,sloughFunction(cn,defaultCacheLogger)(Tn,In,bn,gn),Vn(In),Tn;if(an=falseValue,!Ln||!Bn){const On=hn({url:buildCompletedURL(An,$n,kn),type:qn,data:zn,headers:Xn},In);Bn=Dn[Fn]=On}nn(Bn);const Yn=async(On,Un,Zn=trueValue)=>{const dt=await On,ut=await jn(dt,Un||{});Gn.save(en);try{await hitCacheBySource(In)}catch{}if((!En||!Pn)&&Zn)try{await PromiseCls.all([setWithCacheAdapter(fn,Fn,ut,pn(MEMORY),Cn,Mn),yn&&setWithCacheAdapter(fn,Fn,ut,pn(STORAGE_RESTORE),Sn,Mn,gn)])}catch{}return deepClone(ut)};return promiseFinally(promiseThen(PromiseCls.all([Bn.response(),Bn.headers()]),([On,Un])=>(deleteAttr(Dn,Fn),Yn(Hn(On,In),Un)),On=>(deleteAttr(Dn,Fn),isFn(_n)?Yn(_n(On,In),undefinedValue,falseValue):promiseReject(On))),()=>{Vn(In)})},fromCache:()=>an}}const offEventCallback=(en,rn)=>()=>{const an=rn.indexOf(en);an>=0&&rn.splice(an,1)};class Method{constructor(rn,an,nn,tn,un){this.dhs=[],this.uhs=[],this.fromCache=undefinedValue;const ln=()=>{ln.a()};ln.a=noop,rn=rn.toUpperCase();const dn=this,hn=getContextOptions(an);dn.abort=ln,dn.baseURL=hn.baseURL||"",dn.url=nn,dn.type=rn,dn.context=an;const cn={},Fn="cacheFor",yn=isPlainObject(hn[Fn])?hn[Fn][rn]:undefinedValue,gn=tn&&tn.hitSource;forEach(["timeout","shareRequest"],bn=>{hn[bn]!==undefinedValue&&(cn[bn]=hn[bn])}),yn!==undefinedValue&&(cn[Fn]=yn),gn&&(dn.hitSource=mapItem(isArray(gn)?gn:[gn],bn=>instanceOf(bn,Method)?getMethodInternalKey(bn):bn),deleteAttr(tn,"hitSource")),dn.config={...cn,headers:{},params:{},...tn||{}},dn.data=un,dn.meta=tn?tn.meta:dn.meta,dn.key=dn.generateKey()}onDownload(rn){return pushItem(this.dhs,rn),offEventCallback(rn,this.dhs)}onUpload(rn){return pushItem(this.uhs,rn),offEventCallback(rn,this.uhs)}send(rn=falseValue){const an=this,{response:nn,onDownload:tn,onUpload:un,abort:ln,fromCache:dn}=sendRequest(an,rn);return len(an.dhs)>0&&tn((hn,cn)=>forEach(an.dhs,Fn=>Fn({loaded:hn,total:cn}))),len(an.uhs)>0&&un((hn,cn)=>forEach(an.uhs,Fn=>Fn({loaded:hn,total:cn}))),an.abort.a=ln,an.fromCache=undefinedValue,an.promise=promiseThen(nn(),hn=>(an.fromCache=dn(),hn)),an.promise}setName(rn){getConfig$1(this).name=rn}generateKey(){return key(this)}then(rn,an){return promiseThen(this.send(),rn,an)}catch(rn){return promiseCatch(this.send(),rn)}finally(rn){return promiseFinally(this.send(),rn)}}const myAssert=createAssert(),EVENT_SUCCESS_KEY="success",memoryAdapter=()=>{let en={};const rn=createEventManager();return{set(nn,tn){en[nn]=tn,rn.emit(EVENT_SUCCESS_KEY,{type:"set",key:nn,value:tn,container:en})},get:nn=>{const tn=en[nn];return rn.emit(EVENT_SUCCESS_KEY,{type:"get",key:nn,value:tn,container:en}),tn},remove(nn){deleteAttr(en,nn),rn.emit(EVENT_SUCCESS_KEY,{type:"remove",key:nn,container:en})},clear:()=>{en={},rn.emit(EVENT_SUCCESS_KEY,{type:"clear",key:"",container:en})},emitter:rn}},localStorageAdapter=()=>{const en=createEventManager(),rn=localStorage;return{set:(nn,tn)=>{rn.setItem(nn,JSONStringify(tn)),en.emit(EVENT_SUCCESS_KEY,{type:"set",key:nn,value:tn,container:rn})},get:nn=>{const tn=rn.getItem(nn),un=tn&&JSONParse(tn);return en.emit(EVENT_SUCCESS_KEY,{type:"get",key:nn,value:un,container:rn}),un},remove:nn=>{rn.removeItem(nn),en.emit(EVENT_SUCCESS_KEY,{type:"remove",key:nn,container:rn})},clear:()=>{rn.clear(),en.emit(EVENT_SUCCESS_KEY,{type:"clear",key:"",container:rn})},emitter:en}},placeholderAdapter=()=>{const en=()=>{myAssert(falseValue,"l2Cache is not defined.")};return{set:()=>{en()},get:()=>(en(),undefinedValue),remove:()=>{en()},clear:()=>{}}},SetCls=Set;class MethodSnapshotContainer{constructor(rn){this.records={},this.occupy=0,myAssert(rn>=0,"expected snapshots limit to be >= 0"),this.capacity=rn}save(rn){const{name:an}=getConfig$1(rn),{records:nn,occupy:tn,capacity:un}=this;an&&tn<un&&((nn[an]=nn[an]||newInstance(SetCls)).add(rn),this.occupy+=1)}match(rn,an=!0){let nn,tn,un,ln=rn;isPlainObject(rn)&&(ln=rn.name,un=rn.filter),instanceOf(ln,RegExpCls)?tn=ln:isString(ln)&&(nn=ln);const{records:dn}=this;let hn=newInstance(SetCls);nn?hn=dn[nn]||hn:tn&&forEach(filterItem(objectKeys(dn),Fn=>tn.test(Fn)),Fn=>{dn[Fn].forEach(yn=>hn.add(yn))});const cn=isFn(un)?filterItem([...hn],un):[...hn];return an?cn:cn[0]}}const typeGet="GET",typeHead="HEAD",typePost="POST",typePut="PUT",typePatch="PATCH",typeDelete="DELETE",typeOptions="OPTIONS",defaultAlovaOptions={cacheFor:{[typeGet]:3e5},shareRequest:trueValue,snapshots:1e3};let idCount=0,Alova$1=class{constructor(rn){var an,nn;const tn=this;tn.id=(rn.id||(idCount+=1)).toString(),tn.l1Cache=rn.l1Cache||memoryAdapter(),tn.l2Cache=rn.l2Cache||(typeof localStorage<"u"?localStorageAdapter():placeholderAdapter()),tn.options={...defaultAlovaOptions,...rn},tn.snapshots=newInstance(MethodSnapshotContainer,(nn=(an=rn.snapshots)!==null&&an!==void 0?an:defaultAlovaOptions.snapshots)!==null&&nn!==void 0?nn:0)}Request(rn){return newInstance(Method,rn.method||typeGet,this,rn.url,rn,rn.data)}Get(rn,an){return newInstance(Method,typeGet,this,rn,an)}Post(rn,an,nn){return newInstance(Method,typePost,this,rn,nn,an)}Delete(rn,an,nn){return newInstance(Method,typeDelete,this,rn,nn,an)}Put(rn,an,nn){return newInstance(Method,typePut,this,rn,nn,an)}Head(rn,an){return newInstance(Method,typeHead,this,rn,an)}Patch(rn,an,nn){return newInstance(Method,typePatch,this,rn,nn,an)}Options(rn,an){return newInstance(Method,typeOptions,this,rn,an)}},boundStatesHook=undefinedValue;const usingL1CacheAdapters=[],usingL2CacheAdapters=[],createAlova=en=>{const rn=newInstance(Alova$1,en),an=rn.options.statesHook;boundStatesHook&&an&&myAssert(boundStatesHook.name===an.name,"expected to use the same `statesHook`"),boundStatesHook=an;const{l1Cache:nn,l2Cache:tn}=rn;return!usingL1CacheAdapters.includes(nn)&&pushItem(usingL1CacheAdapters,nn),!usingL2CacheAdapters.includes(tn)&&pushItem(usingL2CacheAdapters,tn),rn};var vue={name:"Vue",create:en=>ref(en),dehydrate:en=>en.value,update:(en,rn)=>{rn.value=en},effectRequest({handler:en,removeStates:rn,immediate:an,watchingStates:nn}){getCurrentInstance()&&onUnmounted(rn),an&&en(),forEach(nn||[],(tn,un)=>{watch(tn,()=>{en(un)},{deep:trueValue})})},computed:en=>computed(en),watch:(en,rn)=>{watch(en,rn,{deep:trueValue})},onMounted:en=>{getCurrentInstance()?onMounted(en):setTimeoutFn(en,10)},onUnmounted:en=>{getCurrentInstance()&&onUnmounted(en)}};const isBodyData=en=>isString(en)||isSpecialRequestBody(en);function adapterFetch(){return(en,rn)=>{const an=rn.config,nn=an.timeout||0,tn=new AbortController,{data:un,headers:ln}=en,dn=/content-type/i.test(ObjectCls.keys(ln).join()),hn=un&&un.toString()==="[object FormData]";!dn&&!hn&&(ln["Content-Type"]="application/json;charset=UTF-8");const cn=fetch(en.url,{...an,method:en.type,signal:tn.signal,body:isBodyData(un)?un:JSONStringify(un)});let Fn,yn=falseValue;return nn>0&&(Fn=setTimeoutFn(()=>{yn=trueValue,tn.abort()},nn)),{response:()=>cn.then(gn=>(clearTimeoutTimer(Fn),gn.clone()),gn=>promiseReject(yn?newInstance(Error,"fetchError: network timeout"):gn)),headers:()=>cn.then(({headers:gn})=>gn,()=>({})),onDownload:async gn=>{let bn=falseValue;const pn=await cn.catch(()=>{bn=trueValue});if(!pn)return;const{headers:fn,body:Cn}=pn.clone(),Sn=Cn?Cn.getReader():undefinedValue,Gn=Number(fn.get("Content-Length")||fn.get("content-length")||0);if(Gn<=0)return;let Jn=0;if(Sn){const Mn=()=>Sn.read().then(({done:Tn,value:In=new Uint8Array})=>{if(Tn||bn)bn&&gn(Jn,0);else return Jn+=In.byteLength,gn(Jn,Gn),Mn()});Mn()}},onUpload(){console.error("fetch API does'nt support uploading progress. please consider to change `@alova/adapter-xhr` or `@alova/adapter-axios`")},abort:()=>{tn.abort(),clearTimeoutTimer(Fn)}}}}const mockLabel="mock",mockLabelColor="#64bde8",mockLabelBg="#ccefff",realRequestLabel="Realtime",realRequestLabelColor="#999999",realRequestLabelBg="#ededed",labelStyle=(en,rn)=>`padding: 2px 6px; background: ${en}; color: ${rn};`,titleStyle="color: black; font-size: 12px; font-weight: bolder",transform2TableData=en=>{const rn={};for(const an in en)rn[an]={value:en[an]};return rn},consoleRequestInfo=({isMock:en,url:rn,method:an,headers:nn,query:tn,data:un,responseHeaders:ln,response:dn})=>{const hn=console;hn.groupCollapsed(`%c${en?mockLabel:realRequestLabel}`,labelStyle(en?mockLabelBg:realRequestLabelBg,en?mockLabelColor:realRequestLabelColor),rn),hn.log("%c[Method]",titleStyle,an.toUpperCase()),hn.log("%c[Request Headers]",titleStyle),hn.table(transform2TableData(nn)),hn.log("%c[Query String Parameters]",titleStyle),hn.table(transform2TableData(tn)),hn.log("%c[Request Body]",titleStyle,un||""),en&&(Object.keys(ln).length>0&&(hn.log("%c[Response Headers]",titleStyle),hn.table(transform2TableData(ln))),hn.log("%c[Response Body]",titleStyle,dn||"")),hn.groupEnd()},defaultMockResponse=({status:en=200,responseHeaders:rn,statusText:an="ok",body:nn})=>{const tn=new Response(isSpecialRequestBody(nn)?nn:JSON.stringify(nn),{status:en,statusText:an,headers:rn});return{response:tn,headers:tn.headers}},defaultMockError=en=>en,parseUrl=en=>{en=/^[^/]*\/\//.test(en)?en:`//${en}`;const rn=en.split("/").slice(3),an={};let nn=rn.pop(),tn="",un="";return nn&&(nn=nn.replace(/\?[^?#]+/,ln=>(ln.substring(1).split("&").forEach(dn=>{const[hn,cn]=dn.split("=");hn&&(an[hn]=cn)}),"")),nn=nn.replace(/#[^#]*/,ln=>(un=ln,"")),rn.push(nn),tn=`/${rn.join("/")}`),{pathname:tn,query:an,hash:un}};function MockRequest({enable:en=trueValue,delay:rn=2e3,httpAdapter:an,mockRequestLogger:nn=consoleRequestInfo,mock:tn,onMockResponse:un=defaultMockResponse,onMockError:ln=defaultMockError,matchMode:dn="pathname"}={mock:{}}){return(hn,cn)=>{tn=en&&tn||{};const{url:Fn,data:yn,type:gn,headers:bn}=hn;let pn=cn.url,fn=cn.config.params||{};if(dn==="pathname"){const kn=parseUrl(Fn);pn=kn.pathname,fn=kn.query}const Cn={},Sn=pn.split("/"),Gn=Object.keys(tn).filter(kn=>{if(kn.startsWith("-"))return falseValue;let Xn="GET";if(kn=kn.replace(/^\[(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|TRACE|CONNECT)\]/i,(Ln,Dn)=>(Xn=Dn.toUpperCase(),"")),Xn!==gn.toUpperCase())return falseValue;const jn=kn.split("/");if(jn.length!==Sn.length)return falseValue;for(let Ln=0;Ln<jn.length;Ln+=1){const Dn=jn[Ln],En=(Dn.match(/^\{(.*)\}$/)||["",""])[1];if(En)Cn[En]=Sn[Ln];else if(Dn!==Sn[Ln])return falseValue}return trueValue});let Jn=Gn.find(kn=>!/\{.*\}/.test(kn));Jn=Jn||Gn.shift();const Mn=Jn?tn[Jn]:undefinedValue;if(Mn===undefinedValue){if(an)return isFn(nn)&&nn({isMock:falseValue,url:Fn,method:gn,params:Cn,headers:bn,query:fn,data:{},responseHeaders:{}}),an(hn,cn);throw new Error(`cannot find the httpAdapter.
[url]${Fn}`)}const Tn=usePromise(),{resolve:In}=Tn;let{promise:An,reject:$n}=Tn;const qn=cn.config.timeout||0;qn>0&&setTimeout(()=>{$n(new Error("request timeout"))},qn);const zn=setTimeout(()=>{try{const kn=isFn(Mn)?Mn({query:fn,params:Cn,data:isString(yn)?(()=>{try{return JSON.parse(yn)}catch{return yn}})():yn||{},headers:bn}):Mn;In(newInstance(Promise,(Xn,jn)=>{$n=jn,promiseResolve(kn).then(Xn).catch(jn)}))}catch(kn){$n(kn)}},rn);return An=An.then(kn=>{let Xn=200,jn="ok",Ln={},Dn=undefinedValue;return kn===undefinedValue?(Xn=404,jn="api not found"):kn&&isNumber(kn.status)&&isString(kn.statusText)?(Xn=kn.status,jn=kn.statusText,Ln=kn.responseHeaders||Ln,Dn=kn.body):Dn=kn,newInstance(Promise,(En,Pn)=>{try{const Bn=un({status:Xn,statusText:jn,responseHeaders:Ln,body:Dn},{headers:bn,query:fn,params:Cn,data:yn||{}},cn);En(Bn)}catch(Bn){Pn(Bn)}}).then(En=>(isFn(nn)&&nn({isMock:trueValue,url:Fn,method:gn,params:Cn,headers:bn,query:fn,data:yn||{},responseHeaders:Ln,response:Dn}),En))}).catch(kn=>promiseReject(ln(kn,cn))),{response:()=>An.then(({response:kn})=>kn&&globalToString(kn)==="[object Response]"?kn.clone():kn),headers:()=>An.then(({headers:kn})=>kn),abort:()=>{clearTimeout(zn),$n(new Error("The user abort request"))}}}}function createAlovaMockAdapter(en,rn={enable:!0}){let an={};return en.filter(({enable:nn})=>nn).forEach(({data:nn})=>{an={...nn,...an}}),MockRequest({...rn,mock:an})}var defineMock=(en,rn=!0)=>({enable:rn,data:en}),mock={exports:{}};(function(module,exports){(function(rn,an){module.exports=an()})(commonjsGlobal,function(){return function(en){var rn={};function an(nn){if(rn[nn])return rn[nn].exports;var tn=rn[nn]={exports:{},id:nn,loaded:!1};return en[nn].call(tn.exports,tn,tn.exports,an),tn.loaded=!0,tn.exports}return an.m=en,an.c=rn,an.p="",an(0)}([function(en,rn,an){var nn=an(1),tn=an(3),un=an(5),ln=an(20),dn=an(23),hn=an(25),cn;typeof window<"u"&&(cn=an(27));/*!
    Mock - 模拟请求 & 模拟数据
    https://github.com/nuysoft/Mock
    墨智 mozhi.gyy@taobao.com nuysoft@gmail.com
*/var Fn={Handler:nn,Random:un,Util:tn,XHR:cn,RE:ln,toJSONSchema:dn,valid:hn,heredoc:tn.heredoc,setup:function(yn){return cn.setup(yn)},_mocked:{}};Fn.version="1.0.1-beta3",cn&&(cn.Mock=Fn),Fn.mock=function(yn,gn,bn){return arguments.length===1?nn.gen(yn):(arguments.length===2&&(bn=gn,gn=void 0),cn&&(window.XMLHttpRequest=cn),Fn._mocked[yn+(gn||"")]={rurl:yn,rtype:gn,template:bn},Fn)},en.exports=Fn},function(module,exports,__webpack_require__){var Constant=__webpack_require__(2),Util=__webpack_require__(3),Parser=__webpack_require__(4),Random=__webpack_require__(5),RE=__webpack_require__(20),Handler={extend:Util.extend};Handler.gen=function(en,rn,an){rn=rn==null?"":rn+"",an=an||{},an={path:an.path||[Constant.GUID],templatePath:an.templatePath||[Constant.GUID++],currentContext:an.currentContext,templateCurrentContext:an.templateCurrentContext||en,root:an.root||an.currentContext,templateRoot:an.templateRoot||an.templateCurrentContext||en};var nn=Parser.parse(rn),tn=Util.type(en),un;return Handler[tn]?(un=Handler[tn]({type:tn,template:en,name:rn,parsedName:rn&&rn.replace(Constant.RE_KEY,"$1"),rule:nn,context:an}),an.root||(an.root=un),un):en},Handler.extend({array:function(en){var rn=[],an,nn;if(en.template.length===0)return rn;if(en.rule.parameters)if(en.rule.min===1&&en.rule.max===void 0)en.context.path.push(en.name),en.context.templatePath.push(en.name),rn=Random.pick(Handler.gen(en.template,void 0,{path:en.context.path,templatePath:en.context.templatePath,currentContext:rn,templateCurrentContext:en.template,root:en.context.root||rn,templateRoot:en.context.templateRoot||en.template})),en.context.path.pop(),en.context.templatePath.pop();else if(en.rule.parameters[2])en.template.__order_index=en.template.__order_index||0,en.context.path.push(en.name),en.context.templatePath.push(en.name),rn=Handler.gen(en.template,void 0,{path:en.context.path,templatePath:en.context.templatePath,currentContext:rn,templateCurrentContext:en.template,root:en.context.root||rn,templateRoot:en.context.templateRoot||en.template})[en.template.__order_index%en.template.length],en.template.__order_index+=+en.rule.parameters[2],en.context.path.pop(),en.context.templatePath.pop();else for(an=0;an<en.rule.count;an++)for(nn=0;nn<en.template.length;nn++)en.context.path.push(rn.length),en.context.templatePath.push(nn),rn.push(Handler.gen(en.template[nn],rn.length,{path:en.context.path,templatePath:en.context.templatePath,currentContext:rn,templateCurrentContext:en.template,root:en.context.root||rn,templateRoot:en.context.templateRoot||en.template})),en.context.path.pop(),en.context.templatePath.pop();else for(an=0;an<en.template.length;an++)en.context.path.push(an),en.context.templatePath.push(an),rn.push(Handler.gen(en.template[an],an,{path:en.context.path,templatePath:en.context.templatePath,currentContext:rn,templateCurrentContext:en.template,root:en.context.root||rn,templateRoot:en.context.templateRoot||en.template})),en.context.path.pop(),en.context.templatePath.pop();return rn},object:function(en){var rn={},an,nn,tn,un,ln,dn;if(en.rule.min!=null)for(an=Util.keys(en.template),an=Random.shuffle(an),an=an.slice(0,en.rule.count),dn=0;dn<an.length;dn++)tn=an[dn],un=tn.replace(Constant.RE_KEY,"$1"),en.context.path.push(un),en.context.templatePath.push(tn),rn[un]=Handler.gen(en.template[tn],tn,{path:en.context.path,templatePath:en.context.templatePath,currentContext:rn,templateCurrentContext:en.template,root:en.context.root||rn,templateRoot:en.context.templateRoot||en.template}),en.context.path.pop(),en.context.templatePath.pop();else{an=[],nn=[];for(tn in en.template)(typeof en.template[tn]=="function"?nn:an).push(tn);for(an=an.concat(nn),dn=0;dn<an.length;dn++)tn=an[dn],un=tn.replace(Constant.RE_KEY,"$1"),en.context.path.push(un),en.context.templatePath.push(tn),rn[un]=Handler.gen(en.template[tn],tn,{path:en.context.path,templatePath:en.context.templatePath,currentContext:rn,templateCurrentContext:en.template,root:en.context.root||rn,templateRoot:en.context.templateRoot||en.template}),en.context.path.pop(),en.context.templatePath.pop(),ln=tn.match(Constant.RE_KEY),ln&&ln[2]&&Util.type(en.template[tn])==="number"&&(en.template[tn]+=parseInt(ln[2],10))}return rn},number:function(en){var rn,an;if(en.rule.decimal){for(en.template+="",an=en.template.split("."),an[0]=en.rule.range?en.rule.count:an[0],an[1]=(an[1]||"").slice(0,en.rule.dcount);an[1].length<en.rule.dcount;)an[1]+=an[1].length<en.rule.dcount-1?Random.character("number"):Random.character("123456789");rn=parseFloat(an.join("."),10)}else rn=en.rule.range&&!en.rule.parameters[2]?en.rule.count:en.template;return rn},boolean:function(en){var rn;return rn=en.rule.parameters?Random.bool(en.rule.min,en.rule.max,en.template):en.template,rn},string:function(en){var rn="",an,nn,tn,un;if(en.template.length){for(en.rule.count==null&&(rn+=en.template),an=0;an<en.rule.count;an++)rn+=en.template;for(nn=rn.match(Constant.RE_PLACEHOLDER)||[],an=0;an<nn.length;an++){if(tn=nn[an],/^\\/.test(tn)){nn.splice(an--,1);continue}if(un=Handler.placeholder(tn,en.context.currentContext,en.context.templateCurrentContext,en),nn.length===1&&tn===rn&&typeof un!=typeof rn){rn=un;break}rn=rn.replace(tn,un)}}else rn=en.rule.range?Random.string(en.rule.count):en.template;return rn},function:function(en){return en.template.call(en.context.currentContext,en)},regexp:function(en){var rn="";en.rule.count==null&&(rn+=en.template.source);for(var an=0;an<en.rule.count;an++)rn+=en.template.source;return RE.Handler.gen(RE.Parser.parse(rn))}}),Handler.extend({_all:function(){var en={};for(var rn in Random)en[rn.toLowerCase()]=rn;return en},placeholder:function(placeholder,obj,templateContext,options){Constant.RE_PLACEHOLDER.exec("");var parts=Constant.RE_PLACEHOLDER.exec(placeholder),key=parts&&parts[1],lkey=key&&key.toLowerCase(),okey=this._all()[lkey],params=parts&&parts[2]||"",pathParts=this.splitPathToArray(key);try{params=eval("(function(){ return [].splice.call(arguments, 0 ) })("+params+")")}catch(en){params=parts[2].split(/,\s*/)}if(obj&&key in obj)return obj[key];if(key.charAt(0)==="/"||pathParts.length>1)return this.getValueByKeyPath(key,options);if(templateContext&&typeof templateContext=="object"&&key in templateContext&&placeholder!==templateContext[key])return templateContext[key]=Handler.gen(templateContext[key],key,{currentContext:obj,templateCurrentContext:templateContext}),templateContext[key];if(!(key in Random)&&!(lkey in Random)&&!(okey in Random))return placeholder;for(var i=0;i<params.length;i++)Constant.RE_PLACEHOLDER.exec(""),Constant.RE_PLACEHOLDER.test(params[i])&&(params[i]=Handler.placeholder(params[i],obj,templateContext,options));var handle=Random[key]||Random[lkey]||Random[okey];switch(Util.type(handle)){case"array":return Random.pick(handle);case"function":handle.options=options;var re=handle.apply(Random,params);return re===void 0&&(re=""),delete handle.options,re}},getValueByKeyPath:function(en,rn){var an=en,nn=this.splitPathToArray(en),tn=[];en.charAt(0)==="/"?tn=[rn.context.path[0]].concat(this.normalizePath(nn)):nn.length>1&&(tn=rn.context.path.slice(0),tn.pop(),tn=this.normalizePath(tn.concat(nn)));try{en=nn[nn.length-1];for(var un=rn.context.root,ln=rn.context.templateRoot,dn=1;dn<tn.length-1;dn++)un=un[tn[dn]],ln=ln[tn[dn]];if(un&&en in un)return un[en];if(ln&&typeof ln=="object"&&en in ln&&an!==ln[en])return ln[en]=Handler.gen(ln[en],en,{currentContext:un,templateCurrentContext:ln}),ln[en]}catch{}return"@"+nn.join("/")},normalizePath:function(en){for(var rn=[],an=0;an<en.length;an++)switch(en[an]){case"..":rn.pop();break;case".":break;default:rn.push(en[an])}return rn},splitPathToArray:function(en){var rn=en.split(/\/+/);return rn[rn.length-1]||(rn=rn.slice(0,-1)),rn[0]||(rn=rn.slice(1)),rn}}),module.exports=Handler},function(en,rn){en.exports={GUID:1,RE_KEY:/(.+)\|(?:\+(\d+)|([\+\-]?\d+-?[\+\-]?\d*)?(?:\.(\d+-?\d*))?)/,RE_RANGE:/([\+\-]?\d+)-?([\+\-]?\d+)?/,RE_PLACEHOLDER:/\\*@([^@#%&()\?\s]+)(?:\((.*?)\))?/g}},function(en,rn){var an={};an.extend=function(){var tn=arguments[0]||{},un=1,ln=arguments.length,dn,hn,cn,Fn,yn;for(ln===1&&(tn=this,un=0);un<ln;un++)if(dn=arguments[un],!!dn)for(hn in dn)cn=tn[hn],Fn=dn[hn],tn!==Fn&&Fn!==void 0&&(an.isArray(Fn)||an.isObject(Fn)?(an.isArray(Fn)&&(yn=cn&&an.isArray(cn)?cn:[]),an.isObject(Fn)&&(yn=cn&&an.isObject(cn)?cn:{}),tn[hn]=an.extend(yn,Fn)):tn[hn]=Fn);return tn},an.each=function(tn,un,ln){var dn,hn;if(this.type(tn)==="number")for(dn=0;dn<tn;dn++)un(dn,dn);else if(tn.length===+tn.length)for(dn=0;dn<tn.length&&un.call(ln,tn[dn],dn,tn)!==!1;dn++);else for(hn in tn)if(un.call(ln,tn[hn],hn,tn)===!1)break},an.type=function(tn){return tn==null?String(tn):Object.prototype.toString.call(tn).match(/\[object (\w+)\]/)[1].toLowerCase()},an.each("String Object Array RegExp Function".split(" "),function(nn){an["is"+nn]=function(tn){return an.type(tn)===nn.toLowerCase()}}),an.isObjectOrArray=function(nn){return an.isObject(nn)||an.isArray(nn)},an.isNumeric=function(nn){return!isNaN(parseFloat(nn))&&isFinite(nn)},an.keys=function(nn){var tn=[];for(var un in nn)nn.hasOwnProperty(un)&&tn.push(un);return tn},an.values=function(nn){var tn=[];for(var un in nn)nn.hasOwnProperty(un)&&tn.push(nn[un]);return tn},an.heredoc=function(tn){return tn.toString().replace(/^[^\/]+\/\*!?/,"").replace(/\*\/[^\/]+$/,"").replace(/^[\s\xA0]+/,"").replace(/[\s\xA0]+$/,"")},an.noop=function(){},en.exports=an},function(en,rn,an){var nn=an(2),tn=an(5);en.exports={parse:function(un){un=un==null?"":un+"";var ln=(un||"").match(nn.RE_KEY),dn=ln&&ln[3]&&ln[3].match(nn.RE_RANGE),hn=dn&&dn[1]&&parseInt(dn[1],10),cn=dn&&dn[2]&&parseInt(dn[2],10),Fn=dn?dn[2]?tn.integer(hn,cn):parseInt(dn[1],10):void 0,yn=ln&&ln[4]&&ln[4].match(nn.RE_RANGE),gn=yn&&yn[1]&&parseInt(yn[1],10),bn=yn&&yn[2]&&parseInt(yn[2],10),pn=yn?!yn[2]&&parseInt(yn[1],10)||tn.integer(gn,bn):void 0,fn={parameters:ln,range:dn,min:hn,max:cn,count:Fn,decimal:yn,dmin:gn,dmax:bn,dcount:pn};for(var Cn in fn)if(fn[Cn]!=null)return fn;return{}}}},function(en,rn,an){var nn=an(3),tn={extend:nn.extend};tn.extend(an(6)),tn.extend(an(7)),tn.extend(an(8)),tn.extend(an(10)),tn.extend(an(13)),tn.extend(an(15)),tn.extend(an(16)),tn.extend(an(17)),tn.extend(an(14)),tn.extend(an(19)),en.exports=tn},function(en,rn){en.exports={boolean:function(an,nn,tn){return tn!==void 0?(an=typeof an<"u"&&!isNaN(an)?parseInt(an,10):1,nn=typeof nn<"u"&&!isNaN(nn)?parseInt(nn,10):1,Math.random()>1/(an+nn)*an?!tn:tn):Math.random()>=.5},bool:function(an,nn,tn){return this.boolean(an,nn,tn)},natural:function(an,nn){return an=typeof an<"u"?parseInt(an,10):0,nn=typeof nn<"u"?parseInt(nn,10):9007199254740992,Math.round(Math.random()*(nn-an))+an},integer:function(an,nn){return an=typeof an<"u"?parseInt(an,10):-9007199254740992,nn=typeof nn<"u"?parseInt(nn,10):9007199254740992,Math.round(Math.random()*(nn-an))+an},int:function(an,nn){return this.integer(an,nn)},float:function(an,nn,tn,un){tn=tn===void 0?0:tn,tn=Math.max(Math.min(tn,17),0),un=un===void 0?17:un,un=Math.max(Math.min(un,17),0);for(var ln=this.integer(an,nn)+".",dn=0,hn=this.natural(tn,un);dn<hn;dn++)ln+=dn<hn-1?this.character("number"):this.character("123456789");return parseFloat(ln,10)},character:function(an){var nn={lower:"abcdefghijklmnopqrstuvwxyz",upper:"ABCDEFGHIJKLMNOPQRSTUVWXYZ",number:"0123456789",symbol:"!@#$%^&*()[]"};return nn.alpha=nn.lower+nn.upper,nn.undefined=nn.lower+nn.upper+nn.number+nn.symbol,an=nn[(""+an).toLowerCase()]||an,an.charAt(this.natural(0,an.length-1))},char:function(an){return this.character(an)},string:function(an,nn,tn){var un;switch(arguments.length){case 0:un=this.natural(3,7);break;case 1:un=an,an=void 0;break;case 2:typeof arguments[0]=="string"?un=nn:(un=this.natural(an,nn),an=void 0);break;case 3:un=this.natural(nn,tn);break}for(var ln="",dn=0;dn<un;dn++)ln+=this.character(an);return ln},str:function(){return this.string.apply(this,arguments)},range:function(an,nn,tn){arguments.length<=1&&(nn=an||0,an=0),tn=arguments[2]||1,an=+an,nn=+nn,tn=+tn;for(var un=Math.max(Math.ceil((nn-an)/tn),0),ln=0,dn=new Array(un);ln<un;)dn[ln++]=an,an+=tn;return dn}}},function(en,rn){var an={yyyy:"getFullYear",yy:function(nn){return(""+nn.getFullYear()).slice(2)},y:"yy",MM:function(nn){var tn=nn.getMonth()+1;return tn<10?"0"+tn:tn},M:function(nn){return nn.getMonth()+1},dd:function(nn){var tn=nn.getDate();return tn<10?"0"+tn:tn},d:"getDate",HH:function(nn){var tn=nn.getHours();return tn<10?"0"+tn:tn},H:"getHours",hh:function(nn){var tn=nn.getHours()%12;return tn<10?"0"+tn:tn},h:function(nn){return nn.getHours()%12},mm:function(nn){var tn=nn.getMinutes();return tn<10?"0"+tn:tn},m:"getMinutes",ss:function(nn){var tn=nn.getSeconds();return tn<10?"0"+tn:tn},s:"getSeconds",SS:function(nn){var tn=nn.getMilliseconds();return tn<10&&"00"+tn||tn<100&&"0"+tn||tn},S:"getMilliseconds",A:function(nn){return nn.getHours()<12?"AM":"PM"},a:function(nn){return nn.getHours()<12?"am":"pm"},T:"getTime"};en.exports={_patternLetters:an,_rformat:new RegExp(function(){var nn=[];for(var tn in an)nn.push(tn);return"("+nn.join("|")+")"}(),"g"),_formatDate:function(nn,tn){return tn.replace(this._rformat,function un(ln,dn){return typeof an[dn]=="function"?an[dn](nn):an[dn]in an?un(ln,an[dn]):nn[an[dn]]()})},_randomDate:function(nn,tn){return nn=nn===void 0?new Date(0):nn,tn=tn===void 0?new Date:tn,new Date(Math.random()*(tn.getTime()-nn.getTime()))},date:function(nn){return nn=nn||"yyyy-MM-dd",this._formatDate(this._randomDate(),nn)},time:function(nn){return nn=nn||"HH:mm:ss",this._formatDate(this._randomDate(),nn)},datetime:function(nn){return nn=nn||"yyyy-MM-dd HH:mm:ss",this._formatDate(this._randomDate(),nn)},now:function(nn,tn){arguments.length===1&&(/year|month|day|hour|minute|second|week/.test(nn)||(tn=nn,nn="")),nn=(nn||"").toLowerCase(),tn=tn||"yyyy-MM-dd HH:mm:ss";var un=new Date;switch(nn){case"year":un.setMonth(0);case"month":un.setDate(1);case"week":case"day":un.setHours(0);case"hour":un.setMinutes(0);case"minute":un.setSeconds(0);case"second":un.setMilliseconds(0)}switch(nn){case"week":un.setDate(un.getDate()-un.getDay())}return this._formatDate(un,tn)}}},function(en,rn,an){(function(nn){nn.exports={_adSize:["300x250","250x250","240x400","336x280","180x150","720x300","468x60","234x60","88x31","120x90","120x60","120x240","125x125","728x90","160x600","120x600","300x600"],_screenSize:["320x200","320x240","640x480","800x480","800x480","1024x600","1024x768","1280x800","1440x900","1920x1200","2560x1600"],_videoSize:["720x480","768x576","1280x720","1920x1080"],image:function(tn,un,ln,dn,hn){return arguments.length===4&&(hn=dn,dn=void 0),arguments.length===3&&(hn=ln,ln=void 0),tn||(tn=this.pick(this._adSize)),un&&~un.indexOf("#")&&(un=un.slice(1)),ln&&~ln.indexOf("#")&&(ln=ln.slice(1)),"http://dummyimage.com/"+tn+(un?"/"+un:"")+(ln?"/"+ln:"")+(dn?"."+dn:"")+(hn?"&text="+hn:"")},img:function(){return this.image.apply(this,arguments)},_brandColors:{"4ormat":"#fb0a2a","500px":"#02adea","About.me (blue)":"#00405d","About.me (yellow)":"#ffcc33",Addvocate:"#ff6138",Adobe:"#ff0000",Aim:"#fcd20b",Amazon:"#e47911",Android:"#a4c639","Angie's List":"#7fbb00",AOL:"#0060a3",Atlassian:"#003366",Behance:"#053eff","Big Cartel":"#97b538",bitly:"#ee6123",Blogger:"#fc4f08",Boeing:"#0039a6","Booking.com":"#003580",Carbonmade:"#613854",Cheddar:"#ff7243","Code School":"#3d4944",Delicious:"#205cc0",Dell:"#3287c1",Designmoo:"#e54a4f",Deviantart:"#4e6252","Designer News":"#2d72da",Devour:"#fd0001",DEWALT:"#febd17","Disqus (blue)":"#59a3fc","Disqus (orange)":"#db7132",Dribbble:"#ea4c89",Dropbox:"#3d9ae8",Drupal:"#0c76ab",Dunked:"#2a323a",eBay:"#89c507",Ember:"#f05e1b",Engadget:"#00bdf6",Envato:"#528036",Etsy:"#eb6d20",Evernote:"#5ba525","Fab.com":"#dd0017",Facebook:"#3b5998",Firefox:"#e66000","Flickr (blue)":"#0063dc","Flickr (pink)":"#ff0084",Forrst:"#5b9a68",Foursquare:"#25a0ca",Garmin:"#007cc3",GetGlue:"#2d75a2",Gimmebar:"#f70078",GitHub:"#171515","Google Blue":"#0140ca","Google Green":"#16a61e","Google Red":"#dd1812","Google Yellow":"#fcca03","Google+":"#dd4b39",Grooveshark:"#f77f00",Groupon:"#82b548","Hacker News":"#ff6600",HelloWallet:"#0085ca","Heroku (light)":"#c7c5e6","Heroku (dark)":"#6567a5",HootSuite:"#003366",Houzz:"#73ba37",HTML5:"#ec6231",IKEA:"#ffcc33",IMDb:"#f3ce13",Instagram:"#3f729b",Intel:"#0071c5",Intuit:"#365ebf",Kickstarter:"#76cc1e",kippt:"#e03500",Kodery:"#00af81",LastFM:"#c3000d",LinkedIn:"#0e76a8",Livestream:"#cf0005",Lumo:"#576396",Mixpanel:"#a086d3",Meetup:"#e51937",Nokia:"#183693",NVIDIA:"#76b900",Opera:"#cc0f16",Path:"#e41f11","PayPal (dark)":"#1e477a","PayPal (light)":"#3b7bbf",Pinboard:"#0000e6",Pinterest:"#c8232c",PlayStation:"#665cbe",Pocket:"#ee4056",Prezi:"#318bff",Pusha:"#0f71b4",Quora:"#a82400","QUOTE.fm":"#66ceff",Rdio:"#008fd5",Readability:"#9c0000","Red Hat":"#cc0000",Resource:"#7eb400",Rockpack:"#0ba6ab",Roon:"#62b0d9",RSS:"#ee802f",Salesforce:"#1798c1",Samsung:"#0c4da2",Shopify:"#96bf48",Skype:"#00aff0",Snagajob:"#f47a20",Softonic:"#008ace",SoundCloud:"#ff7700","Space Box":"#f86960",Spotify:"#81b71a",Sprint:"#fee100",Squarespace:"#121212",StackOverflow:"#ef8236",Staples:"#cc0000","Status Chart":"#d7584f",Stripe:"#008cdd",StudyBlue:"#00afe1",StumbleUpon:"#f74425","T-Mobile":"#ea0a8e",Technorati:"#40a800","The Next Web":"#ef4423",Treehouse:"#5cb868",Trulia:"#5eab1f",Tumblr:"#34526f","Twitch.tv":"#6441a5",Twitter:"#00acee",TYPO3:"#ff8700",Ubuntu:"#dd4814",Ustream:"#3388ff",Verizon:"#ef1d1d",Vimeo:"#86c9ef",Vine:"#00a478",Virb:"#06afd8","Virgin Media":"#cc0000",Wooga:"#5b009c","WordPress (blue)":"#21759b","WordPress (orange)":"#d54e21","WordPress (grey)":"#464646",Wunderlist:"#2b88d9",XBOX:"#9bc848",XING:"#126567","Yahoo!":"#720e9e",Yandex:"#ffcc00",Yelp:"#c41200",YouTube:"#c4302b",Zalongo:"#5498dc",Zendesk:"#78a300",Zerply:"#9dcc7a",Zootool:"#5e8b1d"},_brandNames:function(){var tn=[];for(var un in this._brandColors)tn.push(un);return tn},dataImage:function(tn,un){var ln;if(typeof document<"u")ln=document.createElement("canvas");else{var dn=nn.require("canvas");ln=new dn}var hn=ln&&ln.getContext&&ln.getContext("2d");if(!ln||!hn)return"";tn||(tn=this.pick(this._adSize)),un=un!==void 0?un:tn,tn=tn.split("x");var cn=parseInt(tn[0],10),Fn=parseInt(tn[1],10),yn=this._brandColors[this.pick(this._brandNames())],gn="#FFF",bn=14,pn="sans-serif";return ln.width=cn,ln.height=Fn,hn.textAlign="center",hn.textBaseline="middle",hn.fillStyle=yn,hn.fillRect(0,0,cn,Fn),hn.fillStyle=gn,hn.font="bold "+bn+"px "+pn,hn.fillText(un,cn/2,Fn/2,cn),ln.toDataURL("image/png")}}}).call(rn,an(9)(en))},function(en,rn){en.exports=function(an){return an.webpackPolyfill||(an.deprecate=function(){},an.paths=[],an.children=[],an.webpackPolyfill=1),an}},function(en,rn,an){var nn=an(11),tn=an(12);en.exports={color:function(un){return un||tn[un]?tn[un].nicer:this.hex()},hex:function(){var un=this._goldenRatioColor(),ln=nn.hsv2rgb(un),dn=nn.rgb2hex(ln[0],ln[1],ln[2]);return dn},rgb:function(){var un=this._goldenRatioColor(),ln=nn.hsv2rgb(un);return"rgb("+parseInt(ln[0],10)+", "+parseInt(ln[1],10)+", "+parseInt(ln[2],10)+")"},rgba:function(){var un=this._goldenRatioColor(),ln=nn.hsv2rgb(un);return"rgba("+parseInt(ln[0],10)+", "+parseInt(ln[1],10)+", "+parseInt(ln[2],10)+", "+Math.random().toFixed(2)+")"},hsl:function(){var un=this._goldenRatioColor(),ln=nn.hsv2hsl(un);return"hsl("+parseInt(ln[0],10)+", "+parseInt(ln[1],10)+", "+parseInt(ln[2],10)+")"},_goldenRatioColor:function(un,ln){return this._goldenRatio=.618033988749895,this._hue=this._hue||Math.random(),this._hue+=this._goldenRatio,this._hue%=1,typeof un!="number"&&(un=.5),typeof ln!="number"&&(ln=.95),[this._hue*360,un*100,ln*100]}}},function(en,rn){en.exports={rgb2hsl:function(nn){var tn=nn[0]/255,un=nn[1]/255,ln=nn[2]/255,dn=Math.min(tn,un,ln),hn=Math.max(tn,un,ln),cn=hn-dn,Fn,yn,gn;return hn==dn?Fn=0:tn==hn?Fn=(un-ln)/cn:un==hn?Fn=2+(ln-tn)/cn:ln==hn&&(Fn=4+(tn-un)/cn),Fn=Math.min(Fn*60,360),Fn<0&&(Fn+=360),gn=(dn+hn)/2,hn==dn?yn=0:gn<=.5?yn=cn/(hn+dn):yn=cn/(2-hn-dn),[Fn,yn*100,gn*100]},rgb2hsv:function(nn){var tn=nn[0],un=nn[1],ln=nn[2],dn=Math.min(tn,un,ln),hn=Math.max(tn,un,ln),cn=hn-dn,Fn,yn,gn;return hn===0?yn=0:yn=cn/hn*1e3/10,hn==dn?Fn=0:tn==hn?Fn=(un-ln)/cn:un==hn?Fn=2+(ln-tn)/cn:ln==hn&&(Fn=4+(tn-un)/cn),Fn=Math.min(Fn*60,360),Fn<0&&(Fn+=360),gn=hn/255*1e3/10,[Fn,yn,gn]},hsl2rgb:function(nn){var tn=nn[0]/360,un=nn[1]/100,ln=nn[2]/100,dn,hn,cn,Fn,yn;if(un===0)return yn=ln*255,[yn,yn,yn];ln<.5?hn=ln*(1+un):hn=ln+un-ln*un,dn=2*ln-hn,Fn=[0,0,0];for(var gn=0;gn<3;gn++)cn=tn+1/3*-(gn-1),cn<0&&cn++,cn>1&&cn--,6*cn<1?yn=dn+(hn-dn)*6*cn:2*cn<1?yn=hn:3*cn<2?yn=dn+(hn-dn)*(2/3-cn)*6:yn=dn,Fn[gn]=yn*255;return Fn},hsl2hsv:function(nn){var tn=nn[0],un=nn[1]/100,ln=nn[2]/100,dn,hn;return ln*=2,un*=ln<=1?ln:2-ln,hn=(ln+un)/2,dn=2*un/(ln+un),[tn,dn*100,hn*100]},hsv2rgb:function(nn){var tn=nn[0]/60,un=nn[1]/100,ln=nn[2]/100,dn=Math.floor(tn)%6,hn=tn-Math.floor(tn),cn=255*ln*(1-un),Fn=255*ln*(1-un*hn),yn=255*ln*(1-un*(1-hn));switch(ln=255*ln,dn){case 0:return[ln,yn,cn];case 1:return[Fn,ln,cn];case 2:return[cn,ln,yn];case 3:return[cn,Fn,ln];case 4:return[yn,cn,ln];case 5:return[ln,cn,Fn]}},hsv2hsl:function(nn){var tn=nn[0],un=nn[1]/100,ln=nn[2]/100,dn,hn;return hn=(2-un)*ln,dn=un*ln,dn/=hn<=1?hn:2-hn,hn/=2,[tn,dn*100,hn*100]},rgb2hex:function(an,nn,tn){return"#"+((256+an<<8|nn)<<8|tn).toString(16).slice(1)},hex2rgb:function(an){return an="0x"+an.slice(1).replace(an.length>4?an:/./g,"$&$&")|0,[an>>16,an>>8&255,an&255]}}},function(en,rn){en.exports={navy:{value:"#000080",nicer:"#001F3F"},blue:{value:"#0000ff",nicer:"#0074D9"},aqua:{value:"#00ffff",nicer:"#7FDBFF"},teal:{value:"#008080",nicer:"#39CCCC"},olive:{value:"#008000",nicer:"#3D9970"},green:{value:"#008000",nicer:"#2ECC40"},lime:{value:"#00ff00",nicer:"#01FF70"},yellow:{value:"#ffff00",nicer:"#FFDC00"},orange:{value:"#ffa500",nicer:"#FF851B"},red:{value:"#ff0000",nicer:"#FF4136"},maroon:{value:"#800000",nicer:"#85144B"},fuchsia:{value:"#ff00ff",nicer:"#F012BE"},purple:{value:"#800080",nicer:"#B10DC9"},silver:{value:"#c0c0c0",nicer:"#DDDDDD"},gray:{value:"#808080",nicer:"#AAAAAA"},black:{value:"#000000",nicer:"#111111"},white:{value:"#FFFFFF",nicer:"#FFFFFF"}}},function(en,rn,an){var nn=an(6),tn=an(14);function un(ln,dn,hn,cn){return hn===void 0?nn.natural(ln,dn):cn===void 0?hn:nn.natural(parseInt(hn,10),parseInt(cn,10))}en.exports={paragraph:function(ln,dn){for(var hn=un(3,7,ln,dn),cn=[],Fn=0;Fn<hn;Fn++)cn.push(this.sentence());return cn.join(" ")},cparagraph:function(ln,dn){for(var hn=un(3,7,ln,dn),cn=[],Fn=0;Fn<hn;Fn++)cn.push(this.csentence());return cn.join("")},sentence:function(ln,dn){for(var hn=un(12,18,ln,dn),cn=[],Fn=0;Fn<hn;Fn++)cn.push(this.word());return tn.capitalize(cn.join(" "))+"."},csentence:function(ln,dn){for(var hn=un(12,18,ln,dn),cn=[],Fn=0;Fn<hn;Fn++)cn.push(this.cword());return cn.join("")+"。"},word:function(ln,dn){for(var hn=un(3,10,ln,dn),cn="",Fn=0;Fn<hn;Fn++)cn+=nn.character("lower");return cn},cword:function(ln,dn,hn){var cn="的一是在不了有和人这中大为上个国我以要他时来用们生到作地于出就分对成会可主发年动同工也能下过子说产种面而方后多定行学法所民得经十三之进着等部度家电力里如水化高自二理起小物现实加量都两体制机当使点从业本去把性好应开它合还因由其些然前外天政四日那社义事平形相全表间样与关各重新线内数正心反你明看原又么利比或但质气第向道命此变条只没结解问意建月公无系军很情者最立代想已通并提直题党程展五果料象员革位入常文总次品式活设及管特件长求老头基资边流路级少图山统接知较将组见计别她手角期根论运农指几九区强放决西被干做必战先回则任取据处队南给色光门即保治北造百规热领七海口东导器压志世金增争济阶油思术极交受联什认六共权收证改清己美再采转更单风切打白教速花带安场身车例真务具万每目至达走积示议声报斗完类八离华名确才科张信马节话米整空元况今集温传土许步群广石记需段研界拉林律叫且究观越织装影算低持音众书布复容儿须际商非验连断深难近矿千周委素技备半办青省列习响约支般史感劳便团往酸历市克何除消构府称太准精值号率族维划选标写存候毛亲快效斯院查江型眼王按格养易置派层片始却专状育厂京识适属圆包火住调满县局照参红细引听该铁价严龙飞",Fn;switch(arguments.length){case 0:ln=cn,Fn=1;break;case 1:typeof arguments[0]=="string"?Fn=1:(Fn=ln,ln=cn);break;case 2:typeof arguments[0]=="string"?Fn=dn:(Fn=this.natural(ln,dn),ln=cn);break;case 3:Fn=this.natural(dn,hn);break}for(var yn="",gn=0;gn<Fn;gn++)yn+=ln.charAt(this.natural(0,ln.length-1));return yn},title:function(ln,dn){for(var hn=un(3,7,ln,dn),cn=[],Fn=0;Fn<hn;Fn++)cn.push(this.capitalize(this.word()));return cn.join(" ")},ctitle:function(ln,dn){for(var hn=un(3,7,ln,dn),cn=[],Fn=0;Fn<hn;Fn++)cn.push(this.cword());return cn.join("")}}},function(en,rn,an){var nn=an(3);en.exports={capitalize:function(tn){return(tn+"").charAt(0).toUpperCase()+(tn+"").substr(1)},upper:function(tn){return(tn+"").toUpperCase()},lower:function(tn){return(tn+"").toLowerCase()},pick:function(un,ln,dn){return nn.isArray(un)?(ln===void 0&&(ln=1),dn===void 0&&(dn=ln)):(un=[].slice.call(arguments),ln=1,dn=1),ln===1&&dn===1?un[this.natural(0,un.length-1)]:this.shuffle(un,ln,dn)},shuffle:function(un,ln,dn){un=un||[];for(var hn=un.slice(0),cn=[],Fn=0,yn=hn.length,gn=0;gn<yn;gn++)Fn=this.natural(0,hn.length-1),cn.push(hn[Fn]),hn.splice(Fn,1);switch(arguments.length){case 0:case 1:return cn;case 2:dn=ln;case 3:return ln=parseInt(ln,10),dn=parseInt(dn,10),cn.slice(0,this.natural(ln,dn))}},order:function tn(un){tn.cache=tn.cache||{},arguments.length>1&&(un=[].slice.call(arguments,0));var ln=tn.options,dn=ln.context.templatePath.join("."),hn=tn.cache[dn]=tn.cache[dn]||{index:0,array:un};return hn.array[hn.index++%hn.array.length]}}},function(en,rn){en.exports={first:function(){var an=["James","John","Robert","Michael","William","David","Richard","Charles","Joseph","Thomas","Christopher","Daniel","Paul","Mark","Donald","George","Kenneth","Steven","Edward","Brian","Ronald","Anthony","Kevin","Jason","Matthew","Gary","Timothy","Jose","Larry","Jeffrey","Frank","Scott","Eric"].concat(["Mary","Patricia","Linda","Barbara","Elizabeth","Jennifer","Maria","Susan","Margaret","Dorothy","Lisa","Nancy","Karen","Betty","Helen","Sandra","Donna","Carol","Ruth","Sharon","Michelle","Laura","Sarah","Kimberly","Deborah","Jessica","Shirley","Cynthia","Angela","Melissa","Brenda","Amy","Anna"]);return this.pick(an)},last:function(){var an=["Smith","Johnson","Williams","Brown","Jones","Miller","Davis","Garcia","Rodriguez","Wilson","Martinez","Anderson","Taylor","Thomas","Hernandez","Moore","Martin","Jackson","Thompson","White","Lopez","Lee","Gonzalez","Harris","Clark","Lewis","Robinson","Walker","Perez","Hall","Young","Allen"];return this.pick(an)},name:function(an){return this.first()+" "+(an?this.first()+" ":"")+this.last()},cfirst:function(){var an="王 李 张 刘 陈 杨 赵 黄 周 吴 徐 孙 胡 朱 高 林 何 郭 马 罗 梁 宋 郑 谢 韩 唐 冯 于 董 萧 程 曹 袁 邓 许 傅 沈 曾 彭 吕 苏 卢 蒋 蔡 贾 丁 魏 薛 叶 阎 余 潘 杜 戴 夏 锺 汪 田 任 姜 范 方 石 姚 谭 廖 邹 熊 金 陆 郝 孔 白 崔 康 毛 邱 秦 江 史 顾 侯 邵 孟 龙 万 段 雷 钱 汤 尹 黎 易 常 武 乔 贺 赖 龚 文".split(" ");return this.pick(an)},clast:function(){var an="伟 芳 娜 秀英 敏 静 丽 强 磊 军 洋 勇 艳 杰 娟 涛 明 超 秀兰 霞 平 刚 桂英".split(" ");return this.pick(an)},cname:function(){return this.cfirst()+this.clast()}}},function(en,rn){en.exports={url:function(an,nn){return(an||this.protocol())+"://"+(nn||this.domain())+"/"+this.word()},protocol:function(){return this.pick("http ftp gopher mailto mid cid news nntp prospero telnet rlogin tn3270 wais".split(" "))},domain:function(an){return this.word()+"."+(an||this.tld())},tld:function(){return this.pick("com net org edu gov int mil cn com.cn net.cn gov.cn org.cn 中国 中国互联.公司 中国互联.网络 tel biz cc tv info name hk mobi asia cd travel pro museum coop aero ad ae af ag ai al am an ao aq ar as at au aw az ba bb bd be bf bg bh bi bj bm bn bo br bs bt bv bw by bz ca cc cf cg ch ci ck cl cm cn co cq cr cu cv cx cy cz de dj dk dm do dz ec ee eg eh es et ev fi fj fk fm fo fr ga gb gd ge gf gh gi gl gm gn gp gr gt gu gw gy hk hm hn hr ht hu id ie il in io iq ir is it jm jo jp ke kg kh ki km kn kp kr kw ky kz la lb lc li lk lr ls lt lu lv ly ma mc md mg mh ml mm mn mo mp mq mr ms mt mv mw mx my mz na nc ne nf ng ni nl no np nr nt nu nz om qa pa pe pf pg ph pk pl pm pn pr pt pw py re ro ru rw sa sb sc sd se sg sh si sj sk sl sm sn so sr st su sy sz tc td tf tg th tj tk tm tn to tp tr tt tv tw tz ua ug uk us uy va vc ve vg vn vu wf ws ye yu za zm zr zw".split(" "))},email:function(an){return this.character("lower")+"."+this.word()+"@"+(an||this.word()+"."+this.tld())},ip:function(){return this.natural(0,255)+"."+this.natural(0,255)+"."+this.natural(0,255)+"."+this.natural(0,255)}}},function(en,rn,an){var nn=an(18),tn=["东北","华北","华东","华中","华南","西南","西北"];en.exports={region:function(){return this.pick(tn)},province:function(){return this.pick(nn).name},city:function(un){var ln=this.pick(nn),dn=this.pick(ln.children);return un?[ln.name,dn.name].join(" "):dn.name},county:function(un){var ln=this.pick(nn),dn=this.pick(ln.children),hn=this.pick(dn.children)||{name:"-"};return un?[ln.name,dn.name,hn.name].join(" "):hn.name},zip:function(un){for(var ln="",dn=0;dn<(un||6);dn++)ln+=this.natural(0,9);return ln}}},function(en,rn){var an={11e4:"北京",110100:"北京市",110101:"东城区",110102:"西城区",110105:"朝阳区",110106:"丰台区",110107:"石景山区",110108:"海淀区",110109:"门头沟区",110111:"房山区",110112:"通州区",110113:"顺义区",110114:"昌平区",110115:"大兴区",110116:"怀柔区",110117:"平谷区",110228:"密云县",110229:"延庆县",110230:"其它区",12e4:"天津",120100:"天津市",120101:"和平区",120102:"河东区",120103:"河西区",120104:"南开区",120105:"河北区",120106:"红桥区",120110:"东丽区",120111:"西青区",120112:"津南区",120113:"北辰区",120114:"武清区",120115:"宝坻区",120116:"滨海新区",120221:"宁河县",120223:"静海县",120225:"蓟县",120226:"其它区",13e4:"河北省",130100:"石家庄市",130102:"长安区",130103:"桥东区",130104:"桥西区",130105:"新华区",130107:"井陉矿区",130108:"裕华区",130121:"井陉县",130123:"正定县",130124:"栾城县",130125:"行唐县",130126:"灵寿县",130127:"高邑县",130128:"深泽县",130129:"赞皇县",130130:"无极县",130131:"平山县",130132:"元氏县",130133:"赵县",130181:"辛集市",130182:"藁城市",130183:"晋州市",130184:"新乐市",130185:"鹿泉市",130186:"其它区",130200:"唐山市",130202:"路南区",130203:"路北区",130204:"古冶区",130205:"开平区",130207:"丰南区",130208:"丰润区",130223:"滦县",130224:"滦南县",130225:"乐亭县",130227:"迁西县",130229:"玉田县",130230:"曹妃甸区",130281:"遵化市",130283:"迁安市",130284:"其它区",130300:"秦皇岛市",130302:"海港区",130303:"山海关区",130304:"北戴河区",130321:"青龙满族自治县",130322:"昌黎县",130323:"抚宁县",130324:"卢龙县",130398:"其它区",130400:"邯郸市",130402:"邯山区",130403:"丛台区",130404:"复兴区",130406:"峰峰矿区",130421:"邯郸县",130423:"临漳县",130424:"成安县",130425:"大名县",130426:"涉县",130427:"磁县",130428:"肥乡县",130429:"永年县",130430:"邱县",130431:"鸡泽县",130432:"广平县",130433:"馆陶县",130434:"魏县",130435:"曲周县",130481:"武安市",130482:"其它区",130500:"邢台市",130502:"桥东区",130503:"桥西区",130521:"邢台县",130522:"临城县",130523:"内丘县",130524:"柏乡县",130525:"隆尧县",130526:"任县",130527:"南和县",130528:"宁晋县",130529:"巨鹿县",130530:"新河县",130531:"广宗县",130532:"平乡县",130533:"威县",130534:"清河县",130535:"临西县",130581:"南宫市",130582:"沙河市",130583:"其它区",130600:"保定市",130602:"新市区",130603:"北市区",130604:"南市区",130621:"满城县",130622:"清苑县",130623:"涞水县",130624:"阜平县",130625:"徐水县",130626:"定兴县",130627:"唐县",130628:"高阳县",130629:"容城县",130630:"涞源县",130631:"望都县",130632:"安新县",130633:"易县",130634:"曲阳县",130635:"蠡县",130636:"顺平县",130637:"博野县",130638:"雄县",130681:"涿州市",130682:"定州市",130683:"安国市",130684:"高碑店市",130699:"其它区",130700:"张家口市",130702:"桥东区",130703:"桥西区",130705:"宣化区",130706:"下花园区",130721:"宣化县",130722:"张北县",130723:"康保县",130724:"沽源县",130725:"尚义县",130726:"蔚县",130727:"阳原县",130728:"怀安县",130729:"万全县",130730:"怀来县",130731:"涿鹿县",130732:"赤城县",130733:"崇礼县",130734:"其它区",130800:"承德市",130802:"双桥区",130803:"双滦区",130804:"鹰手营子矿区",130821:"承德县",130822:"兴隆县",130823:"平泉县",130824:"滦平县",130825:"隆化县",130826:"丰宁满族自治县",130827:"宽城满族自治县",130828:"围场满族蒙古族自治县",130829:"其它区",130900:"沧州市",130902:"新华区",130903:"运河区",130921:"沧县",130922:"青县",130923:"东光县",130924:"海兴县",130925:"盐山县",130926:"肃宁县",130927:"南皮县",130928:"吴桥县",130929:"献县",130930:"孟村回族自治县",130981:"泊头市",130982:"任丘市",130983:"黄骅市",130984:"河间市",130985:"其它区",131e3:"廊坊市",131002:"安次区",131003:"广阳区",131022:"固安县",131023:"永清县",131024:"香河县",131025:"大城县",131026:"文安县",131028:"大厂回族自治县",131081:"霸州市",131082:"三河市",131083:"其它区",131100:"衡水市",131102:"桃城区",131121:"枣强县",131122:"武邑县",131123:"武强县",131124:"饶阳县",131125:"安平县",131126:"故城县",131127:"景县",131128:"阜城县",131181:"冀州市",131182:"深州市",131183:"其它区",14e4:"山西省",140100:"太原市",140105:"小店区",140106:"迎泽区",140107:"杏花岭区",140108:"尖草坪区",140109:"万柏林区",140110:"晋源区",140121:"清徐县",140122:"阳曲县",140123:"娄烦县",140181:"古交市",140182:"其它区",140200:"大同市",140202:"城区",140203:"矿区",140211:"南郊区",140212:"新荣区",140221:"阳高县",140222:"天镇县",140223:"广灵县",140224:"灵丘县",140225:"浑源县",140226:"左云县",140227:"大同县",140228:"其它区",140300:"阳泉市",140302:"城区",140303:"矿区",140311:"郊区",140321:"平定县",140322:"盂县",140323:"其它区",140400:"长治市",140421:"长治县",140423:"襄垣县",140424:"屯留县",140425:"平顺县",140426:"黎城县",140427:"壶关县",140428:"长子县",140429:"武乡县",140430:"沁县",140431:"沁源县",140481:"潞城市",140482:"城区",140483:"郊区",140485:"其它区",140500:"晋城市",140502:"城区",140521:"沁水县",140522:"阳城县",140524:"陵川县",140525:"泽州县",140581:"高平市",140582:"其它区",140600:"朔州市",140602:"朔城区",140603:"平鲁区",140621:"山阴县",140622:"应县",140623:"右玉县",140624:"怀仁县",140625:"其它区",140700:"晋中市",140702:"榆次区",140721:"榆社县",140722:"左权县",140723:"和顺县",140724:"昔阳县",140725:"寿阳县",140726:"太谷县",140727:"祁县",140728:"平遥县",140729:"灵石县",140781:"介休市",140782:"其它区",140800:"运城市",140802:"盐湖区",140821:"临猗县",140822:"万荣县",140823:"闻喜县",140824:"稷山县",140825:"新绛县",140826:"绛县",140827:"垣曲县",140828:"夏县",140829:"平陆县",140830:"芮城县",140881:"永济市",140882:"河津市",140883:"其它区",140900:"忻州市",140902:"忻府区",140921:"定襄县",140922:"五台县",140923:"代县",140924:"繁峙县",140925:"宁武县",140926:"静乐县",140927:"神池县",140928:"五寨县",140929:"岢岚县",140930:"河曲县",140931:"保德县",140932:"偏关县",140981:"原平市",140982:"其它区",141e3:"临汾市",141002:"尧都区",141021:"曲沃县",141022:"翼城县",141023:"襄汾县",141024:"洪洞县",141025:"古县",141026:"安泽县",141027:"浮山县",141028:"吉县",141029:"乡宁县",141030:"大宁县",141031:"隰县",141032:"永和县",141033:"蒲县",141034:"汾西县",141081:"侯马市",141082:"霍州市",141083:"其它区",141100:"吕梁市",141102:"离石区",141121:"文水县",141122:"交城县",141123:"兴县",141124:"临县",141125:"柳林县",141126:"石楼县",141127:"岚县",141128:"方山县",141129:"中阳县",141130:"交口县",141181:"孝义市",141182:"汾阳市",141183:"其它区",15e4:"内蒙古自治区",150100:"呼和浩特市",150102:"新城区",150103:"回民区",150104:"玉泉区",150105:"赛罕区",150121:"土默特左旗",150122:"托克托县",150123:"和林格尔县",150124:"清水河县",150125:"武川县",150126:"其它区",150200:"包头市",150202:"东河区",150203:"昆都仑区",150204:"青山区",150205:"石拐区",150206:"白云鄂博矿区",150207:"九原区",150221:"土默特右旗",150222:"固阳县",150223:"达尔罕茂明安联合旗",150224:"其它区",150300:"乌海市",150302:"海勃湾区",150303:"海南区",150304:"乌达区",150305:"其它区",150400:"赤峰市",150402:"红山区",150403:"元宝山区",150404:"松山区",150421:"阿鲁科尔沁旗",150422:"巴林左旗",150423:"巴林右旗",150424:"林西县",150425:"克什克腾旗",150426:"翁牛特旗",150428:"喀喇沁旗",150429:"宁城县",150430:"敖汉旗",150431:"其它区",150500:"通辽市",150502:"科尔沁区",150521:"科尔沁左翼中旗",150522:"科尔沁左翼后旗",150523:"开鲁县",150524:"库伦旗",150525:"奈曼旗",150526:"扎鲁特旗",150581:"霍林郭勒市",150582:"其它区",150600:"鄂尔多斯市",150602:"东胜区",150621:"达拉特旗",150622:"准格尔旗",150623:"鄂托克前旗",150624:"鄂托克旗",150625:"杭锦旗",150626:"乌审旗",150627:"伊金霍洛旗",150628:"其它区",150700:"呼伦贝尔市",150702:"海拉尔区",150703:"扎赉诺尔区",150721:"阿荣旗",150722:"莫力达瓦达斡尔族自治旗",150723:"鄂伦春自治旗",150724:"鄂温克族自治旗",150725:"陈巴尔虎旗",150726:"新巴尔虎左旗",150727:"新巴尔虎右旗",150781:"满洲里市",150782:"牙克石市",150783:"扎兰屯市",150784:"额尔古纳市",150785:"根河市",150786:"其它区",150800:"巴彦淖尔市",150802:"临河区",150821:"五原县",150822:"磴口县",150823:"乌拉特前旗",150824:"乌拉特中旗",150825:"乌拉特后旗",150826:"杭锦后旗",150827:"其它区",150900:"乌兰察布市",150902:"集宁区",150921:"卓资县",150922:"化德县",150923:"商都县",150924:"兴和县",150925:"凉城县",150926:"察哈尔右翼前旗",150927:"察哈尔右翼中旗",150928:"察哈尔右翼后旗",150929:"四子王旗",150981:"丰镇市",150982:"其它区",152200:"兴安盟",152201:"乌兰浩特市",152202:"阿尔山市",152221:"科尔沁右翼前旗",152222:"科尔沁右翼中旗",152223:"扎赉特旗",152224:"突泉县",152225:"其它区",152500:"锡林郭勒盟",152501:"二连浩特市",152502:"锡林浩特市",152522:"阿巴嘎旗",152523:"苏尼特左旗",152524:"苏尼特右旗",152525:"东乌珠穆沁旗",152526:"西乌珠穆沁旗",152527:"太仆寺旗",152528:"镶黄旗",152529:"正镶白旗",152530:"正蓝旗",152531:"多伦县",152532:"其它区",152900:"阿拉善盟",152921:"阿拉善左旗",152922:"阿拉善右旗",152923:"额济纳旗",152924:"其它区",21e4:"辽宁省",210100:"沈阳市",210102:"和平区",210103:"沈河区",210104:"大东区",210105:"皇姑区",210106:"铁西区",210111:"苏家屯区",210112:"东陵区",210113:"新城子区",210114:"于洪区",210122:"辽中县",210123:"康平县",210124:"法库县",210181:"新民市",210184:"沈北新区",210185:"其它区",210200:"大连市",210202:"中山区",210203:"西岗区",210204:"沙河口区",210211:"甘井子区",210212:"旅顺口区",210213:"金州区",210224:"长海县",210281:"瓦房店市",210282:"普兰店市",210283:"庄河市",210298:"其它区",210300:"鞍山市",210302:"铁东区",210303:"铁西区",210304:"立山区",210311:"千山区",210321:"台安县",210323:"岫岩满族自治县",210381:"海城市",210382:"其它区",210400:"抚顺市",210402:"新抚区",210403:"东洲区",210404:"望花区",210411:"顺城区",210421:"抚顺县",210422:"新宾满族自治县",210423:"清原满族自治县",210424:"其它区",210500:"本溪市",210502:"平山区",210503:"溪湖区",210504:"明山区",210505:"南芬区",210521:"本溪满族自治县",210522:"桓仁满族自治县",210523:"其它区",210600:"丹东市",210602:"元宝区",210603:"振兴区",210604:"振安区",210624:"宽甸满族自治县",210681:"东港市",210682:"凤城市",210683:"其它区",210700:"锦州市",210702:"古塔区",210703:"凌河区",210711:"太和区",210726:"黑山县",210727:"义县",210781:"凌海市",210782:"北镇市",210783:"其它区",210800:"营口市",210802:"站前区",210803:"西市区",210804:"鲅鱼圈区",210811:"老边区",210881:"盖州市",210882:"大石桥市",210883:"其它区",210900:"阜新市",210902:"海州区",210903:"新邱区",210904:"太平区",210905:"清河门区",210911:"细河区",210921:"阜新蒙古族自治县",210922:"彰武县",210923:"其它区",211e3:"辽阳市",211002:"白塔区",211003:"文圣区",211004:"宏伟区",211005:"弓长岭区",211011:"太子河区",211021:"辽阳县",211081:"灯塔市",211082:"其它区",211100:"盘锦市",211102:"双台子区",211103:"兴隆台区",211121:"大洼县",211122:"盘山县",211123:"其它区",211200:"铁岭市",211202:"银州区",211204:"清河区",211221:"铁岭县",211223:"西丰县",211224:"昌图县",211281:"调兵山市",211282:"开原市",211283:"其它区",211300:"朝阳市",211302:"双塔区",211303:"龙城区",211321:"朝阳县",211322:"建平县",211324:"喀喇沁左翼蒙古族自治县",211381:"北票市",211382:"凌源市",211383:"其它区",211400:"葫芦岛市",211402:"连山区",211403:"龙港区",211404:"南票区",211421:"绥中县",211422:"建昌县",211481:"兴城市",211482:"其它区",22e4:"吉林省",220100:"长春市",220102:"南关区",220103:"宽城区",220104:"朝阳区",220105:"二道区",220106:"绿园区",220112:"双阳区",220122:"农安县",220181:"九台市",220182:"榆树市",220183:"德惠市",220188:"其它区",220200:"吉林市",220202:"昌邑区",220203:"龙潭区",220204:"船营区",220211:"丰满区",220221:"永吉县",220281:"蛟河市",220282:"桦甸市",220283:"舒兰市",220284:"磐石市",220285:"其它区",220300:"四平市",220302:"铁西区",220303:"铁东区",220322:"梨树县",220323:"伊通满族自治县",220381:"公主岭市",220382:"双辽市",220383:"其它区",220400:"辽源市",220402:"龙山区",220403:"西安区",220421:"东丰县",220422:"东辽县",220423:"其它区",220500:"通化市",220502:"东昌区",220503:"二道江区",220521:"通化县",220523:"辉南县",220524:"柳河县",220581:"梅河口市",220582:"集安市",220583:"其它区",220600:"白山市",220602:"浑江区",220621:"抚松县",220622:"靖宇县",220623:"长白朝鲜族自治县",220625:"江源区",220681:"临江市",220682:"其它区",220700:"松原市",220702:"宁江区",220721:"前郭尔罗斯蒙古族自治县",220722:"长岭县",220723:"乾安县",220724:"扶余市",220725:"其它区",220800:"白城市",220802:"洮北区",220821:"镇赉县",220822:"通榆县",220881:"洮南市",220882:"大安市",220883:"其它区",222400:"延边朝鲜族自治州",222401:"延吉市",222402:"图们市",222403:"敦化市",222404:"珲春市",222405:"龙井市",222406:"和龙市",222424:"汪清县",222426:"安图县",222427:"其它区",23e4:"黑龙江省",230100:"哈尔滨市",230102:"道里区",230103:"南岗区",230104:"道外区",230106:"香坊区",230108:"平房区",230109:"松北区",230111:"呼兰区",230123:"依兰县",230124:"方正县",230125:"宾县",230126:"巴彦县",230127:"木兰县",230128:"通河县",230129:"延寿县",230181:"阿城区",230182:"双城市",230183:"尚志市",230184:"五常市",230186:"其它区",230200:"齐齐哈尔市",230202:"龙沙区",230203:"建华区",230204:"铁锋区",230205:"昂昂溪区",230206:"富拉尔基区",230207:"碾子山区",230208:"梅里斯达斡尔族区",230221:"龙江县",230223:"依安县",230224:"泰来县",230225:"甘南县",230227:"富裕县",230229:"克山县",230230:"克东县",230231:"拜泉县",230281:"讷河市",230282:"其它区",230300:"鸡西市",230302:"鸡冠区",230303:"恒山区",230304:"滴道区",230305:"梨树区",230306:"城子河区",230307:"麻山区",230321:"鸡东县",230381:"虎林市",230382:"密山市",230383:"其它区",230400:"鹤岗市",230402:"向阳区",230403:"工农区",230404:"南山区",230405:"兴安区",230406:"东山区",230407:"兴山区",230421:"萝北县",230422:"绥滨县",230423:"其它区",230500:"双鸭山市",230502:"尖山区",230503:"岭东区",230505:"四方台区",230506:"宝山区",230521:"集贤县",230522:"友谊县",230523:"宝清县",230524:"饶河县",230525:"其它区",230600:"大庆市",230602:"萨尔图区",230603:"龙凤区",230604:"让胡路区",230605:"红岗区",230606:"大同区",230621:"肇州县",230622:"肇源县",230623:"林甸县",230624:"杜尔伯特蒙古族自治县",230625:"其它区",230700:"伊春市",230702:"伊春区",230703:"南岔区",230704:"友好区",230705:"西林区",230706:"翠峦区",230707:"新青区",230708:"美溪区",230709:"金山屯区",230710:"五营区",230711:"乌马河区",230712:"汤旺河区",230713:"带岭区",230714:"乌伊岭区",230715:"红星区",230716:"上甘岭区",230722:"嘉荫县",230781:"铁力市",230782:"其它区",230800:"佳木斯市",230803:"向阳区",230804:"前进区",230805:"东风区",230811:"郊区",230822:"桦南县",230826:"桦川县",230828:"汤原县",230833:"抚远县",230881:"同江市",230882:"富锦市",230883:"其它区",230900:"七台河市",230902:"新兴区",230903:"桃山区",230904:"茄子河区",230921:"勃利县",230922:"其它区",231e3:"牡丹江市",231002:"东安区",231003:"阳明区",231004:"爱民区",231005:"西安区",231024:"东宁县",231025:"林口县",231081:"绥芬河市",231083:"海林市",231084:"宁安市",231085:"穆棱市",231086:"其它区",231100:"黑河市",231102:"爱辉区",231121:"嫩江县",231123:"逊克县",231124:"孙吴县",231181:"北安市",231182:"五大连池市",231183:"其它区",231200:"绥化市",231202:"北林区",231221:"望奎县",231222:"兰西县",231223:"青冈县",231224:"庆安县",231225:"明水县",231226:"绥棱县",231281:"安达市",231282:"肇东市",231283:"海伦市",231284:"其它区",232700:"大兴安岭地区",232702:"松岭区",232703:"新林区",232704:"呼中区",232721:"呼玛县",232722:"塔河县",232723:"漠河县",232724:"加格达奇区",232725:"其它区",31e4:"上海",310100:"上海市",310101:"黄浦区",310104:"徐汇区",310105:"长宁区",310106:"静安区",310107:"普陀区",310108:"闸北区",310109:"虹口区",310110:"杨浦区",310112:"闵行区",310113:"宝山区",310114:"嘉定区",310115:"浦东新区",310116:"金山区",310117:"松江区",310118:"青浦区",310120:"奉贤区",310230:"崇明县",310231:"其它区",32e4:"江苏省",320100:"南京市",320102:"玄武区",320104:"秦淮区",320105:"建邺区",320106:"鼓楼区",320111:"浦口区",320113:"栖霞区",320114:"雨花台区",320115:"江宁区",320116:"六合区",320124:"溧水区",320125:"高淳区",320126:"其它区",320200:"无锡市",320202:"崇安区",320203:"南长区",320204:"北塘区",320205:"锡山区",320206:"惠山区",320211:"滨湖区",320281:"江阴市",320282:"宜兴市",320297:"其它区",320300:"徐州市",320302:"鼓楼区",320303:"云龙区",320305:"贾汪区",320311:"泉山区",320321:"丰县",320322:"沛县",320323:"铜山区",320324:"睢宁县",320381:"新沂市",320382:"邳州市",320383:"其它区",320400:"常州市",320402:"天宁区",320404:"钟楼区",320405:"戚墅堰区",320411:"新北区",320412:"武进区",320481:"溧阳市",320482:"金坛市",320483:"其它区",320500:"苏州市",320505:"虎丘区",320506:"吴中区",320507:"相城区",320508:"姑苏区",320581:"常熟市",320582:"张家港市",320583:"昆山市",320584:"吴江区",320585:"太仓市",320596:"其它区",320600:"南通市",320602:"崇川区",320611:"港闸区",320612:"通州区",320621:"海安县",320623:"如东县",320681:"启东市",320682:"如皋市",320684:"海门市",320694:"其它区",320700:"连云港市",320703:"连云区",320705:"新浦区",320706:"海州区",320721:"赣榆县",320722:"东海县",320723:"灌云县",320724:"灌南县",320725:"其它区",320800:"淮安市",320802:"清河区",320803:"淮安区",320804:"淮阴区",320811:"清浦区",320826:"涟水县",320829:"洪泽县",320830:"盱眙县",320831:"金湖县",320832:"其它区",320900:"盐城市",320902:"亭湖区",320903:"盐都区",320921:"响水县",320922:"滨海县",320923:"阜宁县",320924:"射阳县",320925:"建湖县",320981:"东台市",320982:"大丰市",320983:"其它区",321e3:"扬州市",321002:"广陵区",321003:"邗江区",321023:"宝应县",321081:"仪征市",321084:"高邮市",321088:"江都区",321093:"其它区",321100:"镇江市",321102:"京口区",321111:"润州区",321112:"丹徒区",321181:"丹阳市",321182:"扬中市",321183:"句容市",321184:"其它区",321200:"泰州市",321202:"海陵区",321203:"高港区",321281:"兴化市",321282:"靖江市",321283:"泰兴市",321284:"姜堰区",321285:"其它区",321300:"宿迁市",321302:"宿城区",321311:"宿豫区",321322:"沭阳县",321323:"泗阳县",321324:"泗洪县",321325:"其它区",33e4:"浙江省",330100:"杭州市",330102:"上城区",330103:"下城区",330104:"江干区",330105:"拱墅区",330106:"西湖区",330108:"滨江区",330109:"萧山区",330110:"余杭区",330122:"桐庐县",330127:"淳安县",330182:"建德市",330183:"富阳市",330185:"临安市",330186:"其它区",330200:"宁波市",330203:"海曙区",330204:"江东区",330205:"江北区",330206:"北仑区",330211:"镇海区",330212:"鄞州区",330225:"象山县",330226:"宁海县",330281:"余姚市",330282:"慈溪市",330283:"奉化市",330284:"其它区",330300:"温州市",330302:"鹿城区",330303:"龙湾区",330304:"瓯海区",330322:"洞头县",330324:"永嘉县",330326:"平阳县",330327:"苍南县",330328:"文成县",330329:"泰顺县",330381:"瑞安市",330382:"乐清市",330383:"其它区",330400:"嘉兴市",330402:"南湖区",330411:"秀洲区",330421:"嘉善县",330424:"海盐县",330481:"海宁市",330482:"平湖市",330483:"桐乡市",330484:"其它区",330500:"湖州市",330502:"吴兴区",330503:"南浔区",330521:"德清县",330522:"长兴县",330523:"安吉县",330524:"其它区",330600:"绍兴市",330602:"越城区",330621:"绍兴县",330624:"新昌县",330681:"诸暨市",330682:"上虞市",330683:"嵊州市",330684:"其它区",330700:"金华市",330702:"婺城区",330703:"金东区",330723:"武义县",330726:"浦江县",330727:"磐安县",330781:"兰溪市",330782:"义乌市",330783:"东阳市",330784:"永康市",330785:"其它区",330800:"衢州市",330802:"柯城区",330803:"衢江区",330822:"常山县",330824:"开化县",330825:"龙游县",330881:"江山市",330882:"其它区",330900:"舟山市",330902:"定海区",330903:"普陀区",330921:"岱山县",330922:"嵊泗县",330923:"其它区",331e3:"台州市",331002:"椒江区",331003:"黄岩区",331004:"路桥区",331021:"玉环县",331022:"三门县",331023:"天台县",331024:"仙居县",331081:"温岭市",331082:"临海市",331083:"其它区",331100:"丽水市",331102:"莲都区",331121:"青田县",331122:"缙云县",331123:"遂昌县",331124:"松阳县",331125:"云和县",331126:"庆元县",331127:"景宁畲族自治县",331181:"龙泉市",331182:"其它区",34e4:"安徽省",340100:"合肥市",340102:"瑶海区",340103:"庐阳区",340104:"蜀山区",340111:"包河区",340121:"长丰县",340122:"肥东县",340123:"肥西县",340192:"其它区",340200:"芜湖市",340202:"镜湖区",340203:"弋江区",340207:"鸠江区",340208:"三山区",340221:"芜湖县",340222:"繁昌县",340223:"南陵县",340224:"其它区",340300:"蚌埠市",340302:"龙子湖区",340303:"蚌山区",340304:"禹会区",340311:"淮上区",340321:"怀远县",340322:"五河县",340323:"固镇县",340324:"其它区",340400:"淮南市",340402:"大通区",340403:"田家庵区",340404:"谢家集区",340405:"八公山区",340406:"潘集区",340421:"凤台县",340422:"其它区",340500:"马鞍山市",340503:"花山区",340504:"雨山区",340506:"博望区",340521:"当涂县",340522:"其它区",340600:"淮北市",340602:"杜集区",340603:"相山区",340604:"烈山区",340621:"濉溪县",340622:"其它区",340700:"铜陵市",340702:"铜官山区",340703:"狮子山区",340711:"郊区",340721:"铜陵县",340722:"其它区",340800:"安庆市",340802:"迎江区",340803:"大观区",340811:"宜秀区",340822:"怀宁县",340823:"枞阳县",340824:"潜山县",340825:"太湖县",340826:"宿松县",340827:"望江县",340828:"岳西县",340881:"桐城市",340882:"其它区",341e3:"黄山市",341002:"屯溪区",341003:"黄山区",341004:"徽州区",341021:"歙县",341022:"休宁县",341023:"黟县",341024:"祁门县",341025:"其它区",341100:"滁州市",341102:"琅琊区",341103:"南谯区",341122:"来安县",341124:"全椒县",341125:"定远县",341126:"凤阳县",341181:"天长市",341182:"明光市",341183:"其它区",341200:"阜阳市",341202:"颍州区",341203:"颍东区",341204:"颍泉区",341221:"临泉县",341222:"太和县",341225:"阜南县",341226:"颍上县",341282:"界首市",341283:"其它区",341300:"宿州市",341302:"埇桥区",341321:"砀山县",341322:"萧县",341323:"灵璧县",341324:"泗县",341325:"其它区",341400:"巢湖市",341421:"庐江县",341422:"无为县",341423:"含山县",341424:"和县",341500:"六安市",341502:"金安区",341503:"裕安区",341521:"寿县",341522:"霍邱县",341523:"舒城县",341524:"金寨县",341525:"霍山县",341526:"其它区",341600:"亳州市",341602:"谯城区",341621:"涡阳县",341622:"蒙城县",341623:"利辛县",341624:"其它区",341700:"池州市",341702:"贵池区",341721:"东至县",341722:"石台县",341723:"青阳县",341724:"其它区",341800:"宣城市",341802:"宣州区",341821:"郎溪县",341822:"广德县",341823:"泾县",341824:"绩溪县",341825:"旌德县",341881:"宁国市",341882:"其它区",35e4:"福建省",350100:"福州市",350102:"鼓楼区",350103:"台江区",350104:"仓山区",350105:"马尾区",350111:"晋安区",350121:"闽侯县",350122:"连江县",350123:"罗源县",350124:"闽清县",350125:"永泰县",350128:"平潭县",350181:"福清市",350182:"长乐市",350183:"其它区",350200:"厦门市",350203:"思明区",350205:"海沧区",350206:"湖里区",350211:"集美区",350212:"同安区",350213:"翔安区",350214:"其它区",350300:"莆田市",350302:"城厢区",350303:"涵江区",350304:"荔城区",350305:"秀屿区",350322:"仙游县",350323:"其它区",350400:"三明市",350402:"梅列区",350403:"三元区",350421:"明溪县",350423:"清流县",350424:"宁化县",350425:"大田县",350426:"尤溪县",350427:"沙县",350428:"将乐县",350429:"泰宁县",350430:"建宁县",350481:"永安市",350482:"其它区",350500:"泉州市",350502:"鲤城区",350503:"丰泽区",350504:"洛江区",350505:"泉港区",350521:"惠安县",350524:"安溪县",350525:"永春县",350526:"德化县",350527:"金门县",350581:"石狮市",350582:"晋江市",350583:"南安市",350584:"其它区",350600:"漳州市",350602:"芗城区",350603:"龙文区",350622:"云霄县",350623:"漳浦县",350624:"诏安县",350625:"长泰县",350626:"东山县",350627:"南靖县",350628:"平和县",350629:"华安县",350681:"龙海市",350682:"其它区",350700:"南平市",350702:"延平区",350721:"顺昌县",350722:"浦城县",350723:"光泽县",350724:"松溪县",350725:"政和县",350781:"邵武市",350782:"武夷山市",350783:"建瓯市",350784:"建阳市",350785:"其它区",350800:"龙岩市",350802:"新罗区",350821:"长汀县",350822:"永定县",350823:"上杭县",350824:"武平县",350825:"连城县",350881:"漳平市",350882:"其它区",350900:"宁德市",350902:"蕉城区",350921:"霞浦县",350922:"古田县",350923:"屏南县",350924:"寿宁县",350925:"周宁县",350926:"柘荣县",350981:"福安市",350982:"福鼎市",350983:"其它区",36e4:"江西省",360100:"南昌市",360102:"东湖区",360103:"西湖区",360104:"青云谱区",360105:"湾里区",360111:"青山湖区",360121:"南昌县",360122:"新建县",360123:"安义县",360124:"进贤县",360128:"其它区",360200:"景德镇市",360202:"昌江区",360203:"珠山区",360222:"浮梁县",360281:"乐平市",360282:"其它区",360300:"萍乡市",360302:"安源区",360313:"湘东区",360321:"莲花县",360322:"上栗县",360323:"芦溪县",360324:"其它区",360400:"九江市",360402:"庐山区",360403:"浔阳区",360421:"九江县",360423:"武宁县",360424:"修水县",360425:"永修县",360426:"德安县",360427:"星子县",360428:"都昌县",360429:"湖口县",360430:"彭泽县",360481:"瑞昌市",360482:"其它区",360483:"共青城市",360500:"新余市",360502:"渝水区",360521:"分宜县",360522:"其它区",360600:"鹰潭市",360602:"月湖区",360622:"余江县",360681:"贵溪市",360682:"其它区",360700:"赣州市",360702:"章贡区",360721:"赣县",360722:"信丰县",360723:"大余县",360724:"上犹县",360725:"崇义县",360726:"安远县",360727:"龙南县",360728:"定南县",360729:"全南县",360730:"宁都县",360731:"于都县",360732:"兴国县",360733:"会昌县",360734:"寻乌县",360735:"石城县",360781:"瑞金市",360782:"南康市",360783:"其它区",360800:"吉安市",360802:"吉州区",360803:"青原区",360821:"吉安县",360822:"吉水县",360823:"峡江县",360824:"新干县",360825:"永丰县",360826:"泰和县",360827:"遂川县",360828:"万安县",360829:"安福县",360830:"永新县",360881:"井冈山市",360882:"其它区",360900:"宜春市",360902:"袁州区",360921:"奉新县",360922:"万载县",360923:"上高县",360924:"宜丰县",360925:"靖安县",360926:"铜鼓县",360981:"丰城市",360982:"樟树市",360983:"高安市",360984:"其它区",361e3:"抚州市",361002:"临川区",361021:"南城县",361022:"黎川县",361023:"南丰县",361024:"崇仁县",361025:"乐安县",361026:"宜黄县",361027:"金溪县",361028:"资溪县",361029:"东乡县",361030:"广昌县",361031:"其它区",361100:"上饶市",361102:"信州区",361121:"上饶县",361122:"广丰县",361123:"玉山县",361124:"铅山县",361125:"横峰县",361126:"弋阳县",361127:"余干县",361128:"鄱阳县",361129:"万年县",361130:"婺源县",361181:"德兴市",361182:"其它区",37e4:"山东省",370100:"济南市",370102:"历下区",370103:"市中区",370104:"槐荫区",370105:"天桥区",370112:"历城区",370113:"长清区",370124:"平阴县",370125:"济阳县",370126:"商河县",370181:"章丘市",370182:"其它区",370200:"青岛市",370202:"市南区",370203:"市北区",370211:"黄岛区",370212:"崂山区",370213:"李沧区",370214:"城阳区",370281:"胶州市",370282:"即墨市",370283:"平度市",370285:"莱西市",370286:"其它区",370300:"淄博市",370302:"淄川区",370303:"张店区",370304:"博山区",370305:"临淄区",370306:"周村区",370321:"桓台县",370322:"高青县",370323:"沂源县",370324:"其它区",370400:"枣庄市",370402:"市中区",370403:"薛城区",370404:"峄城区",370405:"台儿庄区",370406:"山亭区",370481:"滕州市",370482:"其它区",370500:"东营市",370502:"东营区",370503:"河口区",370521:"垦利县",370522:"利津县",370523:"广饶县",370591:"其它区",370600:"烟台市",370602:"芝罘区",370611:"福山区",370612:"牟平区",370613:"莱山区",370634:"长岛县",370681:"龙口市",370682:"莱阳市",370683:"莱州市",370684:"蓬莱市",370685:"招远市",370686:"栖霞市",370687:"海阳市",370688:"其它区",370700:"潍坊市",370702:"潍城区",370703:"寒亭区",370704:"坊子区",370705:"奎文区",370724:"临朐县",370725:"昌乐县",370781:"青州市",370782:"诸城市",370783:"寿光市",370784:"安丘市",370785:"高密市",370786:"昌邑市",370787:"其它区",370800:"济宁市",370802:"市中区",370811:"任城区",370826:"微山县",370827:"鱼台县",370828:"金乡县",370829:"嘉祥县",370830:"汶上县",370831:"泗水县",370832:"梁山县",370881:"曲阜市",370882:"兖州市",370883:"邹城市",370884:"其它区",370900:"泰安市",370902:"泰山区",370903:"岱岳区",370921:"宁阳县",370923:"东平县",370982:"新泰市",370983:"肥城市",370984:"其它区",371e3:"威海市",371002:"环翠区",371081:"文登市",371082:"荣成市",371083:"乳山市",371084:"其它区",371100:"日照市",371102:"东港区",371103:"岚山区",371121:"五莲县",371122:"莒县",371123:"其它区",371200:"莱芜市",371202:"莱城区",371203:"钢城区",371204:"其它区",371300:"临沂市",371302:"兰山区",371311:"罗庄区",371312:"河东区",371321:"沂南县",371322:"郯城县",371323:"沂水县",371324:"苍山县",371325:"费县",371326:"平邑县",371327:"莒南县",371328:"蒙阴县",371329:"临沭县",371330:"其它区",371400:"德州市",371402:"德城区",371421:"陵县",371422:"宁津县",371423:"庆云县",371424:"临邑县",371425:"齐河县",371426:"平原县",371427:"夏津县",371428:"武城县",371481:"乐陵市",371482:"禹城市",371483:"其它区",371500:"聊城市",371502:"东昌府区",371521:"阳谷县",371522:"莘县",371523:"茌平县",371524:"东阿县",371525:"冠县",371526:"高唐县",371581:"临清市",371582:"其它区",371600:"滨州市",371602:"滨城区",371621:"惠民县",371622:"阳信县",371623:"无棣县",371624:"沾化县",371625:"博兴县",371626:"邹平县",371627:"其它区",371700:"菏泽市",371702:"牡丹区",371721:"曹县",371722:"单县",371723:"成武县",371724:"巨野县",371725:"郓城县",371726:"鄄城县",371727:"定陶县",371728:"东明县",371729:"其它区",41e4:"河南省",410100:"郑州市",410102:"中原区",410103:"二七区",410104:"管城回族区",410105:"金水区",410106:"上街区",410108:"惠济区",410122:"中牟县",410181:"巩义市",410182:"荥阳市",410183:"新密市",410184:"新郑市",410185:"登封市",410188:"其它区",410200:"开封市",410202:"龙亭区",410203:"顺河回族区",410204:"鼓楼区",410205:"禹王台区",410211:"金明区",410221:"杞县",410222:"通许县",410223:"尉氏县",410224:"开封县",410225:"兰考县",410226:"其它区",410300:"洛阳市",410302:"老城区",410303:"西工区",410304:"瀍河回族区",410305:"涧西区",410306:"吉利区",410307:"洛龙区",410322:"孟津县",410323:"新安县",410324:"栾川县",410325:"嵩县",410326:"汝阳县",410327:"宜阳县",410328:"洛宁县",410329:"伊川县",410381:"偃师市",410400:"平顶山市",410402:"新华区",410403:"卫东区",410404:"石龙区",410411:"湛河区",410421:"宝丰县",410422:"叶县",410423:"鲁山县",410425:"郏县",410481:"舞钢市",410482:"汝州市",410483:"其它区",410500:"安阳市",410502:"文峰区",410503:"北关区",410505:"殷都区",410506:"龙安区",410522:"安阳县",410523:"汤阴县",410526:"滑县",410527:"内黄县",410581:"林州市",410582:"其它区",410600:"鹤壁市",410602:"鹤山区",410603:"山城区",410611:"淇滨区",410621:"浚县",410622:"淇县",410623:"其它区",410700:"新乡市",410702:"红旗区",410703:"卫滨区",410704:"凤泉区",410711:"牧野区",410721:"新乡县",410724:"获嘉县",410725:"原阳县",410726:"延津县",410727:"封丘县",410728:"长垣县",410781:"卫辉市",410782:"辉县市",410783:"其它区",410800:"焦作市",410802:"解放区",410803:"中站区",410804:"马村区",410811:"山阳区",410821:"修武县",410822:"博爱县",410823:"武陟县",410825:"温县",410881:"济源市",410882:"沁阳市",410883:"孟州市",410884:"其它区",410900:"濮阳市",410902:"华龙区",410922:"清丰县",410923:"南乐县",410926:"范县",410927:"台前县",410928:"濮阳县",410929:"其它区",411e3:"许昌市",411002:"魏都区",411023:"许昌县",411024:"鄢陵县",411025:"襄城县",411081:"禹州市",411082:"长葛市",411083:"其它区",411100:"漯河市",411102:"源汇区",411103:"郾城区",411104:"召陵区",411121:"舞阳县",411122:"临颍县",411123:"其它区",411200:"三门峡市",411202:"湖滨区",411221:"渑池县",411222:"陕县",411224:"卢氏县",411281:"义马市",411282:"灵宝市",411283:"其它区",411300:"南阳市",411302:"宛城区",411303:"卧龙区",411321:"南召县",411322:"方城县",411323:"西峡县",411324:"镇平县",411325:"内乡县",411326:"淅川县",411327:"社旗县",411328:"唐河县",411329:"新野县",411330:"桐柏县",411381:"邓州市",411382:"其它区",411400:"商丘市",411402:"梁园区",411403:"睢阳区",411421:"民权县",411422:"睢县",411423:"宁陵县",411424:"柘城县",411425:"虞城县",411426:"夏邑县",411481:"永城市",411482:"其它区",411500:"信阳市",411502:"浉河区",411503:"平桥区",411521:"罗山县",411522:"光山县",411523:"新县",411524:"商城县",411525:"固始县",411526:"潢川县",411527:"淮滨县",411528:"息县",411529:"其它区",411600:"周口市",411602:"川汇区",411621:"扶沟县",411622:"西华县",411623:"商水县",411624:"沈丘县",411625:"郸城县",411626:"淮阳县",411627:"太康县",411628:"鹿邑县",411681:"项城市",411682:"其它区",411700:"驻马店市",411702:"驿城区",411721:"西平县",411722:"上蔡县",411723:"平舆县",411724:"正阳县",411725:"确山县",411726:"泌阳县",411727:"汝南县",411728:"遂平县",411729:"新蔡县",411730:"其它区",42e4:"湖北省",420100:"武汉市",420102:"江岸区",420103:"江汉区",420104:"硚口区",420105:"汉阳区",420106:"武昌区",420107:"青山区",420111:"洪山区",420112:"东西湖区",420113:"汉南区",420114:"蔡甸区",420115:"江夏区",420116:"黄陂区",420117:"新洲区",420118:"其它区",420200:"黄石市",420202:"黄石港区",420203:"西塞山区",420204:"下陆区",420205:"铁山区",420222:"阳新县",420281:"大冶市",420282:"其它区",420300:"十堰市",420302:"茅箭区",420303:"张湾区",420321:"郧县",420322:"郧西县",420323:"竹山县",420324:"竹溪县",420325:"房县",420381:"丹江口市",420383:"其它区",420500:"宜昌市",420502:"西陵区",420503:"伍家岗区",420504:"点军区",420505:"猇亭区",420506:"夷陵区",420525:"远安县",420526:"兴山县",420527:"秭归县",420528:"长阳土家族自治县",420529:"五峰土家族自治县",420581:"宜都市",420582:"当阳市",420583:"枝江市",420584:"其它区",420600:"襄阳市",420602:"襄城区",420606:"樊城区",420607:"襄州区",420624:"南漳县",420625:"谷城县",420626:"保康县",420682:"老河口市",420683:"枣阳市",420684:"宜城市",420685:"其它区",420700:"鄂州市",420702:"梁子湖区",420703:"华容区",420704:"鄂城区",420705:"其它区",420800:"荆门市",420802:"东宝区",420804:"掇刀区",420821:"京山县",420822:"沙洋县",420881:"钟祥市",420882:"其它区",420900:"孝感市",420902:"孝南区",420921:"孝昌县",420922:"大悟县",420923:"云梦县",420981:"应城市",420982:"安陆市",420984:"汉川市",420985:"其它区",421e3:"荆州市",421002:"沙市区",421003:"荆州区",421022:"公安县",421023:"监利县",421024:"江陵县",421081:"石首市",421083:"洪湖市",421087:"松滋市",421088:"其它区",421100:"黄冈市",421102:"黄州区",421121:"团风县",421122:"红安县",421123:"罗田县",421124:"英山县",421125:"浠水县",421126:"蕲春县",421127:"黄梅县",421181:"麻城市",421182:"武穴市",421183:"其它区",421200:"咸宁市",421202:"咸安区",421221:"嘉鱼县",421222:"通城县",421223:"崇阳县",421224:"通山县",421281:"赤壁市",421283:"其它区",421300:"随州市",421302:"曾都区",421321:"随县",421381:"广水市",421382:"其它区",422800:"恩施土家族苗族自治州",422801:"恩施市",422802:"利川市",422822:"建始县",422823:"巴东县",422825:"宣恩县",422826:"咸丰县",422827:"来凤县",422828:"鹤峰县",422829:"其它区",429004:"仙桃市",429005:"潜江市",429006:"天门市",429021:"神农架林区",43e4:"湖南省",430100:"长沙市",430102:"芙蓉区",430103:"天心区",430104:"岳麓区",430105:"开福区",430111:"雨花区",430121:"长沙县",430122:"望城区",430124:"宁乡县",430181:"浏阳市",430182:"其它区",430200:"株洲市",430202:"荷塘区",430203:"芦淞区",430204:"石峰区",430211:"天元区",430221:"株洲县",430223:"攸县",430224:"茶陵县",430225:"炎陵县",430281:"醴陵市",430282:"其它区",430300:"湘潭市",430302:"雨湖区",430304:"岳塘区",430321:"湘潭县",430381:"湘乡市",430382:"韶山市",430383:"其它区",430400:"衡阳市",430405:"珠晖区",430406:"雁峰区",430407:"石鼓区",430408:"蒸湘区",430412:"南岳区",430421:"衡阳县",430422:"衡南县",430423:"衡山县",430424:"衡东县",430426:"祁东县",430481:"耒阳市",430482:"常宁市",430483:"其它区",430500:"邵阳市",430502:"双清区",430503:"大祥区",430511:"北塔区",430521:"邵东县",430522:"新邵县",430523:"邵阳县",430524:"隆回县",430525:"洞口县",430527:"绥宁县",430528:"新宁县",430529:"城步苗族自治县",430581:"武冈市",430582:"其它区",430600:"岳阳市",430602:"岳阳楼区",430603:"云溪区",430611:"君山区",430621:"岳阳县",430623:"华容县",430624:"湘阴县",430626:"平江县",430681:"汨罗市",430682:"临湘市",430683:"其它区",430700:"常德市",430702:"武陵区",430703:"鼎城区",430721:"安乡县",430722:"汉寿县",430723:"澧县",430724:"临澧县",430725:"桃源县",430726:"石门县",430781:"津市市",430782:"其它区",430800:"张家界市",430802:"永定区",430811:"武陵源区",430821:"慈利县",430822:"桑植县",430823:"其它区",430900:"益阳市",430902:"资阳区",430903:"赫山区",430921:"南县",430922:"桃江县",430923:"安化县",430981:"沅江市",430982:"其它区",431e3:"郴州市",431002:"北湖区",431003:"苏仙区",431021:"桂阳县",431022:"宜章县",431023:"永兴县",431024:"嘉禾县",431025:"临武县",431026:"汝城县",431027:"桂东县",431028:"安仁县",431081:"资兴市",431082:"其它区",431100:"永州市",431102:"零陵区",431103:"冷水滩区",431121:"祁阳县",431122:"东安县",431123:"双牌县",431124:"道县",431125:"江永县",431126:"宁远县",431127:"蓝山县",431128:"新田县",431129:"江华瑶族自治县",431130:"其它区",431200:"怀化市",431202:"鹤城区",431221:"中方县",431222:"沅陵县",431223:"辰溪县",431224:"溆浦县",431225:"会同县",431226:"麻阳苗族自治县",431227:"新晃侗族自治县",431228:"芷江侗族自治县",431229:"靖州苗族侗族自治县",431230:"通道侗族自治县",431281:"洪江市",431282:"其它区",431300:"娄底市",431302:"娄星区",431321:"双峰县",431322:"新化县",431381:"冷水江市",431382:"涟源市",431383:"其它区",433100:"湘西土家族苗族自治州",433101:"吉首市",433122:"泸溪县",433123:"凤凰县",433124:"花垣县",433125:"保靖县",433126:"古丈县",433127:"永顺县",433130:"龙山县",433131:"其它区",44e4:"广东省",440100:"广州市",440103:"荔湾区",440104:"越秀区",440105:"海珠区",440106:"天河区",440111:"白云区",440112:"黄埔区",440113:"番禺区",440114:"花都区",440115:"南沙区",440116:"萝岗区",440183:"增城市",440184:"从化市",440189:"其它区",440200:"韶关市",440203:"武江区",440204:"浈江区",440205:"曲江区",440222:"始兴县",440224:"仁化县",440229:"翁源县",440232:"乳源瑶族自治县",440233:"新丰县",440281:"乐昌市",440282:"南雄市",440283:"其它区",440300:"深圳市",440303:"罗湖区",440304:"福田区",440305:"南山区",440306:"宝安区",440307:"龙岗区",440308:"盐田区",440309:"其它区",440320:"光明新区",440321:"坪山新区",440322:"大鹏新区",440323:"龙华新区",440400:"珠海市",440402:"香洲区",440403:"斗门区",440404:"金湾区",440488:"其它区",440500:"汕头市",440507:"龙湖区",440511:"金平区",440512:"濠江区",440513:"潮阳区",440514:"潮南区",440515:"澄海区",440523:"南澳县",440524:"其它区",440600:"佛山市",440604:"禅城区",440605:"南海区",440606:"顺德区",440607:"三水区",440608:"高明区",440609:"其它区",440700:"江门市",440703:"蓬江区",440704:"江海区",440705:"新会区",440781:"台山市",440783:"开平市",440784:"鹤山市",440785:"恩平市",440786:"其它区",440800:"湛江市",440802:"赤坎区",440803:"霞山区",440804:"坡头区",440811:"麻章区",440823:"遂溪县",440825:"徐闻县",440881:"廉江市",440882:"雷州市",440883:"吴川市",440884:"其它区",440900:"茂名市",440902:"茂南区",440903:"茂港区",440923:"电白县",440981:"高州市",440982:"化州市",440983:"信宜市",440984:"其它区",441200:"肇庆市",441202:"端州区",441203:"鼎湖区",441223:"广宁县",441224:"怀集县",441225:"封开县",441226:"德庆县",441283:"高要市",441284:"四会市",441285:"其它区",441300:"惠州市",441302:"惠城区",441303:"惠阳区",441322:"博罗县",441323:"惠东县",441324:"龙门县",441325:"其它区",441400:"梅州市",441402:"梅江区",441421:"梅县",441422:"大埔县",441423:"丰顺县",441424:"五华县",441426:"平远县",441427:"蕉岭县",441481:"兴宁市",441482:"其它区",441500:"汕尾市",441502:"城区",441521:"海丰县",441523:"陆河县",441581:"陆丰市",441582:"其它区",441600:"河源市",441602:"源城区",441621:"紫金县",441622:"龙川县",441623:"连平县",441624:"和平县",441625:"东源县",441626:"其它区",441700:"阳江市",441702:"江城区",441721:"阳西县",441723:"阳东县",441781:"阳春市",441782:"其它区",441800:"清远市",441802:"清城区",441821:"佛冈县",441823:"阳山县",441825:"连山壮族瑶族自治县",441826:"连南瑶族自治县",441827:"清新区",441881:"英德市",441882:"连州市",441883:"其它区",441900:"东莞市",442e3:"中山市",442101:"东沙群岛",445100:"潮州市",445102:"湘桥区",445121:"潮安区",445122:"饶平县",445186:"其它区",445200:"揭阳市",445202:"榕城区",445221:"揭东区",445222:"揭西县",445224:"惠来县",445281:"普宁市",445285:"其它区",445300:"云浮市",445302:"云城区",445321:"新兴县",445322:"郁南县",445323:"云安县",445381:"罗定市",445382:"其它区",45e4:"广西壮族自治区",450100:"南宁市",450102:"兴宁区",450103:"青秀区",450105:"江南区",450107:"西乡塘区",450108:"良庆区",450109:"邕宁区",450122:"武鸣县",450123:"隆安县",450124:"马山县",450125:"上林县",450126:"宾阳县",450127:"横县",450128:"其它区",450200:"柳州市",450202:"城中区",450203:"鱼峰区",450204:"柳南区",450205:"柳北区",450221:"柳江县",450222:"柳城县",450223:"鹿寨县",450224:"融安县",450225:"融水苗族自治县",450226:"三江侗族自治县",450227:"其它区",450300:"桂林市",450302:"秀峰区",450303:"叠彩区",450304:"象山区",450305:"七星区",450311:"雁山区",450321:"阳朔县",450322:"临桂区",450323:"灵川县",450324:"全州县",450325:"兴安县",450326:"永福县",450327:"灌阳县",450328:"龙胜各族自治县",450329:"资源县",450330:"平乐县",450331:"荔浦县",450332:"恭城瑶族自治县",450333:"其它区",450400:"梧州市",450403:"万秀区",450405:"长洲区",450406:"龙圩区",450421:"苍梧县",450422:"藤县",450423:"蒙山县",450481:"岑溪市",450482:"其它区",450500:"北海市",450502:"海城区",450503:"银海区",450512:"铁山港区",450521:"合浦县",450522:"其它区",450600:"防城港市",450602:"港口区",450603:"防城区",450621:"上思县",450681:"东兴市",450682:"其它区",450700:"钦州市",450702:"钦南区",450703:"钦北区",450721:"灵山县",450722:"浦北县",450723:"其它区",450800:"贵港市",450802:"港北区",450803:"港南区",450804:"覃塘区",450821:"平南县",450881:"桂平市",450882:"其它区",450900:"玉林市",450902:"玉州区",450903:"福绵区",450921:"容县",450922:"陆川县",450923:"博白县",450924:"兴业县",450981:"北流市",450982:"其它区",451e3:"百色市",451002:"右江区",451021:"田阳县",451022:"田东县",451023:"平果县",451024:"德保县",451025:"靖西县",451026:"那坡县",451027:"凌云县",451028:"乐业县",451029:"田林县",451030:"西林县",451031:"隆林各族自治县",451032:"其它区",451100:"贺州市",451102:"八步区",451119:"平桂管理区",451121:"昭平县",451122:"钟山县",451123:"富川瑶族自治县",451124:"其它区",451200:"河池市",451202:"金城江区",451221:"南丹县",451222:"天峨县",451223:"凤山县",451224:"东兰县",451225:"罗城仫佬族自治县",451226:"环江毛南族自治县",451227:"巴马瑶族自治县",451228:"都安瑶族自治县",451229:"大化瑶族自治县",451281:"宜州市",451282:"其它区",451300:"来宾市",451302:"兴宾区",451321:"忻城县",451322:"象州县",451323:"武宣县",451324:"金秀瑶族自治县",451381:"合山市",451382:"其它区",451400:"崇左市",451402:"江州区",451421:"扶绥县",451422:"宁明县",451423:"龙州县",451424:"大新县",451425:"天等县",451481:"凭祥市",451482:"其它区",46e4:"海南省",460100:"海口市",460105:"秀英区",460106:"龙华区",460107:"琼山区",460108:"美兰区",460109:"其它区",460200:"三亚市",460300:"三沙市",460321:"西沙群岛",460322:"南沙群岛",460323:"中沙群岛的岛礁及其海域",469001:"五指山市",469002:"琼海市",469003:"儋州市",469005:"文昌市",469006:"万宁市",469007:"东方市",469025:"定安县",469026:"屯昌县",469027:"澄迈县",469028:"临高县",469030:"白沙黎族自治县",469031:"昌江黎族自治县",469033:"乐东黎族自治县",469034:"陵水黎族自治县",469035:"保亭黎族苗族自治县",469036:"琼中黎族苗族自治县",471005:"其它区",5e5:"重庆",500100:"重庆市",500101:"万州区",500102:"涪陵区",500103:"渝中区",500104:"大渡口区",500105:"江北区",500106:"沙坪坝区",500107:"九龙坡区",500108:"南岸区",500109:"北碚区",500110:"万盛区",500111:"双桥区",500112:"渝北区",500113:"巴南区",500114:"黔江区",500115:"长寿区",500222:"綦江区",500223:"潼南县",500224:"铜梁县",500225:"大足区",500226:"荣昌县",500227:"璧山县",500228:"梁平县",500229:"城口县",500230:"丰都县",500231:"垫江县",500232:"武隆县",500233:"忠县",500234:"开县",500235:"云阳县",500236:"奉节县",500237:"巫山县",500238:"巫溪县",500240:"石柱土家族自治县",500241:"秀山土家族苗族自治县",500242:"酉阳土家族苗族自治县",500243:"彭水苗族土家族自治县",500381:"江津区",500382:"合川区",500383:"永川区",500384:"南川区",500385:"其它区",51e4:"四川省",510100:"成都市",510104:"锦江区",510105:"青羊区",510106:"金牛区",510107:"武侯区",510108:"成华区",510112:"龙泉驿区",510113:"青白江区",510114:"新都区",510115:"温江区",510121:"金堂县",510122:"双流县",510124:"郫县",510129:"大邑县",510131:"蒲江县",510132:"新津县",510181:"都江堰市",510182:"彭州市",510183:"邛崃市",510184:"崇州市",510185:"其它区",510300:"自贡市",510302:"自流井区",510303:"贡井区",510304:"大安区",510311:"沿滩区",510321:"荣县",510322:"富顺县",510323:"其它区",510400:"攀枝花市",510402:"东区",510403:"西区",510411:"仁和区",510421:"米易县",510422:"盐边县",510423:"其它区",510500:"泸州市",510502:"江阳区",510503:"纳溪区",510504:"龙马潭区",510521:"泸县",510522:"合江县",510524:"叙永县",510525:"古蔺县",510526:"其它区",510600:"德阳市",510603:"旌阳区",510623:"中江县",510626:"罗江县",510681:"广汉市",510682:"什邡市",510683:"绵竹市",510684:"其它区",510700:"绵阳市",510703:"涪城区",510704:"游仙区",510722:"三台县",510723:"盐亭县",510724:"安县",510725:"梓潼县",510726:"北川羌族自治县",510727:"平武县",510781:"江油市",510782:"其它区",510800:"广元市",510802:"利州区",510811:"昭化区",510812:"朝天区",510821:"旺苍县",510822:"青川县",510823:"剑阁县",510824:"苍溪县",510825:"其它区",510900:"遂宁市",510903:"船山区",510904:"安居区",510921:"蓬溪县",510922:"射洪县",510923:"大英县",510924:"其它区",511e3:"内江市",511002:"市中区",511011:"东兴区",511024:"威远县",511025:"资中县",511028:"隆昌县",511029:"其它区",511100:"乐山市",511102:"市中区",511111:"沙湾区",511112:"五通桥区",511113:"金口河区",511123:"犍为县",511124:"井研县",511126:"夹江县",511129:"沐川县",511132:"峨边彝族自治县",511133:"马边彝族自治县",511181:"峨眉山市",511182:"其它区",511300:"南充市",511302:"顺庆区",511303:"高坪区",511304:"嘉陵区",511321:"南部县",511322:"营山县",511323:"蓬安县",511324:"仪陇县",511325:"西充县",511381:"阆中市",511382:"其它区",511400:"眉山市",511402:"东坡区",511421:"仁寿县",511422:"彭山县",511423:"洪雅县",511424:"丹棱县",511425:"青神县",511426:"其它区",511500:"宜宾市",511502:"翠屏区",511521:"宜宾县",511522:"南溪区",511523:"江安县",511524:"长宁县",511525:"高县",511526:"珙县",511527:"筠连县",511528:"兴文县",511529:"屏山县",511530:"其它区",511600:"广安市",511602:"广安区",511603:"前锋区",511621:"岳池县",511622:"武胜县",511623:"邻水县",511681:"华蓥市",511683:"其它区",511700:"达州市",511702:"通川区",511721:"达川区",511722:"宣汉县",511723:"开江县",511724:"大竹县",511725:"渠县",511781:"万源市",511782:"其它区",511800:"雅安市",511802:"雨城区",511821:"名山区",511822:"荥经县",511823:"汉源县",511824:"石棉县",511825:"天全县",511826:"芦山县",511827:"宝兴县",511828:"其它区",511900:"巴中市",511902:"巴州区",511903:"恩阳区",511921:"通江县",511922:"南江县",511923:"平昌县",511924:"其它区",512e3:"资阳市",512002:"雁江区",512021:"安岳县",512022:"乐至县",512081:"简阳市",512082:"其它区",513200:"阿坝藏族羌族自治州",513221:"汶川县",513222:"理县",513223:"茂县",513224:"松潘县",513225:"九寨沟县",513226:"金川县",513227:"小金县",513228:"黑水县",513229:"马尔康县",513230:"壤塘县",513231:"阿坝县",513232:"若尔盖县",513233:"红原县",513234:"其它区",513300:"甘孜藏族自治州",513321:"康定县",513322:"泸定县",513323:"丹巴县",513324:"九龙县",513325:"雅江县",513326:"道孚县",513327:"炉霍县",513328:"甘孜县",513329:"新龙县",513330:"德格县",513331:"白玉县",513332:"石渠县",513333:"色达县",513334:"理塘县",513335:"巴塘县",513336:"乡城县",513337:"稻城县",513338:"得荣县",513339:"其它区",513400:"凉山彝族自治州",513401:"西昌市",513422:"木里藏族自治县",513423:"盐源县",513424:"德昌县",513425:"会理县",513426:"会东县",513427:"宁南县",513428:"普格县",513429:"布拖县",513430:"金阳县",513431:"昭觉县",513432:"喜德县",513433:"冕宁县",513434:"越西县",513435:"甘洛县",513436:"美姑县",513437:"雷波县",513438:"其它区",52e4:"贵州省",520100:"贵阳市",520102:"南明区",520103:"云岩区",520111:"花溪区",520112:"乌当区",520113:"白云区",520121:"开阳县",520122:"息烽县",520123:"修文县",520151:"观山湖区",520181:"清镇市",520182:"其它区",520200:"六盘水市",520201:"钟山区",520203:"六枝特区",520221:"水城县",520222:"盘县",520223:"其它区",520300:"遵义市",520302:"红花岗区",520303:"汇川区",520321:"遵义县",520322:"桐梓县",520323:"绥阳县",520324:"正安县",520325:"道真仡佬族苗族自治县",520326:"务川仡佬族苗族自治县",520327:"凤冈县",520328:"湄潭县",520329:"余庆县",520330:"习水县",520381:"赤水市",520382:"仁怀市",520383:"其它区",520400:"安顺市",520402:"西秀区",520421:"平坝县",520422:"普定县",520423:"镇宁布依族苗族自治县",520424:"关岭布依族苗族自治县",520425:"紫云苗族布依族自治县",520426:"其它区",522200:"铜仁市",522201:"碧江区",522222:"江口县",522223:"玉屏侗族自治县",522224:"石阡县",522225:"思南县",522226:"印江土家族苗族自治县",522227:"德江县",522228:"沿河土家族自治县",522229:"松桃苗族自治县",522230:"万山区",522231:"其它区",522300:"黔西南布依族苗族自治州",522301:"兴义市",522322:"兴仁县",522323:"普安县",522324:"晴隆县",522325:"贞丰县",522326:"望谟县",522327:"册亨县",522328:"安龙县",522329:"其它区",522400:"毕节市",522401:"七星关区",522422:"大方县",522423:"黔西县",522424:"金沙县",522425:"织金县",522426:"纳雍县",522427:"威宁彝族回族苗族自治县",522428:"赫章县",522429:"其它区",522600:"黔东南苗族侗族自治州",522601:"凯里市",522622:"黄平县",522623:"施秉县",522624:"三穗县",522625:"镇远县",522626:"岑巩县",522627:"天柱县",522628:"锦屏县",522629:"剑河县",522630:"台江县",522631:"黎平县",522632:"榕江县",522633:"从江县",522634:"雷山县",522635:"麻江县",522636:"丹寨县",522637:"其它区",522700:"黔南布依族苗族自治州",522701:"都匀市",522702:"福泉市",522722:"荔波县",522723:"贵定县",522725:"瓮安县",522726:"独山县",522727:"平塘县",522728:"罗甸县",522729:"长顺县",522730:"龙里县",522731:"惠水县",522732:"三都水族自治县",522733:"其它区",53e4:"云南省",530100:"昆明市",530102:"五华区",530103:"盘龙区",530111:"官渡区",530112:"西山区",530113:"东川区",530121:"呈贡区",530122:"晋宁县",530124:"富民县",530125:"宜良县",530126:"石林彝族自治县",530127:"嵩明县",530128:"禄劝彝族苗族自治县",530129:"寻甸回族彝族自治县",530181:"安宁市",530182:"其它区",530300:"曲靖市",530302:"麒麟区",530321:"马龙县",530322:"陆良县",530323:"师宗县",530324:"罗平县",530325:"富源县",530326:"会泽县",530328:"沾益县",530381:"宣威市",530382:"其它区",530400:"玉溪市",530402:"红塔区",530421:"江川县",530422:"澄江县",530423:"通海县",530424:"华宁县",530425:"易门县",530426:"峨山彝族自治县",530427:"新平彝族傣族自治县",530428:"元江哈尼族彝族傣族自治县",530429:"其它区",530500:"保山市",530502:"隆阳区",530521:"施甸县",530522:"腾冲县",530523:"龙陵县",530524:"昌宁县",530525:"其它区",530600:"昭通市",530602:"昭阳区",530621:"鲁甸县",530622:"巧家县",530623:"盐津县",530624:"大关县",530625:"永善县",530626:"绥江县",530627:"镇雄县",530628:"彝良县",530629:"威信县",530630:"水富县",530631:"其它区",530700:"丽江市",530702:"古城区",530721:"玉龙纳西族自治县",530722:"永胜县",530723:"华坪县",530724:"宁蒗彝族自治县",530725:"其它区",530800:"普洱市",530802:"思茅区",530821:"宁洱哈尼族彝族自治县",530822:"墨江哈尼族自治县",530823:"景东彝族自治县",530824:"景谷傣族彝族自治县",530825:"镇沅彝族哈尼族拉祜族自治县",530826:"江城哈尼族彝族自治县",530827:"孟连傣族拉祜族佤族自治县",530828:"澜沧拉祜族自治县",530829:"西盟佤族自治县",530830:"其它区",530900:"临沧市",530902:"临翔区",530921:"凤庆县",530922:"云县",530923:"永德县",530924:"镇康县",530925:"双江拉祜族佤族布朗族傣族自治县",530926:"耿马傣族佤族自治县",530927:"沧源佤族自治县",530928:"其它区",532300:"楚雄彝族自治州",532301:"楚雄市",532322:"双柏县",532323:"牟定县",532324:"南华县",532325:"姚安县",532326:"大姚县",532327:"永仁县",532328:"元谋县",532329:"武定县",532331:"禄丰县",532332:"其它区",532500:"红河哈尼族彝族自治州",532501:"个旧市",532502:"开远市",532522:"蒙自市",532523:"屏边苗族自治县",532524:"建水县",532525:"石屏县",532526:"弥勒市",532527:"泸西县",532528:"元阳县",532529:"红河县",532530:"金平苗族瑶族傣族自治县",532531:"绿春县",532532:"河口瑶族自治县",532533:"其它区",532600:"文山壮族苗族自治州",532621:"文山市",532622:"砚山县",532623:"西畴县",532624:"麻栗坡县",532625:"马关县",532626:"丘北县",532627:"广南县",532628:"富宁县",532629:"其它区",532800:"西双版纳傣族自治州",532801:"景洪市",532822:"勐海县",532823:"勐腊县",532824:"其它区",532900:"大理白族自治州",532901:"大理市",532922:"漾濞彝族自治县",532923:"祥云县",532924:"宾川县",532925:"弥渡县",532926:"南涧彝族自治县",532927:"巍山彝族回族自治县",532928:"永平县",532929:"云龙县",532930:"洱源县",532931:"剑川县",532932:"鹤庆县",532933:"其它区",533100:"德宏傣族景颇族自治州",533102:"瑞丽市",533103:"芒市",533122:"梁河县",533123:"盈江县",533124:"陇川县",533125:"其它区",533300:"怒江傈僳族自治州",533321:"泸水县",533323:"福贡县",533324:"贡山独龙族怒族自治县",533325:"兰坪白族普米族自治县",533326:"其它区",533400:"迪庆藏族自治州",533421:"香格里拉县",533422:"德钦县",533423:"维西傈僳族自治县",533424:"其它区",54e4:"西藏自治区",540100:"拉萨市",540102:"城关区",540121:"林周县",540122:"当雄县",540123:"尼木县",540124:"曲水县",540125:"堆龙德庆县",540126:"达孜县",540127:"墨竹工卡县",540128:"其它区",542100:"昌都地区",542121:"昌都县",542122:"江达县",542123:"贡觉县",542124:"类乌齐县",542125:"丁青县",542126:"察雅县",542127:"八宿县",542128:"左贡县",542129:"芒康县",542132:"洛隆县",542133:"边坝县",542134:"其它区",542200:"山南地区",542221:"乃东县",542222:"扎囊县",542223:"贡嘎县",542224:"桑日县",542225:"琼结县",542226:"曲松县",542227:"措美县",542228:"洛扎县",542229:"加查县",542231:"隆子县",542232:"错那县",542233:"浪卡子县",542234:"其它区",542300:"日喀则地区",542301:"日喀则市",542322:"南木林县",542323:"江孜县",542324:"定日县",542325:"萨迦县",542326:"拉孜县",542327:"昂仁县",542328:"谢通门县",542329:"白朗县",542330:"仁布县",542331:"康马县",542332:"定结县",542333:"仲巴县",542334:"亚东县",542335:"吉隆县",542336:"聂拉木县",542337:"萨嘎县",542338:"岗巴县",542339:"其它区",542400:"那曲地区",542421:"那曲县",542422:"嘉黎县",542423:"比如县",542424:"聂荣县",542425:"安多县",542426:"申扎县",542427:"索县",542428:"班戈县",542429:"巴青县",542430:"尼玛县",542431:"其它区",542432:"双湖县",542500:"阿里地区",542521:"普兰县",542522:"札达县",542523:"噶尔县",542524:"日土县",542525:"革吉县",542526:"改则县",542527:"措勤县",542528:"其它区",542600:"林芝地区",542621:"林芝县",542622:"工布江达县",542623:"米林县",542624:"墨脱县",542625:"波密县",542626:"察隅县",542627:"朗县",542628:"其它区",61e4:"陕西省",610100:"西安市",610102:"新城区",610103:"碑林区",610104:"莲湖区",610111:"灞桥区",610112:"未央区",610113:"雁塔区",610114:"阎良区",610115:"临潼区",610116:"长安区",610122:"蓝田县",610124:"周至县",610125:"户县",610126:"高陵县",610127:"其它区",610200:"铜川市",610202:"王益区",610203:"印台区",610204:"耀州区",610222:"宜君县",610223:"其它区",610300:"宝鸡市",610302:"渭滨区",610303:"金台区",610304:"陈仓区",610322:"凤翔县",610323:"岐山县",610324:"扶风县",610326:"眉县",610327:"陇县",610328:"千阳县",610329:"麟游县",610330:"凤县",610331:"太白县",610332:"其它区",610400:"咸阳市",610402:"秦都区",610403:"杨陵区",610404:"渭城区",610422:"三原县",610423:"泾阳县",610424:"乾县",610425:"礼泉县",610426:"永寿县",610427:"彬县",610428:"长武县",610429:"旬邑县",610430:"淳化县",610431:"武功县",610481:"兴平市",610482:"其它区",610500:"渭南市",610502:"临渭区",610521:"华县",610522:"潼关县",610523:"大荔县",610524:"合阳县",610525:"澄城县",610526:"蒲城县",610527:"白水县",610528:"富平县",610581:"韩城市",610582:"华阴市",610583:"其它区",610600:"延安市",610602:"宝塔区",610621:"延长县",610622:"延川县",610623:"子长县",610624:"安塞县",610625:"志丹县",610626:"吴起县",610627:"甘泉县",610628:"富县",610629:"洛川县",610630:"宜川县",610631:"黄龙县",610632:"黄陵县",610633:"其它区",610700:"汉中市",610702:"汉台区",610721:"南郑县",610722:"城固县",610723:"洋县",610724:"西乡县",610725:"勉县",610726:"宁强县",610727:"略阳县",610728:"镇巴县",610729:"留坝县",610730:"佛坪县",610731:"其它区",610800:"榆林市",610802:"榆阳区",610821:"神木县",610822:"府谷县",610823:"横山县",610824:"靖边县",610825:"定边县",610826:"绥德县",610827:"米脂县",610828:"佳县",610829:"吴堡县",610830:"清涧县",610831:"子洲县",610832:"其它区",610900:"安康市",610902:"汉滨区",610921:"汉阴县",610922:"石泉县",610923:"宁陕县",610924:"紫阳县",610925:"岚皋县",610926:"平利县",610927:"镇坪县",610928:"旬阳县",610929:"白河县",610930:"其它区",611e3:"商洛市",611002:"商州区",611021:"洛南县",611022:"丹凤县",611023:"商南县",611024:"山阳县",611025:"镇安县",611026:"柞水县",611027:"其它区",62e4:"甘肃省",620100:"兰州市",620102:"城关区",620103:"七里河区",620104:"西固区",620105:"安宁区",620111:"红古区",620121:"永登县",620122:"皋兰县",620123:"榆中县",620124:"其它区",620200:"嘉峪关市",620300:"金昌市",620302:"金川区",620321:"永昌县",620322:"其它区",620400:"白银市",620402:"白银区",620403:"平川区",620421:"靖远县",620422:"会宁县",620423:"景泰县",620424:"其它区",620500:"天水市",620502:"秦州区",620503:"麦积区",620521:"清水县",620522:"秦安县",620523:"甘谷县",620524:"武山县",620525:"张家川回族自治县",620526:"其它区",620600:"武威市",620602:"凉州区",620621:"民勤县",620622:"古浪县",620623:"天祝藏族自治县",620624:"其它区",620700:"张掖市",620702:"甘州区",620721:"肃南裕固族自治县",620722:"民乐县",620723:"临泽县",620724:"高台县",620725:"山丹县",620726:"其它区",620800:"平凉市",620802:"崆峒区",620821:"泾川县",620822:"灵台县",620823:"崇信县",620824:"华亭县",620825:"庄浪县",620826:"静宁县",620827:"其它区",620900:"酒泉市",620902:"肃州区",620921:"金塔县",620922:"瓜州县",620923:"肃北蒙古族自治县",620924:"阿克塞哈萨克族自治县",620981:"玉门市",620982:"敦煌市",620983:"其它区",621e3:"庆阳市",621002:"西峰区",621021:"庆城县",621022:"环县",621023:"华池县",621024:"合水县",621025:"正宁县",621026:"宁县",621027:"镇原县",621028:"其它区",621100:"定西市",621102:"安定区",621121:"通渭县",621122:"陇西县",621123:"渭源县",621124:"临洮县",621125:"漳县",621126:"岷县",621127:"其它区",621200:"陇南市",621202:"武都区",621221:"成县",621222:"文县",621223:"宕昌县",621224:"康县",621225:"西和县",621226:"礼县",621227:"徽县",621228:"两当县",621229:"其它区",622900:"临夏回族自治州",622901:"临夏市",622921:"临夏县",622922:"康乐县",622923:"永靖县",622924:"广河县",622925:"和政县",622926:"东乡族自治县",622927:"积石山保安族东乡族撒拉族自治县",622928:"其它区",623e3:"甘南藏族自治州",623001:"合作市",623021:"临潭县",623022:"卓尼县",623023:"舟曲县",623024:"迭部县",623025:"玛曲县",623026:"碌曲县",623027:"夏河县",623028:"其它区",63e4:"青海省",630100:"西宁市",630102:"城东区",630103:"城中区",630104:"城西区",630105:"城北区",630121:"大通回族土族自治县",630122:"湟中县",630123:"湟源县",630124:"其它区",632100:"海东市",632121:"平安县",632122:"民和回族土族自治县",632123:"乐都区",632126:"互助土族自治县",632127:"化隆回族自治县",632128:"循化撒拉族自治县",632129:"其它区",632200:"海北藏族自治州",632221:"门源回族自治县",632222:"祁连县",632223:"海晏县",632224:"刚察县",632225:"其它区",632300:"黄南藏族自治州",632321:"同仁县",632322:"尖扎县",632323:"泽库县",632324:"河南蒙古族自治县",632325:"其它区",632500:"海南藏族自治州",632521:"共和县",632522:"同德县",632523:"贵德县",632524:"兴海县",632525:"贵南县",632526:"其它区",632600:"果洛藏族自治州",632621:"玛沁县",632622:"班玛县",632623:"甘德县",632624:"达日县",632625:"久治县",632626:"玛多县",632627:"其它区",632700:"玉树藏族自治州",632721:"玉树市",632722:"杂多县",632723:"称多县",632724:"治多县",632725:"囊谦县",632726:"曲麻莱县",632727:"其它区",632800:"海西蒙古族藏族自治州",632801:"格尔木市",632802:"德令哈市",632821:"乌兰县",632822:"都兰县",632823:"天峻县",632824:"其它区",64e4:"宁夏回族自治区",640100:"银川市",640104:"兴庆区",640105:"西夏区",640106:"金凤区",640121:"永宁县",640122:"贺兰县",640181:"灵武市",640182:"其它区",640200:"石嘴山市",640202:"大武口区",640205:"惠农区",640221:"平罗县",640222:"其它区",640300:"吴忠市",640302:"利通区",640303:"红寺堡区",640323:"盐池县",640324:"同心县",640381:"青铜峡市",640382:"其它区",640400:"固原市",640402:"原州区",640422:"西吉县",640423:"隆德县",640424:"泾源县",640425:"彭阳县",640426:"其它区",640500:"中卫市",640502:"沙坡头区",640521:"中宁县",640522:"海原县",640523:"其它区",65e4:"新疆维吾尔自治区",650100:"乌鲁木齐市",650102:"天山区",650103:"沙依巴克区",650104:"新市区",650105:"水磨沟区",650106:"头屯河区",650107:"达坂城区",650109:"米东区",650121:"乌鲁木齐县",650122:"其它区",650200:"克拉玛依市",650202:"独山子区",650203:"克拉玛依区",650204:"白碱滩区",650205:"乌尔禾区",650206:"其它区",652100:"吐鲁番地区",652101:"吐鲁番市",652122:"鄯善县",652123:"托克逊县",652124:"其它区",652200:"哈密地区",652201:"哈密市",652222:"巴里坤哈萨克自治县",652223:"伊吾县",652224:"其它区",652300:"昌吉回族自治州",652301:"昌吉市",652302:"阜康市",652323:"呼图壁县",652324:"玛纳斯县",652325:"奇台县",652327:"吉木萨尔县",652328:"木垒哈萨克自治县",652329:"其它区",652700:"博尔塔拉蒙古自治州",652701:"博乐市",652702:"阿拉山口市",652722:"精河县",652723:"温泉县",652724:"其它区",652800:"巴音郭楞蒙古自治州",652801:"库尔勒市",652822:"轮台县",652823:"尉犁县",652824:"若羌县",652825:"且末县",652826:"焉耆回族自治县",652827:"和静县",652828:"和硕县",652829:"博湖县",652830:"其它区",652900:"阿克苏地区",652901:"阿克苏市",652922:"温宿县",652923:"库车县",652924:"沙雅县",652925:"新和县",652926:"拜城县",652927:"乌什县",652928:"阿瓦提县",652929:"柯坪县",652930:"其它区",653e3:"克孜勒苏柯尔克孜自治州",653001:"阿图什市",653022:"阿克陶县",653023:"阿合奇县",653024:"乌恰县",653025:"其它区",653100:"喀什地区",653101:"喀什市",653121:"疏附县",653122:"疏勒县",653123:"英吉沙县",653124:"泽普县",653125:"莎车县",653126:"叶城县",653127:"麦盖提县",653128:"岳普湖县",653129:"伽师县",653130:"巴楚县",653131:"塔什库尔干塔吉克自治县",653132:"其它区",653200:"和田地区",653201:"和田市",653221:"和田县",653222:"墨玉县",653223:"皮山县",653224:"洛浦县",653225:"策勒县",653226:"于田县",653227:"民丰县",653228:"其它区",654e3:"伊犁哈萨克自治州",654002:"伊宁市",654003:"奎屯市",654021:"伊宁县",654022:"察布查尔锡伯自治县",654023:"霍城县",654024:"巩留县",654025:"新源县",654026:"昭苏县",654027:"特克斯县",654028:"尼勒克县",654029:"其它区",654200:"塔城地区",654201:"塔城市",654202:"乌苏市",654221:"额敏县",654223:"沙湾县",654224:"托里县",654225:"裕民县",654226:"和布克赛尔蒙古自治县",654227:"其它区",654300:"阿勒泰地区",654301:"阿勒泰市",654321:"布尔津县",654322:"富蕴县",654323:"福海县",654324:"哈巴河县",654325:"青河县",654326:"吉木乃县",654327:"其它区",659001:"石河子市",659002:"阿拉尔市",659003:"图木舒克市",659004:"五家渠市",71e4:"台湾",710100:"台北市",710101:"中正区",710102:"大同区",710103:"中山区",710104:"松山区",710105:"大安区",710106:"万华区",710107:"信义区",710108:"士林区",710109:"北投区",710110:"内湖区",710111:"南港区",710112:"文山区",710113:"其它区",710200:"高雄市",710201:"新兴区",710202:"前金区",710203:"芩雅区",710204:"盐埕区",710205:"鼓山区",710206:"旗津区",710207:"前镇区",710208:"三民区",710209:"左营区",710210:"楠梓区",710211:"小港区",710212:"其它区",710241:"苓雅区",710242:"仁武区",710243:"大社区",710244:"冈山区",710245:"路竹区",710246:"阿莲区",710247:"田寮区",710248:"燕巢区",710249:"桥头区",710250:"梓官区",710251:"弥陀区",710252:"永安区",710253:"湖内区",710254:"凤山区",710255:"大寮区",710256:"林园区",710257:"鸟松区",710258:"大树区",710259:"旗山区",710260:"美浓区",710261:"六龟区",710262:"内门区",710263:"杉林区",710264:"甲仙区",710265:"桃源区",710266:"那玛夏区",710267:"茂林区",710268:"茄萣区",710300:"台南市",710301:"中西区",710302:"东区",710303:"南区",710304:"北区",710305:"安平区",710306:"安南区",710307:"其它区",710339:"永康区",710340:"归仁区",710341:"新化区",710342:"左镇区",710343:"玉井区",710344:"楠西区",710345:"南化区",710346:"仁德区",710347:"关庙区",710348:"龙崎区",710349:"官田区",710350:"麻豆区",710351:"佳里区",710352:"西港区",710353:"七股区",710354:"将军区",710355:"学甲区",710356:"北门区",710357:"新营区",710358:"后壁区",710359:"白河区",710360:"东山区",710361:"六甲区",710362:"下营区",710363:"柳营区",710364:"盐水区",710365:"善化区",710366:"大内区",710367:"山上区",710368:"新市区",710369:"安定区",710400:"台中市",710401:"中区",710402:"东区",710403:"南区",710404:"西区",710405:"北区",710406:"北屯区",710407:"西屯区",710408:"南屯区",710409:"其它区",710431:"太平区",710432:"大里区",710433:"雾峰区",710434:"乌日区",710435:"丰原区",710436:"后里区",710437:"石冈区",710438:"东势区",710439:"和平区",710440:"新社区",710441:"潭子区",710442:"大雅区",710443:"神冈区",710444:"大肚区",710445:"沙鹿区",710446:"龙井区",710447:"梧栖区",710448:"清水区",710449:"大甲区",710450:"外埔区",710451:"大安区",710500:"金门县",710507:"金沙镇",710508:"金湖镇",710509:"金宁乡",710510:"金城镇",710511:"烈屿乡",710512:"乌坵乡",710600:"南投县",710614:"南投市",710615:"中寮乡",710616:"草屯镇",710617:"国姓乡",710618:"埔里镇",710619:"仁爱乡",710620:"名间乡",710621:"集集镇",710622:"水里乡",710623:"鱼池乡",710624:"信义乡",710625:"竹山镇",710626:"鹿谷乡",710700:"基隆市",710701:"仁爱区",710702:"信义区",710703:"中正区",710704:"中山区",710705:"安乐区",710706:"暖暖区",710707:"七堵区",710708:"其它区",710800:"新竹市",710801:"东区",710802:"北区",710803:"香山区",710804:"其它区",710900:"嘉义市",710901:"东区",710902:"西区",710903:"其它区",711100:"新北市",711130:"万里区",711131:"金山区",711132:"板桥区",711133:"汐止区",711134:"深坑区",711135:"石碇区",711136:"瑞芳区",711137:"平溪区",711138:"双溪区",711139:"贡寮区",711140:"新店区",711141:"坪林区",711142:"乌来区",711143:"永和区",711144:"中和区",711145:"土城区",711146:"三峡区",711147:"树林区",711148:"莺歌区",711149:"三重区",711150:"新庄区",711151:"泰山区",711152:"林口区",711153:"芦洲区",711154:"五股区",711155:"八里区",711156:"淡水区",711157:"三芝区",711158:"石门区",711200:"宜兰县",711214:"宜兰市",711215:"头城镇",711216:"礁溪乡",711217:"壮围乡",711218:"员山乡",711219:"罗东镇",711220:"三星乡",711221:"大同乡",711222:"五结乡",711223:"冬山乡",711224:"苏澳镇",711225:"南澳乡",711226:"钓鱼台",711300:"新竹县",711314:"竹北市",711315:"湖口乡",711316:"新丰乡",711317:"新埔镇",711318:"关西镇",711319:"芎林乡",711320:"宝山乡",711321:"竹东镇",711322:"五峰乡",711323:"横山乡",711324:"尖石乡",711325:"北埔乡",711326:"峨眉乡",711400:"桃园县",711414:"中坜市",711415:"平镇市",711416:"龙潭乡",711417:"杨梅市",711418:"新屋乡",711419:"观音乡",711420:"桃园市",711421:"龟山乡",711422:"八德市",711423:"大溪镇",711424:"复兴乡",711425:"大园乡",711426:"芦竹乡",711500:"苗栗县",711519:"竹南镇",711520:"头份镇",711521:"三湾乡",711522:"南庄乡",711523:"狮潭乡",711524:"后龙镇",711525:"通霄镇",711526:"苑里镇",711527:"苗栗市",711528:"造桥乡",711529:"头屋乡",711530:"公馆乡",711531:"大湖乡",711532:"泰安乡",711533:"铜锣乡",711534:"三义乡",711535:"西湖乡",711536:"卓兰镇",711700:"彰化县",711727:"彰化市",711728:"芬园乡",711729:"花坛乡",711730:"秀水乡",711731:"鹿港镇",711732:"福兴乡",711733:"线西乡",711734:"和美镇",711735:"伸港乡",711736:"员林镇",711737:"社头乡",711738:"永靖乡",711739:"埔心乡",711740:"溪湖镇",711741:"大村乡",711742:"埔盐乡",711743:"田中镇",711744:"北斗镇",711745:"田尾乡",711746:"埤头乡",711747:"溪州乡",711748:"竹塘乡",711749:"二林镇",711750:"大城乡",711751:"芳苑乡",711752:"二水乡",711900:"嘉义县",711919:"番路乡",711920:"梅山乡",711921:"竹崎乡",711922:"阿里山乡",711923:"中埔乡",711924:"大埔乡",711925:"水上乡",711926:"鹿草乡",711927:"太保市",711928:"朴子市",711929:"东石乡",711930:"六脚乡",711931:"新港乡",711932:"民雄乡",711933:"大林镇",711934:"溪口乡",711935:"义竹乡",711936:"布袋镇",712100:"云林县",712121:"斗南镇",712122:"大埤乡",712123:"虎尾镇",712124:"土库镇",712125:"褒忠乡",712126:"东势乡",712127:"台西乡",712128:"仑背乡",712129:"麦寮乡",712130:"斗六市",712131:"林内乡",712132:"古坑乡",712133:"莿桐乡",712134:"西螺镇",712135:"二仑乡",712136:"北港镇",712137:"水林乡",712138:"口湖乡",712139:"四湖乡",712140:"元长乡",712400:"屏东县",712434:"屏东市",712435:"三地门乡",712436:"雾台乡",712437:"玛家乡",712438:"九如乡",712439:"里港乡",712440:"高树乡",712441:"盐埔乡",712442:"长治乡",712443:"麟洛乡",712444:"竹田乡",712445:"内埔乡",712446:"万丹乡",712447:"潮州镇",712448:"泰武乡",712449:"来义乡",712450:"万峦乡",712451:"崁顶乡",712452:"新埤乡",712453:"南州乡",712454:"林边乡",712455:"东港镇",712456:"琉球乡",712457:"佳冬乡",712458:"新园乡",712459:"枋寮乡",712460:"枋山乡",712461:"春日乡",712462:"狮子乡",712463:"车城乡",712464:"牡丹乡",712465:"恒春镇",712466:"满州乡",712500:"台东县",712517:"台东市",712518:"绿岛乡",712519:"兰屿乡",712520:"延平乡",712521:"卑南乡",712522:"鹿野乡",712523:"关山镇",712524:"海端乡",712525:"池上乡",712526:"东河乡",712527:"成功镇",712528:"长滨乡",712529:"金峰乡",712530:"大武乡",712531:"达仁乡",712532:"太麻里乡",712600:"花莲县",712615:"花莲市",712616:"新城乡",712617:"太鲁阁",712618:"秀林乡",712619:"吉安乡",712620:"寿丰乡",712621:"凤林镇",712622:"光复乡",712623:"丰滨乡",712624:"瑞穗乡",712625:"万荣乡",712626:"玉里镇",712627:"卓溪乡",712628:"富里乡",712700:"澎湖县",712707:"马公市",712708:"西屿乡",712709:"望安乡",712710:"七美乡",712711:"白沙乡",712712:"湖西乡",712800:"连江县",712805:"南竿乡",712806:"北竿乡",712807:"莒光乡",712808:"东引乡",81e4:"香港特别行政区",810100:"香港岛",810101:"中西区",810102:"湾仔",810103:"东区",810104:"南区",810200:"九龙",810201:"九龙城区",810202:"油尖旺区",810203:"深水埗区",810204:"黄大仙区",810205:"观塘区",810300:"新界",810301:"北区",810302:"大埔区",810303:"沙田区",810304:"西贡区",810305:"元朗区",810306:"屯门区",810307:"荃湾区",810308:"葵青区",810309:"离岛区",82e4:"澳门特别行政区",820100:"澳门半岛",820200:"离岛",99e4:"海外",990100:"海外"};function nn(un){for(var ln={},dn=0,hn;dn<un.length;dn++)hn=un[dn],!(!hn||!hn.id)&&(ln[hn.id]=hn);for(var cn=[],Fn=0;Fn<un.length;Fn++)if(hn=un[Fn],!!hn){if(hn.pid==null&&hn.parentId==null){cn.push(hn);continue}var yn=ln[hn.pid]||ln[hn.parentId];yn&&(yn.children||(yn.children=[]),yn.children.push(hn))}return cn}var tn=function(){var un=[];for(var ln in an){var dn=ln.slice(2,6)==="0000"?void 0:ln.slice(4,6)=="00"?ln.slice(0,2)+"0000":ln.slice(0,4)+"00";un.push({id:ln,pid:dn,name:an[ln]})}return nn(un)}();en.exports=tn},function(en,rn,an){var nn=an(18);en.exports={d4:function(){return this.natural(1,4)},d6:function(){return this.natural(1,6)},d8:function(){return this.natural(1,8)},d12:function(){return this.natural(1,12)},d20:function(){return this.natural(1,20)},d100:function(){return this.natural(1,100)},guid:function(){var tn="abcdefABCDEF1234567890",un=this.string(tn,8)+"-"+this.string(tn,4)+"-"+this.string(tn,4)+"-"+this.string(tn,4)+"-"+this.string(tn,12);return un},uuid:function(){return this.guid()},id:function(){var tn,un=0,ln=["7","9","10","5","8","4","2","1","6","3","7","9","10","5","8","4","2"],dn=["1","0","X","9","8","7","6","5","4","3","2"];tn=this.pick(nn).id+this.date("yyyyMMdd")+this.string("number",3);for(var hn=0;hn<tn.length;hn++)un+=tn[hn]*ln[hn];return tn+=dn[un%11],tn},increment:function(){var tn=0;return function(un){return tn+=+un||1}}(),inc:function(tn){return this.increment(tn)}}},function(en,rn,an){var nn=an(21),tn=an(22);en.exports={Parser:nn,Handler:tn}},function(en,rn){function an(Mn){this.type=Mn,this.offset=an.offset(),this.text=an.text()}function nn(Mn,Tn){an.call(this,"alternate"),this.left=Mn,this.right=Tn}function tn(Mn){an.call(this,"match"),this.body=Mn.filter(Boolean)}function un(Mn,Tn){an.call(this,Mn),this.body=Tn}function ln(Mn){un.call(this,"capture-group"),this.index=Jn[this.offset]||(Jn[this.offset]=Gn++),this.body=Mn}function dn(Mn,Tn){an.call(this,"quantified"),this.body=Mn,this.quantifier=Tn}function hn(Mn,Tn){an.call(this,"quantifier"),this.min=Mn,this.max=Tn,this.greedy=!0}function cn(Mn,Tn){an.call(this,"charset"),this.invert=Mn,this.body=Tn}function Fn(Mn,Tn){an.call(this,"range"),this.start=Mn,this.end=Tn}function yn(Mn){an.call(this,"literal"),this.body=Mn,this.escaped=this.body!=this.text}function gn(Mn){an.call(this,"unicode"),this.code=Mn.toUpperCase()}function bn(Mn){an.call(this,"hex"),this.code=Mn.toUpperCase()}function pn(Mn){an.call(this,"octal"),this.code=Mn.toUpperCase()}function fn(Mn){an.call(this,"back-reference"),this.code=Mn.toUpperCase()}function Cn(Mn){an.call(this,"control-character"),this.code=Mn.toUpperCase()}var Sn=function(){function Mn(An,$n){function qn(){this.constructor=An}qn.prototype=$n.prototype,An.prototype=new qn}function Tn(An,$n,qn,zn,kn){function Xn(jn,Ln){function Dn(Bn){function Hn(_n){return _n.charCodeAt(0).toString(16).toUpperCase()}return Bn.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g,function(_n){return"\\x0"+Hn(_n)}).replace(/[\x10-\x1F\x80-\xFF]/g,function(_n){return"\\x"+Hn(_n)}).replace(/[\u0180-\u0FFF]/g,function(_n){return"\\u0"+Hn(_n)}).replace(/[\u1080-\uFFFF]/g,function(_n){return"\\u"+Hn(_n)})}var En,Pn;switch(jn.length){case 0:En="end of input";break;case 1:En=jn[0];break;default:En=jn.slice(0,-1).join(", ")+" or "+jn[jn.length-1]}return Pn=Ln?'"'+Dn(Ln)+'"':"end of input","Expected "+En+" but "+Pn+" found."}this.expected=An,this.found=$n,this.offset=qn,this.line=zn,this.column=kn,this.name="SyntaxError",this.message=Xn(An,$n)}function In(An){function $n(){return An.substring(Nn,mn)}function qn(){return Nn}function zn(on){function sn(vn,Rn,Kn){var mt,ft;for(mt=Rn;Kn>mt;mt++)ft=An.charAt(mt),ft===`
`?(vn.seenCR||vn.line++,vn.column=1,vn.seenCR=!1):ft==="\r"||ft==="\u2028"||ft==="\u2029"?(vn.line++,vn.column=1,vn.seenCR=!0):(vn.column++,vn.seenCR=!1)}return gt!==on&&(gt>on&&(gt=0,Rt={line:1,column:1,seenCR:!1}),sn(Rt,gt,on),gt=on),Rt}function kn(on){Et>mn||(mn>Et&&(Et=mn,Dt=[]),Dt.push(on))}function Xn(on){var sn=0;for(on.sort();sn<on.length;)on[sn-1]===on[sn]?on.splice(sn,1):sn++}function jn(){var on,sn,vn,Rn,Kn;return on=mn,sn=Ln(),sn!==null?(vn=mn,An.charCodeAt(mn)===124?(Rn=$i,mn++):(Rn=null,wn===0&&kn(Vi)),Rn!==null?(Kn=jn(),Kn!==null?(Rn=[Rn,Kn],vn=Rn):(mn=vn,vn=xn)):(mn=vn,vn=xn),vn===null&&(vn=yt),vn!==null?(Nn=on,sn=zi(sn,vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function Ln(){var on,sn,vn,Rn,Kn;if(on=mn,sn=En(),sn===null&&(sn=yt),sn!==null)if(vn=mn,wn++,Rn=Hn(),wn--,Rn===null?vn=yt:(mn=vn,vn=xn),vn!==null){for(Rn=[],Kn=Bn(),Kn===null&&(Kn=Dn());Kn!==null;)Rn.push(Kn),Kn=Bn(),Kn===null&&(Kn=Dn());Rn!==null?(Kn=Pn(),Kn===null&&(Kn=yt),Kn!==null?(Nn=on,sn=ji(sn,Rn,Kn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)}else mn=on,on=xn;else mn=on,on=xn;return on}function Dn(){var on;return on=ct(),on===null&&(on=Li(),on===null&&(on=xi())),on}function En(){var on,sn;return on=mn,An.charCodeAt(mn)===94?(sn=Xt,mn++):(sn=null,wn===0&&kn(Qt)),sn!==null&&(Nn=on,sn=Ui()),sn===null&&(mn=on),on=sn,on}function Pn(){var on,sn;return on=mn,An.charCodeAt(mn)===36?(sn=Yi,mn++):(sn=null,wn===0&&kn(qi)),sn!==null&&(Nn=on,sn=Zi()),sn===null&&(mn=on),on=sn,on}function Bn(){var on,sn,vn;return on=mn,sn=Dn(),sn!==null?(vn=Hn(),vn!==null?(Nn=on,sn=Xi(sn,vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function Hn(){var on,sn,vn;return wn++,on=mn,sn=_n(),sn!==null?(vn=ut(),vn===null&&(vn=yt),vn!==null?(Nn=on,sn=eo(sn,vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),wn--,on===null&&(sn=null,wn===0&&kn(Qi)),on}function _n(){var on;return on=Vn(),on===null&&(on=Yn(),on===null&&(on=On(),on===null&&(on=Un(),on===null&&(on=Zn(),on===null&&(on=dt()))))),on}function Vn(){var on,sn,vn,Rn,Kn,mt;return on=mn,An.charCodeAt(mn)===123?(sn=wt,mn++):(sn=null,wn===0&&kn(Tt)),sn!==null?(vn=lt(),vn!==null?(An.charCodeAt(mn)===44?(Rn=ao,mn++):(Rn=null,wn===0&&kn(ro)),Rn!==null?(Kn=lt(),Kn!==null?(An.charCodeAt(mn)===125?(mt=ei,mn++):(mt=null,wn===0&&kn(ai)),mt!==null?(Nn=on,sn=no(vn,Kn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn),on}function Yn(){var on,sn,vn,Rn;return on=mn,An.charCodeAt(mn)===123?(sn=wt,mn++):(sn=null,wn===0&&kn(Tt)),sn!==null?(vn=lt(),vn!==null?(An.substr(mn,2)===ri?(Rn=ri,mn+=2):(Rn=null,wn===0&&kn(to)),Rn!==null?(Nn=on,sn=io(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn),on}function On(){var on,sn,vn,Rn;return on=mn,An.charCodeAt(mn)===123?(sn=wt,mn++):(sn=null,wn===0&&kn(Tt)),sn!==null?(vn=lt(),vn!==null?(An.charCodeAt(mn)===125?(Rn=ei,mn++):(Rn=null,wn===0&&kn(ai)),Rn!==null?(Nn=on,sn=oo(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn),on}function Un(){var on,sn;return on=mn,An.charCodeAt(mn)===43?(sn=uo,mn++):(sn=null,wn===0&&kn(lo)),sn!==null&&(Nn=on,sn=so()),sn===null&&(mn=on),on=sn,on}function Zn(){var on,sn;return on=mn,An.charCodeAt(mn)===42?(sn=co,mn++):(sn=null,wn===0&&kn(ho)),sn!==null&&(Nn=on,sn=mo()),sn===null&&(mn=on),on=sn,on}function dt(){var on,sn;return on=mn,An.charCodeAt(mn)===63?(sn=ni,mn++):(sn=null,wn===0&&kn(ti)),sn!==null&&(Nn=on,sn=Fo()),sn===null&&(mn=on),on=sn,on}function ut(){var on;return An.charCodeAt(mn)===63?(on=ni,mn++):(on=null,wn===0&&kn(ti)),on}function lt(){var on,sn,vn;if(on=mn,sn=[],ii.test(An.charAt(mn))?(vn=An.charAt(mn),mn++):(vn=null,wn===0&&kn(oi)),vn!==null)for(;vn!==null;)sn.push(vn),ii.test(An.charAt(mn))?(vn=An.charAt(mn),mn++):(vn=null,wn===0&&kn(oi));else sn=xn;return sn!==null&&(Nn=on,sn=po(sn)),sn===null&&(mn=on),on=sn,on}function ct(){var on,sn,vn,Rn;return on=mn,An.charCodeAt(mn)===40?(sn=yo,mn++):(sn=null,wn===0&&kn(go)),sn!==null?(vn=Ft(),vn===null&&(vn=pt(),vn===null&&(vn=ht(),vn===null&&(vn=Qn()))),vn!==null?(An.charCodeAt(mn)===41?(Rn=fo,mn++):(Rn=null,wn===0&&kn(bo)),Rn!==null?(Nn=on,sn=Co(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn),on}function Qn(){var on,sn;return on=mn,sn=jn(),sn!==null&&(Nn=on,sn=ko(sn)),sn===null&&(mn=on),on=sn,on}function ht(){var on,sn,vn;return on=mn,An.substr(mn,2)===ui?(sn=ui,mn+=2):(sn=null,wn===0&&kn(vo)),sn!==null?(vn=jn(),vn!==null?(Nn=on,sn=Ao(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function Ft(){var on,sn,vn;return on=mn,An.substr(mn,2)===li?(sn=li,mn+=2):(sn=null,wn===0&&kn(So)),sn!==null?(vn=jn(),vn!==null?(Nn=on,sn=Eo(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function pt(){var on,sn,vn;return on=mn,An.substr(mn,2)===si?(sn=si,mn+=2):(sn=null,wn===0&&kn(Do)),sn!==null?(vn=jn(),vn!==null?(Nn=on,sn=Bo(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function Li(){var on,sn,vn,Rn,Kn;if(wn++,on=mn,An.charCodeAt(mn)===91?(sn=To,mn++):(sn=null,wn===0&&kn(Mo)),sn!==null)if(An.charCodeAt(mn)===94?(vn=Xt,mn++):(vn=null,wn===0&&kn(Qt)),vn===null&&(vn=yt),vn!==null){for(Rn=[],Kn=Lt(),Kn===null&&(Kn=bt());Kn!==null;)Rn.push(Kn),Kn=Lt(),Kn===null&&(Kn=bt());Rn!==null?(An.charCodeAt(mn)===93?(Kn=Ro,mn++):(Kn=null,wn===0&&kn(Lo)),Kn!==null?(Nn=on,sn=Po(vn,Rn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)}else mn=on,on=xn;else mn=on,on=xn;return wn--,on===null&&(sn=null,wn===0&&kn(wo)),on}function Lt(){var on,sn,vn,Rn;return wn++,on=mn,sn=bt(),sn!==null?(An.charCodeAt(mn)===45?(vn=xo,mn++):(vn=null,wn===0&&kn(Ho)),vn!==null?(Rn=bt(),Rn!==null?(Nn=on,sn=No(sn,Rn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn)):(mn=on,on=xn),wn--,on===null&&(sn=null,wn===0&&kn(_o)),on}function bt(){var on;return wn++,on=_i(),on===null&&(on=Pi()),wn--,on===null&&wn===0&&kn(Go),on}function Pi(){var on,sn;return on=mn,Io.test(An.charAt(mn))?(sn=An.charAt(mn),mn++):(sn=null,wn===0&&kn(Wo)),sn!==null&&(Nn=on,sn=Mt(sn)),sn===null&&(mn=on),on=sn,on}function _i(){var on;return on=Ii(),on===null&&(on=$t(),on===null&&(on=Pt(),on===null&&(on=_t(),on===null&&(on=xt(),on===null&&(on=Ht(),on===null&&(on=Nt(),on===null&&(on=Gt(),on===null&&(on=It(),on===null&&(on=Wt(),on===null&&(on=Ot(),on===null&&(on=Kt(),on===null&&(on=Jt(),on===null&&(on=Vt(),on===null&&(on=zt(),on===null&&(on=jt(),on===null&&(on=Ut(),on===null&&(on=Yt()))))))))))))))))),on}function xi(){var on;return on=Hi(),on===null&&(on=Gi(),on===null&&(on=Ni())),on}function Hi(){var on,sn;return on=mn,An.charCodeAt(mn)===46?(sn=Oo,mn++):(sn=null,wn===0&&kn(Ko)),sn!==null&&(Nn=on,sn=Jo()),sn===null&&(mn=on),on=sn,on}function Ni(){var on,sn;return wn++,on=mn,Vo.test(An.charAt(mn))?(sn=An.charAt(mn),mn++):(sn=null,wn===0&&kn(zo)),sn!==null&&(Nn=on,sn=Mt(sn)),sn===null&&(mn=on),on=sn,wn--,on===null&&(sn=null,wn===0&&kn($o)),on}function Gi(){var on;return on=Wi(),on===null&&(on=Ki(),on===null&&(on=$t(),on===null&&(on=Pt(),on===null&&(on=_t(),on===null&&(on=xt(),on===null&&(on=Ht(),on===null&&(on=Nt(),on===null&&(on=Gt(),on===null&&(on=It(),on===null&&(on=Wt(),on===null&&(on=Ot(),on===null&&(on=Kt(),on===null&&(on=Jt(),on===null&&(on=Ji(),on===null&&(on=Vt(),on===null&&(on=zt(),on===null&&(on=jt(),on===null&&(on=Ut(),on===null&&(on=Yt()))))))))))))))))))),on}function Ii(){var on,sn;return on=mn,An.substr(mn,2)===kt?(sn=kt,mn+=2):(sn=null,wn===0&&kn(ci)),sn!==null&&(Nn=on,sn=jo()),sn===null&&(mn=on),on=sn,on}function Wi(){var on,sn;return on=mn,An.substr(mn,2)===kt?(sn=kt,mn+=2):(sn=null,wn===0&&kn(ci)),sn!==null&&(Nn=on,sn=Uo()),sn===null&&(mn=on),on=sn,on}function Ki(){var on,sn;return on=mn,An.substr(mn,2)===di?(sn=di,mn+=2):(sn=null,wn===0&&kn(Yo)),sn!==null&&(Nn=on,sn=qo()),sn===null&&(mn=on),on=sn,on}function Pt(){var on,sn;return on=mn,An.substr(mn,2)===hi?(sn=hi,mn+=2):(sn=null,wn===0&&kn(Zo)),sn!==null&&(Nn=on,sn=Xo()),sn===null&&(mn=on),on=sn,on}function _t(){var on,sn;return on=mn,An.substr(mn,2)===mi?(sn=mi,mn+=2):(sn=null,wn===0&&kn(Qo)),sn!==null&&(Nn=on,sn=eu()),sn===null&&(mn=on),on=sn,on}function xt(){var on,sn;return on=mn,An.substr(mn,2)===Fi?(sn=Fi,mn+=2):(sn=null,wn===0&&kn(au)),sn!==null&&(Nn=on,sn=ru()),sn===null&&(mn=on),on=sn,on}function Ht(){var on,sn;return on=mn,An.substr(mn,2)===pi?(sn=pi,mn+=2):(sn=null,wn===0&&kn(nu)),sn!==null&&(Nn=on,sn=tu()),sn===null&&(mn=on),on=sn,on}function Nt(){var on,sn;return on=mn,An.substr(mn,2)===yi?(sn=yi,mn+=2):(sn=null,wn===0&&kn(iu)),sn!==null&&(Nn=on,sn=ou()),sn===null&&(mn=on),on=sn,on}function Gt(){var on,sn;return on=mn,An.substr(mn,2)===gi?(sn=gi,mn+=2):(sn=null,wn===0&&kn(uu)),sn!==null&&(Nn=on,sn=lu()),sn===null&&(mn=on),on=sn,on}function It(){var on,sn;return on=mn,An.substr(mn,2)===fi?(sn=fi,mn+=2):(sn=null,wn===0&&kn(su)),sn!==null&&(Nn=on,sn=cu()),sn===null&&(mn=on),on=sn,on}function Wt(){var on,sn;return on=mn,An.substr(mn,2)===bi?(sn=bi,mn+=2):(sn=null,wn===0&&kn(du)),sn!==null&&(Nn=on,sn=hu()),sn===null&&(mn=on),on=sn,on}function Ot(){var on,sn;return on=mn,An.substr(mn,2)===Ci?(sn=Ci,mn+=2):(sn=null,wn===0&&kn(mu)),sn!==null&&(Nn=on,sn=Fu()),sn===null&&(mn=on),on=sn,on}function Kt(){var on,sn;return on=mn,An.substr(mn,2)===ki?(sn=ki,mn+=2):(sn=null,wn===0&&kn(pu)),sn!==null&&(Nn=on,sn=yu()),sn===null&&(mn=on),on=sn,on}function Jt(){var on,sn;return on=mn,An.substr(mn,2)===vi?(sn=vi,mn+=2):(sn=null,wn===0&&kn(gu)),sn!==null&&(Nn=on,sn=fu()),sn===null&&(mn=on),on=sn,on}function $t(){var on,sn,vn;return on=mn,An.substr(mn,2)===Ai?(sn=Ai,mn+=2):(sn=null,wn===0&&kn(bu)),sn!==null?(An.length>mn?(vn=An.charAt(mn),mn++):(vn=null,wn===0&&kn(Si)),vn!==null?(Nn=on,sn=Cu(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function Ji(){var on,sn,vn;return on=mn,An.charCodeAt(mn)===92?(sn=Ei,mn++):(sn=null,wn===0&&kn(Di)),sn!==null?(ku.test(An.charAt(mn))?(vn=An.charAt(mn),mn++):(vn=null,wn===0&&kn(vu)),vn!==null?(Nn=on,sn=Au(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}function Vt(){var on,sn,vn,Rn;if(on=mn,An.substr(mn,2)===vt?(sn=vt,mn+=2):(sn=null,wn===0&&kn(Bi)),sn!==null){if(vn=[],wi.test(An.charAt(mn))?(Rn=An.charAt(mn),mn++):(Rn=null,wn===0&&kn(Ti)),Rn!==null)for(;Rn!==null;)vn.push(Rn),wi.test(An.charAt(mn))?(Rn=An.charAt(mn),mn++):(Rn=null,wn===0&&kn(Ti));else vn=xn;vn!==null?(Nn=on,sn=Su(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)}else mn=on,on=xn;return on}function zt(){var on,sn,vn,Rn;if(on=mn,An.substr(mn,2)===Mi?(sn=Mi,mn+=2):(sn=null,wn===0&&kn(Eu)),sn!==null){if(vn=[],At.test(An.charAt(mn))?(Rn=An.charAt(mn),mn++):(Rn=null,wn===0&&kn(St)),Rn!==null)for(;Rn!==null;)vn.push(Rn),At.test(An.charAt(mn))?(Rn=An.charAt(mn),mn++):(Rn=null,wn===0&&kn(St));else vn=xn;vn!==null?(Nn=on,sn=Du(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)}else mn=on,on=xn;return on}function jt(){var on,sn,vn,Rn;if(on=mn,An.substr(mn,2)===Ri?(sn=Ri,mn+=2):(sn=null,wn===0&&kn(Bu)),sn!==null){if(vn=[],At.test(An.charAt(mn))?(Rn=An.charAt(mn),mn++):(Rn=null,wn===0&&kn(St)),Rn!==null)for(;Rn!==null;)vn.push(Rn),At.test(An.charAt(mn))?(Rn=An.charAt(mn),mn++):(Rn=null,wn===0&&kn(St));else vn=xn;vn!==null?(Nn=on,sn=wu(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)}else mn=on,on=xn;return on}function Ut(){var on,sn;return on=mn,An.substr(mn,2)===vt?(sn=vt,mn+=2):(sn=null,wn===0&&kn(Bi)),sn!==null&&(Nn=on,sn=Tu()),sn===null&&(mn=on),on=sn,on}function Yt(){var on,sn,vn;return on=mn,An.charCodeAt(mn)===92?(sn=Ei,mn++):(sn=null,wn===0&&kn(Di)),sn!==null?(An.length>mn?(vn=An.charAt(mn),mn++):(vn=null,wn===0&&kn(Si)),vn!==null?(Nn=on,sn=Mt(vn),sn===null&&(mn=on),on=sn):(mn=on,on=xn)):(mn=on,on=xn),on}var Bt,Ct=arguments.length>1?arguments[1]:{},qt={regexp:jn},Zt=jn,xn=null,yt="",$i="|",Vi='"|"',zi=function(on,sn){return sn?new nn(on,sn[1]):on},ji=function(on,sn,vn){return new tn([on].concat(sn).concat([vn]))},Xt="^",Qt='"^"',Ui=function(){return new an("start")},Yi="$",qi='"$"',Zi=function(){return new an("end")},Xi=function(on,sn){return new dn(on,sn)},Qi="Quantifier",eo=function(on,sn){return sn&&(on.greedy=!1),on},wt="{",Tt='"{"',ao=",",ro='","',ei="}",ai='"}"',no=function(on,sn){return new hn(on,sn)},ri=",}",to='",}"',io=function(on){return new hn(on,1/0)},oo=function(on){return new hn(on,on)},uo="+",lo='"+"',so=function(){return new hn(1,1/0)},co="*",ho='"*"',mo=function(){return new hn(0,1/0)},ni="?",ti='"?"',Fo=function(){return new hn(0,1)},ii=/^[0-9]/,oi="[0-9]",po=function(on){return+on.join("")},yo="(",go='"("',fo=")",bo='")"',Co=function(on){return on},ko=function(on){return new ln(on)},ui="?:",vo='"?:"',Ao=function(on){return new un("non-capture-group",on)},li="?=",So='"?="',Eo=function(on){return new un("positive-lookahead",on)},si="?!",Do='"?!"',Bo=function(on){return new un("negative-lookahead",on)},wo="CharacterSet",To="[",Mo='"["',Ro="]",Lo='"]"',Po=function(on,sn){return new cn(!!on,sn)},_o="CharacterRange",xo="-",Ho='"-"',No=function(on,sn){return new Fn(on,sn)},Go="Character",Io=/^[^\\\]]/,Wo="[^\\\\\\]]",Mt=function(on){return new yn(on)},Oo=".",Ko='"."',Jo=function(){return new an("any-character")},$o="Literal",Vo=/^[^|\\\/.[()?+*$\^]/,zo="[^|\\\\\\/.[()?+*$\\^]",kt="\\b",ci='"\\\\b"',jo=function(){return new an("backspace")},Uo=function(){return new an("word-boundary")},di="\\B",Yo='"\\\\B"',qo=function(){return new an("non-word-boundary")},hi="\\d",Zo='"\\\\d"',Xo=function(){return new an("digit")},mi="\\D",Qo='"\\\\D"',eu=function(){return new an("non-digit")},Fi="\\f",au='"\\\\f"',ru=function(){return new an("form-feed")},pi="\\n",nu='"\\\\n"',tu=function(){return new an("line-feed")},yi="\\r",iu='"\\\\r"',ou=function(){return new an("carriage-return")},gi="\\s",uu='"\\\\s"',lu=function(){return new an("white-space")},fi="\\S",su='"\\\\S"',cu=function(){return new an("non-white-space")},bi="\\t",du='"\\\\t"',hu=function(){return new an("tab")},Ci="\\v",mu='"\\\\v"',Fu=function(){return new an("vertical-tab")},ki="\\w",pu='"\\\\w"',yu=function(){return new an("word")},vi="\\W",gu='"\\\\W"',fu=function(){return new an("non-word")},Ai="\\c",bu='"\\\\c"',Si="any character",Cu=function(on){return new Cn(on)},Ei="\\",Di='"\\\\"',ku=/^[1-9]/,vu="[1-9]",Au=function(on){return new fn(on)},vt="\\0",Bi='"\\\\0"',wi=/^[0-7]/,Ti="[0-7]",Su=function(on){return new pn(on.join(""))},Mi="\\x",Eu='"\\\\x"',At=/^[0-9a-fA-F]/,St="[0-9a-fA-F]",Du=function(on){return new bn(on.join(""))},Ri="\\u",Bu='"\\\\u"',wu=function(on){return new gn(on.join(""))},Tu=function(){return new an("null-character")},mn=0,Nn=0,gt=0,Rt={line:1,column:1,seenCR:!1},Et=0,Dt=[],wn=0;if("startRule"in Ct){if(!(Ct.startRule in qt))throw new Error(`Can't start parsing from rule "`+Ct.startRule+'".');Zt=qt[Ct.startRule]}if(an.offset=qn,an.text=$n,Bt=Zt(),Bt!==null&&mn===An.length)return Bt;throw Xn(Dt),Nn=Math.max(mn,Et),new Tn(Dt,Nn<An.length?An.charAt(Nn):null,Nn,zn(Nn).line,zn(Nn).column)}return Mn(Tn,Error),{SyntaxError:Tn,parse:In}}(),Gn=1,Jn={};en.exports=Sn},function(en,rn,an){var nn=an(3),tn=an(5),un={extend:nn.extend},ln=bn(97,122),dn=bn(65,90),hn=bn(48,57),cn=bn(32,47)+bn(58,64)+bn(91,96)+bn(123,126),Fn=bn(32,126),yn=` \f
\r	\v \u2028\u2029`,gn={"\\w":ln+dn+hn+"_","\\W":cn.replace("_",""),"\\s":yn,"\\S":function(){for(var pn=Fn,fn=0;fn<yn.length;fn++)pn=pn.replace(yn[fn],"");return pn}(),"\\d":hn,"\\D":ln+dn+cn};function bn(pn,fn){for(var Cn="",Sn=pn;Sn<=fn;Sn++)Cn+=String.fromCharCode(Sn);return Cn}un.gen=function(pn,fn,Cn){return Cn=Cn||{guid:1},un[pn.type]?un[pn.type](pn,fn,Cn):un.token(pn,fn,Cn)},un.extend({token:function(pn,fn,Cn){switch(pn.type){case"start":case"end":return"";case"any-character":return tn.character();case"backspace":return"";case"word-boundary":return"";case"non-word-boundary":break;case"digit":return tn.pick(hn.split(""));case"non-digit":return tn.pick((ln+dn+cn).split(""));case"form-feed":break;case"line-feed":return pn.body||pn.text;case"carriage-return":break;case"white-space":return tn.pick(yn.split(""));case"non-white-space":return tn.pick((ln+dn+hn).split(""));case"tab":break;case"vertical-tab":break;case"word":return tn.pick((ln+dn+hn).split(""));case"non-word":return tn.pick(cn.replace("_","").split(""))}return pn.body||pn.text},alternate:function(pn,fn,Cn){return this.gen(tn.boolean()?pn.left:pn.right,fn,Cn)},match:function(pn,fn,Cn){fn="";for(var Sn=0;Sn<pn.body.length;Sn++)fn+=this.gen(pn.body[Sn],fn,Cn);return fn},"capture-group":function(pn,fn,Cn){return fn=this.gen(pn.body,fn,Cn),Cn[Cn.guid++]=fn,fn},"non-capture-group":function(pn,fn,Cn){return this.gen(pn.body,fn,Cn)},"positive-lookahead":function(pn,fn,Cn){return this.gen(pn.body,fn,Cn)},"negative-lookahead":function(pn,fn,Cn){return""},quantified:function(pn,fn,Cn){fn="";for(var Sn=this.quantifier(pn.quantifier),Gn=0;Gn<Sn;Gn++)fn+=this.gen(pn.body,fn,Cn);return fn},quantifier:function(pn,fn,Cn){var Sn=Math.max(pn.min,0),Gn=isFinite(pn.max)?pn.max:Sn+tn.integer(3,7);return tn.integer(Sn,Gn)},charset:function(pn,fn,Cn){if(pn.invert)return this["invert-charset"](pn,fn,Cn);var Sn=tn.pick(pn.body);return this.gen(Sn,fn,Cn)},"invert-charset":function(pn,fn,Cn){for(var Sn=Fn,Gn=0,Jn;Gn<pn.body.length;Gn++)switch(Jn=pn.body[Gn],Jn.type){case"literal":Sn=Sn.replace(Jn.body,"");break;case"range":for(var Mn=this.gen(Jn.start,fn,Cn).charCodeAt(),Tn=this.gen(Jn.end,fn,Cn).charCodeAt(),In=Mn;In<=Tn;In++)Sn=Sn.replace(String.fromCharCode(In),"");default:var An=gn[Jn.text];if(An)for(var $n=0;$n<=An.length;$n++)Sn=Sn.replace(An[$n],"")}return tn.pick(Sn.split(""))},range:function(pn,fn,Cn){var Sn=this.gen(pn.start,fn,Cn).charCodeAt(),Gn=this.gen(pn.end,fn,Cn).charCodeAt();return String.fromCharCode(tn.integer(Sn,Gn))},literal:function(pn,fn,Cn){return pn.escaped?pn.body:pn.text},unicode:function(pn,fn,Cn){return String.fromCharCode(parseInt(pn.code,16))},hex:function(pn,fn,Cn){return String.fromCharCode(parseInt(pn.code,16))},octal:function(pn,fn,Cn){return String.fromCharCode(parseInt(pn.code,8))},"back-reference":function(pn,fn,Cn){return Cn[pn.code]||""},CONTROL_CHARACTER_MAP:function(){for(var pn="@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \\ ] ^ _".split(" "),fn=`\0       \x07 \b 	 
 \v \f \r              \x1B    `.split(" "),Cn={},Sn=0;Sn<pn.length;Sn++)Cn[pn[Sn]]=fn[Sn];return Cn}(),"control-character":function(pn,fn,Cn){return this.CONTROL_CHARACTER_MAP[pn.code]}}),en.exports=un},function(en,rn,an){en.exports=an(24)},function(en,rn,an){var nn=an(2),tn=an(3),un=an(4);function ln(dn,hn,cn){cn=cn||[];var Fn={name:typeof hn=="string"?hn.replace(nn.RE_KEY,"$1"):hn,template:dn,type:tn.type(dn),rule:un.parse(hn)};switch(Fn.path=cn.slice(0),Fn.path.push(hn===void 0?"ROOT":Fn.name),Fn.type){case"array":Fn.items=[],tn.each(dn,function(yn,gn){Fn.items.push(ln(yn,gn,Fn.path))});break;case"object":Fn.properties=[],tn.each(dn,function(yn,gn){Fn.properties.push(ln(yn,gn,Fn.path))});break}return Fn}en.exports=ln},function(en,rn,an){en.exports=an(26)},function(en,rn,an){var nn=an(2),tn=an(3),un=an(23);function ln(cn,Fn){for(var yn=un(cn),gn=dn.diff(yn,Fn),bn=0;bn<gn.length;bn++);return gn}var dn={diff:function(Fn,yn,gn){var bn=[];return this.name(Fn,yn,gn,bn)&&this.type(Fn,yn,gn,bn)&&(this.value(Fn,yn,gn,bn),this.properties(Fn,yn,gn,bn),this.items(Fn,yn,gn,bn)),bn},name:function(cn,Fn,yn,gn){var bn=gn.length;return hn.equal("name",cn.path,yn+"",cn.name+"",gn),gn.length===bn},type:function(cn,Fn,yn,gn){var bn=gn.length;switch(cn.type){case"string":if(cn.template.match(nn.RE_PLACEHOLDER))return!0;break;case"array":if(cn.rule.parameters&&(cn.rule.min!==void 0&&cn.rule.max===void 0&&cn.rule.count===1||cn.rule.parameters[2]))return!0;break;case"function":return!0}return hn.equal("type",cn.path,tn.type(Fn),cn.type,gn),gn.length===bn},value:function(cn,Fn,yn,gn){var bn=gn.length,pn=cn.rule,fn=cn.type;if(fn==="object"||fn==="array"||fn==="function")return!0;if(!pn.parameters){switch(fn){case"regexp":return hn.match("value",cn.path,Fn,cn.template,gn),gn.length===bn;case"string":if(cn.template.match(nn.RE_PLACEHOLDER))return gn.length===bn;break}return hn.equal("value",cn.path,Fn,cn.template,gn),gn.length===bn}var Cn;switch(fn){case"number":var Sn=(Fn+"").split(".");Sn[0]=+Sn[0],pn.min!==void 0&&pn.max!==void 0&&(hn.greaterThanOrEqualTo("value",cn.path,Sn[0],Math.min(pn.min,pn.max),gn),hn.lessThanOrEqualTo("value",cn.path,Sn[0],Math.max(pn.min,pn.max),gn)),pn.min!==void 0&&pn.max===void 0&&hn.equal("value",cn.path,Sn[0],pn.min,gn,"[value] "+yn),pn.decimal&&(pn.dmin!==void 0&&pn.dmax!==void 0&&(hn.greaterThanOrEqualTo("value",cn.path,Sn[1].length,pn.dmin,gn),hn.lessThanOrEqualTo("value",cn.path,Sn[1].length,pn.dmax,gn)),pn.dmin!==void 0&&pn.dmax===void 0&&hn.equal("value",cn.path,Sn[1].length,pn.dmin,gn));break;case"boolean":break;case"string":Cn=Fn.match(new RegExp(cn.template,"g")),Cn=Cn?Cn.length:0,pn.min!==void 0&&pn.max!==void 0&&(hn.greaterThanOrEqualTo("repeat count",cn.path,Cn,pn.min,gn),hn.lessThanOrEqualTo("repeat count",cn.path,Cn,pn.max,gn)),pn.min!==void 0&&pn.max===void 0&&hn.equal("repeat count",cn.path,Cn,pn.min,gn);break;case"regexp":Cn=Fn.match(new RegExp(cn.template.source.replace(/^\^|\$$/g,""),"g")),Cn=Cn?Cn.length:0,pn.min!==void 0&&pn.max!==void 0&&(hn.greaterThanOrEqualTo("repeat count",cn.path,Cn,pn.min,gn),hn.lessThanOrEqualTo("repeat count",cn.path,Cn,pn.max,gn)),pn.min!==void 0&&pn.max===void 0&&hn.equal("repeat count",cn.path,Cn,pn.min,gn);break}return gn.length===bn},properties:function(cn,Fn,yn,gn){var bn=gn.length,pn=cn.rule,fn=tn.keys(Fn);if(cn.properties){if(cn.rule.parameters?(pn.min!==void 0&&pn.max!==void 0&&(hn.greaterThanOrEqualTo("properties length",cn.path,fn.length,Math.min(pn.min,pn.max),gn),hn.lessThanOrEqualTo("properties length",cn.path,fn.length,Math.max(pn.min,pn.max),gn)),pn.min!==void 0&&pn.max===void 0&&pn.count!==1&&hn.equal("properties length",cn.path,fn.length,pn.min,gn)):hn.equal("properties length",cn.path,fn.length,cn.properties.length,gn),gn.length!==bn)return!1;for(var Cn=0;Cn<fn.length;Cn++)gn.push.apply(gn,this.diff(function(){var Sn;return tn.each(cn.properties,function(Gn){Gn.name===fn[Cn]&&(Sn=Gn)}),Sn||cn.properties[Cn]}(),Fn[fn[Cn]],fn[Cn]));return gn.length===bn}},items:function(cn,Fn,yn,gn){var bn=gn.length;if(cn.items){var pn=cn.rule;if(!cn.rule.parameters)hn.equal("items length",cn.path,Fn.length,cn.items.length,gn);else{if(pn.min!==void 0&&pn.max!==void 0&&(hn.greaterThanOrEqualTo("items",cn.path,Fn.length,Math.min(pn.min,pn.max)*cn.items.length,gn,"[{utype}] array is too short: {path} must have at least {expected} elements but instance has {actual} elements"),hn.lessThanOrEqualTo("items",cn.path,Fn.length,Math.max(pn.min,pn.max)*cn.items.length,gn,"[{utype}] array is too long: {path} must have at most {expected} elements but instance has {actual} elements")),pn.min!==void 0&&pn.max===void 0){if(pn.count===1)return gn.length===bn;hn.equal("items length",cn.path,Fn.length,pn.min*cn.items.length,gn)}if(pn.parameters[2])return gn.length===bn}if(gn.length!==bn)return!1;for(var fn=0;fn<Fn.length;fn++)gn.push.apply(gn,this.diff(cn.items[fn%cn.items.length],Fn[fn],fn%cn.items.length));return gn.length===bn}}},hn={message:function(cn){return(cn.message||"[{utype}] Expect {path}'{ltype} {action} {expected}, but is {actual}").replace("{utype}",cn.type.toUpperCase()).replace("{ltype}",cn.type.toLowerCase()).replace("{path}",tn.isArray(cn.path)&&cn.path.join(".")||cn.path).replace("{action}",cn.action).replace("{expected}",cn.expected).replace("{actual}",cn.actual)},equal:function(cn,Fn,yn,gn,bn,pn){if(yn===gn)return!0;switch(cn){case"type":if(gn==="regexp"&&yn==="string")return!0;break}var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"is equal to",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1},match:function(cn,Fn,yn,gn,bn,pn){if(gn.test(yn))return!0;var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"matches",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1},notEqual:function(cn,Fn,yn,gn,bn,pn){if(yn!==gn)return!0;var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"is not equal to",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1},greaterThan:function(cn,Fn,yn,gn,bn,pn){if(yn>gn)return!0;var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"is greater than",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1},lessThan:function(cn,Fn,yn,gn,bn,pn){if(yn<gn)return!0;var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"is less to",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1},greaterThanOrEqualTo:function(cn,Fn,yn,gn,bn,pn){if(yn>=gn)return!0;var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"is greater than or equal to",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1},lessThanOrEqualTo:function(cn,Fn,yn,gn,bn,pn){if(yn<=gn)return!0;var fn={path:Fn,type:cn,actual:yn,expected:gn,action:"is less than or equal to",message:pn};return fn.message=hn.message(fn),bn.push(fn),!1}};ln.Diff=dn,ln.Assert=hn,en.exports=ln},function(en,rn,an){en.exports=an(28)},function(en,rn,an){var nn=an(3);window._XMLHttpRequest=window.XMLHttpRequest,window._ActiveXObject=window.ActiveXObject;try{new window.Event("custom")}catch{window.Event=function(pn,fn,Cn,Sn){var Gn=document.createEvent("CustomEvent");return Gn.initCustomEvent(pn,fn,Cn,Sn),Gn}}var tn={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4},un="readystatechange loadstart progress abort error load timeout loadend".split(" "),ln="timeout withCredentials".split(" "),dn="readyState responseURL status statusText responseType response responseText responseXML".split(" "),hn={200:"OK"};function cn(){this.custom={events:{},requestHeaders:{},responseHeaders:{}}}cn._settings={timeout:"10-100"},cn.setup=function(bn){return nn.extend(cn._settings,bn),cn._settings},nn.extend(cn,tn),nn.extend(cn.prototype,tn),cn.prototype.mock=!0,cn.prototype.match=!1,nn.extend(cn.prototype,{open:function(bn,pn,fn,Cn,Sn){var Gn=this;nn.extend(this.custom,{method:bn,url:pn,async:typeof fn=="boolean"?fn:!0,username:Cn,password:Sn,options:{url:pn,type:bn}}),this.custom.timeout=function($n){if(typeof $n=="number")return $n;if(typeof $n=="string"&&!~$n.indexOf("-"))return parseInt($n,10);if(typeof $n=="string"&&~$n.indexOf("-")){var qn=$n.split("-"),zn=parseInt(qn[0],10),kn=parseInt(qn[1],10);return Math.round(Math.random()*(kn-zn))+zn}}(cn._settings.timeout);var Jn=yn(this.custom.options);function Mn($n){for(var qn=0;qn<dn.length;qn++)try{Gn[dn[qn]]=Tn[dn[qn]]}catch{}Gn.dispatchEvent(new Event($n.type))}if(!Jn){var Tn=Fn();this.custom.xhr=Tn;for(var In=0;In<un.length;In++)Tn.addEventListener(un[In],Mn);Cn?Tn.open(bn,pn,fn,Cn,Sn):Tn.open(bn,pn,fn);for(var An=0;An<ln.length;An++)try{Tn[ln[An]]=Gn[ln[An]]}catch{}return}this.match=!0,this.custom.template=Jn,this.readyState=cn.OPENED,this.dispatchEvent(new Event("readystatechange"))},setRequestHeader:function(bn,pn){if(!this.match){this.custom.xhr.setRequestHeader(bn,pn);return}var fn=this.custom.requestHeaders;fn[bn]?fn[bn]+=","+pn:fn[bn]=pn},timeout:0,withCredentials:!1,upload:{},send:function(pn){var fn=this;if(this.custom.options.body=pn,!this.match){this.custom.xhr.send(pn);return}this.setRequestHeader("X-Requested-With","MockXMLHttpRequest"),this.dispatchEvent(new Event("loadstart")),this.custom.async?setTimeout(Cn,this.custom.timeout):Cn();function Cn(){fn.readyState=cn.HEADERS_RECEIVED,fn.dispatchEvent(new Event("readystatechange")),fn.readyState=cn.LOADING,fn.dispatchEvent(new Event("readystatechange")),fn.status=200,fn.statusText=hn[200],fn.response=fn.responseText=JSON.stringify(gn(fn.custom.template,fn.custom.options),null,4),fn.readyState=cn.DONE,fn.dispatchEvent(new Event("readystatechange")),fn.dispatchEvent(new Event("load")),fn.dispatchEvent(new Event("loadend"))}},abort:function(){if(!this.match){this.custom.xhr.abort();return}this.readyState=cn.UNSENT,this.dispatchEvent(new Event("abort",!1,!1,this)),this.dispatchEvent(new Event("error",!1,!1,this))}}),nn.extend(cn.prototype,{responseURL:"",status:cn.UNSENT,statusText:"",getResponseHeader:function(bn){return this.match?this.custom.responseHeaders[bn.toLowerCase()]:this.custom.xhr.getResponseHeader(bn)},getAllResponseHeaders:function(){if(!this.match)return this.custom.xhr.getAllResponseHeaders();var bn=this.custom.responseHeaders,pn="";for(var fn in bn)bn.hasOwnProperty(fn)&&(pn+=fn+": "+bn[fn]+`\r
`);return pn},overrideMimeType:function(){},responseType:"",response:null,responseText:"",responseXML:null}),nn.extend(cn.prototype,{addEventListener:function(pn,fn){var Cn=this.custom.events;Cn[pn]||(Cn[pn]=[]),Cn[pn].push(fn)},removeEventListener:function(pn,fn){for(var Cn=this.custom.events[pn]||[],Sn=0;Sn<Cn.length;Sn++)Cn[Sn]===fn&&Cn.splice(Sn--,1)},dispatchEvent:function(pn){for(var fn=this.custom.events[pn.type]||[],Cn=0;Cn<fn.length;Cn++)fn[Cn].call(this,pn);var Sn="on"+pn.type;this[Sn]&&this[Sn](pn)}});function Fn(){var bn=function(){var Cn=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Sn=/^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,Gn=location.href,Jn=Sn.exec(Gn.toLowerCase())||[];return Cn.test(Jn[1])}();return window.ActiveXObject?!bn&&pn()||fn():pn();function pn(){try{return new window._XMLHttpRequest}catch{}}function fn(){try{return new window._ActiveXObject("Microsoft.XMLHTTP")}catch{}}}function yn(bn){for(var pn in cn.Mock._mocked){var fn=cn.Mock._mocked[pn];if((!fn.rurl||Cn(fn.rurl,bn.url))&&(!fn.rtype||Cn(fn.rtype,bn.type.toLowerCase())))return fn}function Cn(Sn,Gn){if(nn.type(Sn)==="string")return Sn===Gn;if(nn.type(Sn)==="regexp")return Sn.test(Gn)}}function gn(bn,pn){return nn.isFunction(bn.template)?bn.template(pn):cn.Mock.mock(bn.template)}en.exports=cn}])})})(mock);var mockExports=mock.exports;const Mock=getDefaultExportFromCjs(mockExports);function resultSuccess(en,{message:rn="ok"}={}){return Mock.mock({code:200,result:en,message:rn,type:"success"})}function doCustomTimes(en,rn){let an=-1;for(;++an<en;)rn(an)}const Random=Mock.Random,token=Random.string("upper",32,32),adminInfo={userId:"1",username:"admin",realName:"Admin",avatar:Random.image(),desc:"manager",password:Random.string("upper",4,16),token,permissions:[{label:"主控台",value:"dashboard_console"},{label:"监控页",value:"dashboard_monitor"},{label:"工作台",value:"dashboard_workplace"},{label:"基础列表",value:"basic_list"},{label:"基础列表删除",value:"basic_list_delete"}]},UserMock=defineMock({"[POST]/api/login":()=>resultSuccess({token}),"/api/admin_info":()=>resultSuccess(adminInfo)}),menusList=[{path:"/dashboard",name:"Dashboard",component:"LAYOUT",redirect:"/dashboard/console",meta:{icon:"DashboardOutlined",title:"Dashboard"},children:[{path:"console",name:"dashboard_console",component:"/dashboard/console/console",meta:{title:"主控台"}},{path:"monitor",name:"dashboard_monitor",component:"/dashboard/monitor/monitor",meta:{title:"监控页"}},{path:"workplace",name:"dashboard_workplace",component:"/dashboard/workplace/workplace",meta:{hidden:!0,title:"工作台"}}]}],MenusMock=defineMock({"/api/menus":()=>resultSuccess(menusList)});var e=[{name:"Aegean Airlines",iataCode:"A3"},{name:"Aeroflot",iataCode:"SU"},{name:"Aerolineas Argentinas",iataCode:"AR"},{name:"Aeromexico",iataCode:"AM"},{name:"Air Algerie",iataCode:"AH"},{name:"Air Arabia",iataCode:"G9"},{name:"Air Canada",iataCode:"AC"},{name:"Air China",iataCode:"CA"},{name:"Air Europa",iataCode:"UX"},{name:"Air France",iataCode:"AF"},{name:"Air India",iataCode:"AI"},{name:"Air Mauritius",iataCode:"MK"},{name:"Air New Zealand",iataCode:"NZ"},{name:"Air Niugini",iataCode:"PX"},{name:"Air Tahiti",iataCode:"VT"},{name:"Air Tahiti Nui",iataCode:"TN"},{name:"Air Transat",iataCode:"TS"},{name:"AirAsia X",iataCode:"D7"},{name:"AirAsia",iataCode:"AK"},{name:"Aircalin",iataCode:"SB"},{name:"Alaska Airlines",iataCode:"AS"},{name:"Alitalia",iataCode:"AZ"},{name:"All Nippon Airways",iataCode:"NH"},{name:"Allegiant Air",iataCode:"G4"},{name:"American Airlines",iataCode:"AA"},{name:"Asiana Airlines",iataCode:"OZ"},{name:"Avianca",iataCode:"AV"},{name:"Azul Linhas Aereas Brasileiras",iataCode:"AD"},{name:"Azur Air",iataCode:"ZF"},{name:"Beijing Capital Airlines",iataCode:"JD"},{name:"Boliviana de Aviacion",iataCode:"OB"},{name:"British Airways",iataCode:"BA"},{name:"Cathay Pacific",iataCode:"CX"},{name:"Cebu Pacific Air",iataCode:"5J"},{name:"China Airlines",iataCode:"CI"},{name:"China Eastern Airlines",iataCode:"MU"},{name:"China Southern Airlines",iataCode:"CZ"},{name:"Condor",iataCode:"DE"},{name:"Copa Airlines",iataCode:"CM"},{name:"Delta Air Lines",iataCode:"DL"},{name:"Easyfly",iataCode:"VE"},{name:"EasyJet",iataCode:"U2"},{name:"EcoJet",iataCode:"8J"},{name:"Egyptair",iataCode:"MS"},{name:"El Al",iataCode:"LY"},{name:"Emirates Airlines",iataCode:"EK"},{name:"Ethiopian Airlines",iataCode:"ET"},{name:"Etihad Airways",iataCode:"EY"},{name:"EVA Air",iataCode:"BR"},{name:"Fiji Airways",iataCode:"FJ"},{name:"Finnair",iataCode:"AY"},{name:"Flybondi",iataCode:"FO"},{name:"Flydubai",iataCode:"FZ"},{name:"FlySafair",iataCode:"FA"},{name:"Frontier Airlines",iataCode:"F9"},{name:"Garuda Indonesia",iataCode:"GA"},{name:"Go First",iataCode:"G8"},{name:"Gol Linhas Aereas Inteligentes",iataCode:"G3"},{name:"Hainan Airlines",iataCode:"HU"},{name:"Hawaiian Airlines",iataCode:"HA"},{name:"IndiGo Airlines",iataCode:"6E"},{name:"Japan Airlines",iataCode:"JL"},{name:"Jeju Air",iataCode:"7C"},{name:"Jet2",iataCode:"LS"},{name:"JetBlue Airways",iataCode:"B6"},{name:"JetSMART",iataCode:"JA"},{name:"Juneyao Airlines",iataCode:"HO"},{name:"Kenya Airways",iataCode:"KQ"},{name:"KLM Royal Dutch Airlines",iataCode:"KL"},{name:"Korean Air",iataCode:"KE"},{name:"Kulula.com",iataCode:"MN"},{name:"LATAM Airlines",iataCode:"LA"},{name:"Lion Air",iataCode:"JT"},{name:"LOT Polish Airlines",iataCode:"LO"},{name:"Lufthansa",iataCode:"LH"},{name:"Libyan Airlines",iataCode:"LN"},{name:"Linea Aerea Amaszonas",iataCode:"Z8"},{name:"Malaysia Airlines",iataCode:"MH"},{name:"Nordwind Airlines",iataCode:"N4"},{name:"Norwegian Air Shuttle",iataCode:"DY"},{name:"Oman Air",iataCode:"WY"},{name:"Pakistan International Airlines",iataCode:"PK"},{name:"Pegasus Airlines",iataCode:"PC"},{name:"Philippine Airlines",iataCode:"PR"},{name:"Qantas Group",iataCode:"QF"},{name:"Qatar Airways",iataCode:"QR"},{name:"Republic Airways",iataCode:"YX"},{name:"Royal Air Maroc",iataCode:"AT"},{name:"Ryanair",iataCode:"FR"},{name:"S7 Airlines",iataCode:"S7"},{name:"SAS",iataCode:"SK"},{name:"Satena",iataCode:"9R"},{name:"Saudia",iataCode:"SV"},{name:"Shandong Airlines",iataCode:"SC"},{name:"Sichuan Airlines",iataCode:"3U"},{name:"Singapore Airlines",iataCode:"SQ"},{name:"Sky Airline",iataCode:"H2"},{name:"SkyWest Airlines",iataCode:"OO"},{name:"South African Airways",iataCode:"SA"},{name:"Southwest Airlines",iataCode:"WN"},{name:"SpiceJet",iataCode:"SG"},{name:"Spirit Airlines",iataCode:"NK"},{name:"Spring Airlines",iataCode:"9S"},{name:"SriLankan Airlines",iataCode:"UL"},{name:"Star Peru",iataCode:"2I"},{name:"Sun Country Airlines",iataCode:"SY"},{name:"SunExpress",iataCode:"XQ"},{name:"TAP Air Portugal",iataCode:"TP"},{name:"Thai AirAsia",iataCode:"FD"},{name:"Thai Airways",iataCode:"TG"},{name:"TUI Airways",iataCode:"BY"},{name:"Tunisair",iataCode:"TU"},{name:"Turkish Airlines",iataCode:"TK"},{name:"Ukraine International",iataCode:"PS"},{name:"United Airlines",iataCode:"UA"},{name:"Ural Airlines",iataCode:"U6"},{name:"VietJet Air",iataCode:"VJ"},{name:"Vietnam Airlines",iataCode:"VN"},{name:"Virgin Atlantic Airways",iataCode:"VS"},{name:"Virgin Australia",iataCode:"VA"},{name:"VivaAerobus",iataCode:"VB"},{name:"VOEPASS Linhas Aereas",iataCode:"2Z"},{name:"Volaris",iataCode:"Y4"},{name:"WestJet",iataCode:"WS"},{name:"Wingo",iataCode:"P5"},{name:"Wizz Air",iataCode:"W6"}],a=[{name:"Aerospatiale/BAC Concorde",iataTypeCode:"SSC"},{name:"Airbus A300",iataTypeCode:"AB3"},{name:"Airbus A310",iataTypeCode:"310"},{name:"Airbus A310-200",iataTypeCode:"312"},{name:"Airbus A310-300",iataTypeCode:"313"},{name:"Airbus A318",iataTypeCode:"318"},{name:"Airbus A319",iataTypeCode:"319"},{name:"Airbus A319neo",iataTypeCode:"31N"},{name:"Airbus A320",iataTypeCode:"320"},{name:"Airbus A320neo",iataTypeCode:"32N"},{name:"Airbus A321",iataTypeCode:"321"},{name:"Airbus A321neo",iataTypeCode:"32Q"},{name:"Airbus A330",iataTypeCode:"330"},{name:"Airbus A330-200",iataTypeCode:"332"},{name:"Airbus A330-300",iataTypeCode:"333"},{name:"Airbus A330-800neo",iataTypeCode:"338"},{name:"Airbus A330-900neo",iataTypeCode:"339"},{name:"Airbus A340",iataTypeCode:"340"},{name:"Airbus A340-200",iataTypeCode:"342"},{name:"Airbus A340-300",iataTypeCode:"343"},{name:"Airbus A340-500",iataTypeCode:"345"},{name:"Airbus A340-600",iataTypeCode:"346"},{name:"Airbus A350",iataTypeCode:"350"},{name:"Airbus A350-900",iataTypeCode:"359"},{name:"Airbus A350-1000",iataTypeCode:"351"},{name:"Airbus A380",iataTypeCode:"380"},{name:"Airbus A380-800",iataTypeCode:"388"},{name:"Antonov An-12",iataTypeCode:"ANF"},{name:"Antonov An-24",iataTypeCode:"AN4"},{name:"Antonov An-26",iataTypeCode:"A26"},{name:"Antonov An-28",iataTypeCode:"A28"},{name:"Antonov An-30",iataTypeCode:"A30"},{name:"Antonov An-32",iataTypeCode:"A32"},{name:"Antonov An-72",iataTypeCode:"AN7"},{name:"Antonov An-124 Ruslan",iataTypeCode:"A4F"},{name:"Antonov An-140",iataTypeCode:"A40"},{name:"Antonov An-148",iataTypeCode:"A81"},{name:"Antonov An-158",iataTypeCode:"A58"},{name:"Antonov An-225 Mriya",iataTypeCode:"A5F"},{name:"Boeing 707",iataTypeCode:"703"},{name:"Boeing 717",iataTypeCode:"717"},{name:"Boeing 720B",iataTypeCode:"B72"},{name:"Boeing 727",iataTypeCode:"727"},{name:"Boeing 727-100",iataTypeCode:"721"},{name:"Boeing 727-200",iataTypeCode:"722"},{name:"Boeing 737 MAX 7",iataTypeCode:"7M7"},{name:"Boeing 737 MAX 8",iataTypeCode:"7M8"},{name:"Boeing 737 MAX 9",iataTypeCode:"7M9"},{name:"Boeing 737 MAX 10",iataTypeCode:"7MJ"},{name:"Boeing 737",iataTypeCode:"737"},{name:"Boeing 737-100",iataTypeCode:"731"},{name:"Boeing 737-200",iataTypeCode:"732"},{name:"Boeing 737-300",iataTypeCode:"733"},{name:"Boeing 737-400",iataTypeCode:"734"},{name:"Boeing 737-500",iataTypeCode:"735"},{name:"Boeing 737-600",iataTypeCode:"736"},{name:"Boeing 737-700",iataTypeCode:"73G"},{name:"Boeing 737-800",iataTypeCode:"738"},{name:"Boeing 737-900",iataTypeCode:"739"},{name:"Boeing 747",iataTypeCode:"747"},{name:"Boeing 747-100",iataTypeCode:"741"},{name:"Boeing 747-200",iataTypeCode:"742"},{name:"Boeing 747-300",iataTypeCode:"743"},{name:"Boeing 747-400",iataTypeCode:"744"},{name:"Boeing 747-400D",iataTypeCode:"74J"},{name:"Boeing 747-8",iataTypeCode:"748"},{name:"Boeing 747SP",iataTypeCode:"74L"},{name:"Boeing 747SR",iataTypeCode:"74R"},{name:"Boeing 757",iataTypeCode:"757"},{name:"Boeing 757-200",iataTypeCode:"752"},{name:"Boeing 757-300",iataTypeCode:"753"},{name:"Boeing 767",iataTypeCode:"767"},{name:"Boeing 767-200",iataTypeCode:"762"},{name:"Boeing 767-300",iataTypeCode:"763"},{name:"Boeing 767-400",iataTypeCode:"764"},{name:"Boeing 777",iataTypeCode:"777"},{name:"Boeing 777-200",iataTypeCode:"772"},{name:"Boeing 777-200LR",iataTypeCode:"77L"},{name:"Boeing 777-300",iataTypeCode:"773"},{name:"Boeing 777-300ER",iataTypeCode:"77W"},{name:"Boeing 787",iataTypeCode:"787"},{name:"Boeing 787-8",iataTypeCode:"788"},{name:"Boeing 787-9",iataTypeCode:"789"},{name:"Boeing 787-10",iataTypeCode:"781"},{name:"Canadair Challenger",iataTypeCode:"CCJ"},{name:"Canadair CL-44",iataTypeCode:"CL4"},{name:"Canadair Regional Jet 100",iataTypeCode:"CR1"},{name:"Canadair Regional Jet 200",iataTypeCode:"CR2"},{name:"Canadair Regional Jet 700",iataTypeCode:"CR7"},{name:"Canadair Regional Jet 705",iataTypeCode:"CRA"},{name:"Canadair Regional Jet 900",iataTypeCode:"CR9"},{name:"Canadair Regional Jet 1000",iataTypeCode:"CRK"},{name:"De Havilland Canada DHC-2 Beaver",iataTypeCode:"DHP"},{name:"De Havilland Canada DHC-2 Turbo-Beaver",iataTypeCode:"DHR"},{name:"De Havilland Canada DHC-3 Otter",iataTypeCode:"DHL"},{name:"De Havilland Canada DHC-4 Caribou",iataTypeCode:"DHC"},{name:"De Havilland Canada DHC-6 Twin Otter",iataTypeCode:"DHT"},{name:"De Havilland Canada DHC-7 Dash 7",iataTypeCode:"DH7"},{name:"De Havilland Canada DHC-8-100 Dash 8 / 8Q",iataTypeCode:"DH1"},{name:"De Havilland Canada DHC-8-200 Dash 8 / 8Q",iataTypeCode:"DH2"},{name:"De Havilland Canada DHC-8-300 Dash 8 / 8Q",iataTypeCode:"DH3"},{name:"De Havilland Canada DHC-8-400 Dash 8Q",iataTypeCode:"DH4"},{name:"De Havilland DH.104 Dove",iataTypeCode:"DHD"},{name:"De Havilland DH.114 Heron",iataTypeCode:"DHH"},{name:"Douglas DC-3",iataTypeCode:"D3F"},{name:"Douglas DC-6",iataTypeCode:"D6F"},{name:"Douglas DC-8-50",iataTypeCode:"D8T"},{name:"Douglas DC-8-62",iataTypeCode:"D8L"},{name:"Douglas DC-8-72",iataTypeCode:"D8Q"},{name:"Douglas DC-9-10",iataTypeCode:"D91"},{name:"Douglas DC-9-20",iataTypeCode:"D92"},{name:"Douglas DC-9-30",iataTypeCode:"D93"},{name:"Douglas DC-9-40",iataTypeCode:"D94"},{name:"Douglas DC-9-50",iataTypeCode:"D95"},{name:"Douglas DC-10",iataTypeCode:"D10"},{name:"Douglas DC-10-10",iataTypeCode:"D1X"},{name:"Douglas DC-10-30",iataTypeCode:"D1Y"},{name:"Embraer 170",iataTypeCode:"E70"},{name:"Embraer 175",iataTypeCode:"E75"},{name:"Embraer 190",iataTypeCode:"E90"},{name:"Embraer 195",iataTypeCode:"E95"},{name:"Embraer E190-E2",iataTypeCode:"290"},{name:"Embraer E195-E2",iataTypeCode:"295"},{name:"Embraer EMB.110 Bandeirante",iataTypeCode:"EMB"},{name:"Embraer EMB.120 Brasilia",iataTypeCode:"EM2"},{name:"Embraer Legacy 600",iataTypeCode:"ER3"},{name:"Embraer Phenom 100",iataTypeCode:"EP1"},{name:"Embraer Phenom 300",iataTypeCode:"EP3"},{name:"Embraer RJ135",iataTypeCode:"ER3"},{name:"Embraer RJ140",iataTypeCode:"ERD"},{name:"Embraer RJ145 Amazon",iataTypeCode:"ER4"},{name:"Ilyushin IL18",iataTypeCode:"IL8"},{name:"Ilyushin IL62",iataTypeCode:"IL6"},{name:"Ilyushin IL76",iataTypeCode:"IL7"},{name:"Ilyushin IL86",iataTypeCode:"ILW"},{name:"Ilyushin IL96-300",iataTypeCode:"I93"},{name:"Ilyushin IL114",iataTypeCode:"I14"},{name:"Lockheed L-182 / 282 / 382 (L-100) Hercules",iataTypeCode:"LOH"},{name:"Lockheed L-188 Electra",iataTypeCode:"LOE"},{name:"Lockheed L-1011 Tristar",iataTypeCode:"L10"},{name:"Lockheed L-1049 Super Constellation",iataTypeCode:"L49"},{name:"McDonnell Douglas MD11",iataTypeCode:"M11"},{name:"McDonnell Douglas MD80",iataTypeCode:"M80"},{name:"McDonnell Douglas MD81",iataTypeCode:"M81"},{name:"McDonnell Douglas MD82",iataTypeCode:"M82"},{name:"McDonnell Douglas MD83",iataTypeCode:"M83"},{name:"McDonnell Douglas MD87",iataTypeCode:"M87"},{name:"McDonnell Douglas MD88",iataTypeCode:"M88"},{name:"McDonnell Douglas MD90",iataTypeCode:"M90"},{name:"Sukhoi Superjet 100-95",iataTypeCode:"SU9"},{name:"Tupolev Tu-134",iataTypeCode:"TU3"},{name:"Tupolev Tu-154",iataTypeCode:"TU5"},{name:"Tupolev Tu-204",iataTypeCode:"T20"},{name:"Yakovlev Yak-40",iataTypeCode:"YK4"},{name:"Yakovlev Yak-42",iataTypeCode:"YK2"}],r=[{name:"Adelaide International Airport",iataCode:"ADL"},{name:"Adolfo Suarez Madrid-Barajas Airport",iataCode:"MAD"},{name:"Aeroparque Jorge Newbery Airport",iataCode:"AEP"},{name:"Afonso Pena International Airport",iataCode:"CWB"},{name:"Alfonso Bonilla Aragon International Airport",iataCode:"CLO"},{name:"Amsterdam Airport Schiphol",iataCode:"AMS"},{name:"Arturo Merino Benitez International Airport",iataCode:"SCL"},{name:"Auckland International Airport",iataCode:"AKL"},{name:"Beijing Capital International Airport",iataCode:"PEK"},{name:"Belem Val de Cans International Airport",iataCode:"BEL"},{name:"Belo Horizonte Tancredo Neves International Airport",iataCode:"CNF"},{name:"Berlin-Tegel Airport",iataCode:"TXL"},{name:"Bole International Airport",iataCode:"ADD"},{name:"Brasilia-Presidente Juscelino Kubitschek International Airport",iataCode:"BSB"},{name:"Brisbane International Airport",iataCode:"BNE"},{name:"Brussels Airport",iataCode:"BRU"},{name:"Cairns Airport",iataCode:"CNS"},{name:"Cairo International Airport",iataCode:"CAI"},{name:"Canberra Airport",iataCode:"CBR"},{name:"Capetown International Airport",iataCode:"CPT"},{name:"Charles de Gaulle International Airport",iataCode:"CDG"},{name:"Charlotte Douglas International Airport",iataCode:"CLT"},{name:"Chengdu Shuangliu International Airport",iataCode:"CTU"},{name:"Chhatrapati Shivaji International Airport",iataCode:"BOM"},{name:"Chicago O'Hare International Airport",iataCode:"ORD"},{name:"Chongqing Jiangbei International Airport",iataCode:"CKG"},{name:"Christchurch International Airport",iataCode:"CHC"},{name:"Copenhagen Kastrup Airport",iataCode:"CPH"},{name:"Dallas Fort Worth International Airport",iataCode:"DFW"},{name:"Daniel K. Inouye International Airport",iataCode:"HNL"},{name:"Denver International Airport",iataCode:"DEN"},{name:"Don Mueang International Airport",iataCode:"DMK"},{name:"Dubai International Airport",iataCode:"DXB"},{name:"Dublin Airport",iataCode:"DUB"},{name:"Dusseldorf Airport",iataCode:"DUS"},{name:"El Dorado International Airport",iataCode:"BOG"},{name:"Eleftherios Venizelos International Airport",iataCode:"ATH"},{name:"Faa'a International Airport",iataCode:"PPT"},{name:"Fort Lauderdale Hollywood International Airport",iataCode:"FLL"},{name:"Fortaleza Pinto Martins International Airport",iataCode:"FOR"},{name:"Frankfurt am Main Airport",iataCode:"FRA"},{name:"George Bush Intercontinental Houston Airport",iataCode:"IAH"},{name:"Gold Coast Airport",iataCode:"OOL"},{name:"Guarulhos - Governador Andre Franco Montoro International Airport",iataCode:"GRU"},{name:"Hartsfield-Jackson Atlanta International Airport",iataCode:"ATL"},{name:"Helsinki Vantaa Airport",iataCode:"HEL"},{name:"Hobart International Airport",iataCode:"HBA"},{name:"Hong Kong International Airport",iataCode:"HKG"},{name:"Houari Boumediene Airport",iataCode:"ALG"},{name:"Hurgada International Airport",iataCode:"HRG"},{name:"Incheon International Airport",iataCode:"ICN"},{name:"Indira Gandhi International Airport",iataCode:"DEL"},{name:"Istanbul Airport",iataCode:"IST"},{name:"Jacksons International Airport",iataCode:"POM"},{name:"Jeju International Airport",iataCode:"CJU"},{name:"John F Kennedy International Airport",iataCode:"JFK"},{name:"Jorge Chavez International Airport",iataCode:"LIM"},{name:"Jose Maria Cordova International Airport",iataCode:"MDE"},{name:"Josep Tarradellas Barcelona-El Prat Airport",iataCode:"BCN"},{name:"Kahului Airport",iataCode:"OGG"},{name:"King Abdulaziz International Airport",iataCode:"JED"},{name:"Kuala Lumpur International Airport",iataCode:"KUL"},{name:"Kunming Changshui International Airport",iataCode:"KMG"},{name:"La Tontouta International Airport",iataCode:"NOU"},{name:"Leonardo da Vinci-Fiumicino Airport",iataCode:"FCO"},{name:"London Heathrow Airport",iataCode:"LHR"},{name:"Los Angeles International Airport",iataCode:"LAX"},{name:"McCarran International Airport",iataCode:"LAS"},{name:"Melbourne International Airport",iataCode:"MEL"},{name:"Mexico City International Airport",iataCode:"MEX"},{name:"Miami International Airport",iataCode:"MIA"},{name:"Ministro Pistarini International Airport",iataCode:"EZE"},{name:"Minneapolis-St Paul International/Wold-Chamberlain Airport",iataCode:"MSP"},{name:"Mohammed V International Airport",iataCode:"CMN"},{name:"Moscow Domodedovo Airport",iataCode:"DME"},{name:"Munich Airport",iataCode:"MUC"},{name:"Murtala Muhammed International Airport",iataCode:"LOS"},{name:"Nadi International Airport",iataCode:"NAN"},{name:"Nairobi Jomo Kenyatta International Airport",iataCode:"NBO"},{name:"Narita International Airport",iataCode:"NRT"},{name:"Newark Liberty International Airport",iataCode:"EWR"},{name:"Ninoy Aquino International Airport",iataCode:"MNL"},{name:"Noumea Magenta Airport",iataCode:"GEA"},{name:"O. R. Tambo International Airport",iataCode:"JNB"},{name:"Orlando International Airport",iataCode:"MCO"},{name:"Oslo Lufthavn",iataCode:"OSL"},{name:"Perth Airport",iataCode:"PER"},{name:"Phoenix Sky Harbor International Airport",iataCode:"PHX"},{name:"Recife Guararapes-Gilberto Freyre International Airport",iataCode:"REC"},{name:"Rio de Janeiro Galeao International Airport",iataCode:"GIG"},{name:"Salgado Filho International Airport",iataCode:"POA"},{name:"Salvador Deputado Luis Eduardo Magalhaes International Airport",iataCode:"SSA"},{name:"San Francisco International Airport",iataCode:"SFO"},{name:"Santos Dumont Airport",iataCode:"SDU"},{name:"Sao Paulo-Congonhas Airport",iataCode:"CGH"},{name:"Seattle Tacoma International Airport",iataCode:"SEA"},{name:"Shanghai Hongqiao International Airport",iataCode:"SHA"},{name:"Shanghai Pudong International Airport",iataCode:"PVG"},{name:"Shenzhen Bao'an International Airport",iataCode:"SZX"},{name:"Sheremetyevo International Airport",iataCode:"SVO"},{name:"Singapore Changi Airport",iataCode:"SIN"},{name:"Soekarno-Hatta International Airport",iataCode:"CGK"},{name:'Stockholm-Arlanda Airport"',iataCode:"ARN"},{name:"Suvarnabhumi Airport",iataCode:"BKK"},{name:"Sydney Kingsford Smith International Airport",iataCode:"SYD"},{name:"Taiwan Taoyuan International Airport",iataCode:"TPE"},{name:"Tan Son Nhat International Airport",iataCode:"SGN"},{name:"Tokyo Haneda International Airport",iataCode:"HND"},{name:"Toronto Pearson International Airport",iataCode:"YYZ"},{name:"Tunis Carthage International Airport",iataCode:"TUN"},{name:"Vancouver International Airport",iataCode:"YVR"},{name:"Vienna International Airport",iataCode:"VIE"},{name:"Viracopos International Airport",iataCode:"VCP"},{name:"Vnukovo International Airport",iataCode:"VKO"},{name:"Wellington International Airport",iataCode:"WLG"},{name:"Xi'an Xianyang International Airport",iataCode:"XIY"},{name:"Zhukovsky International Airport",iataCode:"ZIA"},{name:"Zurich Airport",iataCode:"ZRH"}],Za={airline:e,airplane:a,airport:r},o=Za,n=["American black bear","Asian black bear","Brown bear","Giant panda","Polar bear","Sloth bear","Spectacled bear","Sun bear"],i=["Abert's Towhee","Acadian Flycatcher","Acorn Woodpecker","Alder Flycatcher","Aleutian Tern","Allen's Hummingbird","Altamira Oriole","American Avocet","American Bittern","American Black Duck","American Coot","American Crow","American Dipper","American Golden-Plover","American Goldfinch","American Kestrel","American Oystercatcher","American Pipit","American Redstart","American Robin","American Tree Sparrow","American White Pelican","American Wigeon","American Woodcock","Ancient Murrelet","Anhinga","Anna's Hummingbird","Antillean Nighthawk","Antillean Palm Swift","Aplomado Falcon","Arctic Loon","Arctic Tern","Arctic Warbler","Ash-throated Flycatcher","Ashy Storm-Petrel","Asian Brown Flycatcher","Atlantic Puffin","Audubon's Oriole","Audubon's Shearwater","Aztec Thrush","Azure Gallinule","Bachman's Sparrow","Bachman's Warbler","Bahama Mockingbird","Bahama Swallow","Bahama Woodstar","Baikal Teal","Baird's Sandpiper","Baird's Sparrow","Bald Eagle","Baltimore Oriole","Bananaquit","Band-rumped Storm-Petrel","Band-tailed Gull","Band-tailed Pigeon","Bank Swallow","Bar-tailed Godwit","Barn Owl","Barn Swallow","Barnacle Goose","Barred Owl","Barrow's Goldeneye","Bay-breasted Warbler","Bean Goose","Bell's Vireo","Belted Kingfisher","Bendire's Thrasher","Berylline Hummingbird","Bewick's Wren","Bicknell's Thrush","Black Catbird","Black Guillemot","Black Noddy","Black Oystercatcher","Black Phoebe","Black Rail","Black Rosy-Finch","Black Scoter","Black Skimmer","Black Storm-Petrel","Black Swift","Black Tern","Black Turnstone","Black Vulture","Black-and-white Warbler","Black-backed Wagtail","Black-backed Woodpecker","Black-bellied Plover","Black-bellied Whistling-Duck","Black-billed Cuckoo","Black-billed Magpie","Black-browed Albatross","Black-capped Chickadee","Black-capped Gnatcatcher","Black-capped Petrel","Black-capped Vireo","Black-chinned Hummingbird","Black-chinned Sparrow","Black-crowned Night-Heron","Black-faced Grassquit","Black-footed Albatross","Black-headed Grosbeak","Black-headed Gull","Black-legged Kittiwake","Black-necked Stilt","Black-tailed Gnatcatcher","Black-tailed Godwit","Black-tailed Gull","Black-throated Blue Warbler","Black-throated Gray Warbler","Black-throated Green Warbler","Black-throated Sparrow","Black-vented Oriole","Black-vented Shearwater","Black-whiskered Vireo","Black-winged Stilt","Blackburnian Warbler","Blackpoll Warbler","Blue Bunting","Blue Grosbeak","Blue Grouse","Blue Jay","Blue Mockingbird","Blue-footed Booby","Blue-gray Gnatcatcher","Blue-headed Vireo","Blue-throated Hummingbird","Blue-winged Teal","Blue-winged Warbler","Bluethroat","Boat-tailed Grackle","Bobolink","Bohemian Waxwing","Bonaparte's Gull","Boreal Chickadee","Boreal Owl","Botteri's Sparrow","Brambling","Brandt's Cormorant","Brant","Brewer's Blackbird","Brewer's Sparrow","Bridled Tern","Bridled Titmouse","Bristle-thighed Curlew","Broad-billed Hummingbird","Broad-billed Sandpiper","Broad-tailed Hummingbird","Broad-winged Hawk","Bronzed Cowbird","Brown Booby","Brown Creeper","Brown Jay","Brown Noddy","Brown Pelican","Brown Shrike","Brown Thrasher","Brown-capped Rosy-Finch","Brown-chested Martin","Brown-crested Flycatcher","Brown-headed Cowbird","Brown-headed Nuthatch","Budgerigar","Buff-bellied Hummingbird","Buff-breasted Flycatcher","Buff-breasted Sandpiper","Buff-collared Nightjar","Bufflehead","Buller's Shearwater","Bullock's Oriole","Bumblebee Hummingbird","Burrowing Owl","Bushtit","Cactus Wren","California Condor","California Gnatcatcher","California Gull","California Quail","California Thrasher","California Towhee","Calliope Hummingbird","Canada Goose","Canada Warbler","Canvasback","Canyon Towhee","Canyon Wren","Cape May Warbler","Caribbean Elaenia","Carolina Chickadee","Carolina Parakeet","Carolina Wren","Caspian Tern","Cassin's Auklet","Cassin's Finch","Cassin's Kingbird","Cassin's Sparrow","Cassin's Vireo","Cattle Egret","Cave Swallow","Cedar Waxwing","Cerulean Warbler","Chestnut-backed Chickadee","Chestnut-collared Longspur","Chestnut-sided Warbler","Chihuahuan Raven","Chimney Swift","Chinese Egret","Chipping Sparrow","Chuck-will's-widow","Chukar","Cinnamon Hummingbird","Cinnamon Teal","Citrine Wagtail","Clapper Rail","Clark's Grebe","Clark's Nutcracker","Clay-colored Robin","Clay-colored Sparrow","Cliff Swallow","Colima Warbler","Collared Forest-Falcon","Collared Plover","Common Black-Hawk","Common Chaffinch","Common Crane","Common Cuckoo","Common Eider","Common Goldeneye","Common Grackle","Common Greenshank","Common Ground-Dove","Common House-Martin","Common Loon","Common Merganser","Common Moorhen","Common Murre","Common Nighthawk","Common Pauraque","Common Pochard","Common Poorwill","Common Raven","Common Redpoll","Common Ringed Plover","Common Rosefinch","Common Sandpiper","Common Snipe","Common Swift","Common Tern","Common Yellowthroat","Connecticut Warbler","Cook's Petrel","Cooper's Hawk","Cordilleran Flycatcher","Corn Crake","Cory's Shearwater","Costa's Hummingbird","Couch's Kingbird","Crane Hawk","Craveri's Murrelet","Crescent-chested Warbler","Crested Auklet","Crested Caracara","Crested Myna","Crimson-collared Grosbeak","Crissal Thrasher","Cuban Martin","Curlew Sandpiper","Curve-billed Thrasher","Dark-eyed Junco","Dickcissel","Double-crested Cormorant","Double-striped Thick-knee","Dovekie","Downy Woodpecker","Dunlin","Dusky Flycatcher","Dusky Thrush","Dusky Warbler","Dusky-capped Flycatcher","Eared Grebe","Eared Trogon","Eastern Bluebird","Eastern Kingbird","Eastern Meadowlark","Eastern Phoebe","Eastern Screech-Owl","Eastern Towhee","Eastern Wood-Pewee","Elegant Tern","Elegant Trogon","Elf Owl","Emperor Goose","Eskimo Curlew","Eurasian Blackbird","Eurasian Bullfinch","Eurasian Collared-Dove","Eurasian Coot","Eurasian Curlew","Eurasian Dotterel","Eurasian Hobby","Eurasian Jackdaw","Eurasian Kestrel","Eurasian Oystercatcher","Eurasian Siskin","Eurasian Tree Sparrow","Eurasian Wigeon","Eurasian Woodcock","Eurasian Wryneck","European Golden-Plover","European Starling","European Storm-Petrel","European Turtle-Dove","Evening Grosbeak","Eyebrowed Thrush","Falcated Duck","Fan-tailed Warbler","Far Eastern Curlew","Ferruginous Hawk","Ferruginous Pygmy-Owl","Field Sparrow","Fieldfare","Fish Crow","Five-striped Sparrow","Flame-colored Tanager","Flammulated Owl","Flesh-footed Shearwater","Florida Scrub-Jay","Fork-tailed Flycatcher","Fork-tailed Storm-Petrel","Fork-tailed Swift","Forster's Tern","Fox Sparrow","Franklin's Gull","Fulvous Whistling-Duck","Gadwall","Gambel's Quail","Garganey","Gila Woodpecker","Gilded Flicker","Glaucous Gull","Glaucous-winged Gull","Glossy Ibis","Golden Eagle","Golden-cheeked Warbler","Golden-crowned Kinglet","Golden-crowned Sparrow","Golden-crowned Warbler","Golden-fronted Woodpecker","Golden-winged Warbler","Grace's Warbler","Grasshopper Sparrow","Gray Bunting","Gray Catbird","Gray Flycatcher","Gray Hawk","Gray Jay","Gray Kingbird","Gray Partridge","Gray Silky-flycatcher","Gray Vireo","Gray Wagtail","Gray-breasted Martin","Gray-cheeked Thrush","Gray-crowned Rosy-Finch","Gray-crowned Yellowthroat","Gray-headed Chickadee","Gray-spotted Flycatcher","Gray-tailed Tattler","Great Auk","Great Black-backed Gull","Great Blue Heron","Great Cormorant","Great Crested Flycatcher","Great Egret","Great Frigatebird","Great Gray Owl","Great Horned Owl","Great Kiskadee","Great Knot","Great Skua","Great Spotted Woodpecker","Great-tailed Grackle","Greater Flamingo","Greater Pewee","Greater Prairie-chicken","Greater Roadrunner","Greater Scaup","Greater Shearwater","Greater White-fronted Goose","Greater Yellowlegs","Green Heron","Green Jay","Green Kingfisher","Green Sandpiper","Green Violet-ear","Green-breasted Mango","Green-tailed Towhee","Green-winged Teal","Greenish Elaenia","Groove-billed Ani","Gull-billed Tern","Gyrfalcon","Hairy Woodpecker","Hammond's Flycatcher","Harlequin Duck","Harris's Hawk","Harris's Sparrow","Hawfinch","Heermann's Gull","Henslow's Sparrow","Hepatic Tanager","Herald Petrel","Hermit Thrush","Hermit Warbler","Herring Gull","Himalayan Snowcock","Hoary Redpoll","Hooded Merganser","Hooded Oriole","Hooded Warbler","Hook-billed Kite","Hoopoe","Horned Grebe","Horned Lark","Horned Puffin","House Finch","House Sparrow","House Wren","Hudsonian Godwit","Hutton's Vireo","Iceland Gull","Inca Dove","Indigo Bunting","Island Scrub-Jay","Ivory Gull","Ivory-billed Woodpecker","Jabiru","Jack Snipe","Jungle Nightjar","Juniper Titmouse","Kentucky Warbler","Key West Quail-Dove","Killdeer","King Eider","King Rail","Kirtland's Warbler","Kittlitz's Murrelet","La Sagra's Flycatcher","Labrador Duck","Ladder-backed Woodpecker","Lanceolated Warbler","Lapland Longspur","Large-billed Tern","Lark Bunting","Lark Sparrow","Laughing Gull","Lawrence's Goldfinch","Laysan Albatross","Lazuli Bunting","Le Conte's Sparrow","Le Conte's Thrasher","Leach's Storm-Petrel","Least Auklet","Least Bittern","Least Flycatcher","Least Grebe","Least Sandpiper","Least Storm-Petrel","Least Tern","Lesser Black-backed Gull","Lesser Frigatebird","Lesser Goldfinch","Lesser Nighthawk","Lesser Prairie-chicken","Lesser Scaup","Lesser White-fronted Goose","Lesser Yellowlegs","Lewis's Woodpecker","Limpkin","Lincoln's Sparrow","Little Blue Heron","Little Bunting","Little Curlew","Little Egret","Little Gull","Little Ringed Plover","Little Shearwater","Little Stint","Loggerhead Kingbird","Loggerhead Shrike","Long-billed Curlew","Long-billed Dowitcher","Long-billed Murrelet","Long-billed Thrasher","Long-eared Owl","Long-tailed Jaeger","Long-toed Stint","Louisiana Waterthrush","Lucifer Hummingbird","Lucy's Warbler","MacGillivray's Warbler","Magnificent Frigatebird","Magnificent Hummingbird","Magnolia Warbler","Mallard","Mangrove Cuckoo","Manx Shearwater","Marbled Godwit","Marbled Murrelet","Marsh Sandpiper","Marsh Wren","Masked Booby","Masked Duck","Masked Tityra","McCown's Longspur","McKay's Bunting","Merlin","Mew Gull","Mexican Chickadee","Mexican Jay","Middendorff's Grasshopper-Warbler","Mississippi Kite","Mongolian Plover","Monk Parakeet","Montezuma Quail","Mottled Duck","Mottled Owl","Mottled Petrel","Mountain Bluebird","Mountain Chickadee","Mountain Plover","Mountain Quail","Mourning Dove","Mourning Warbler","Mugimaki Flycatcher","Murphy's Petrel","Muscovy Duck","Mute Swan","Narcissus Flycatcher","Nashville Warbler","Nelson's Sharp-tailed Sparrow","Neotropic Cormorant","Northern Beardless-Tyrannulet","Northern Bobwhite","Northern Cardinal","Northern Flicker","Northern Fulmar","Northern Gannet","Northern Goshawk","Northern Harrier","Northern Hawk Owl","Northern Jacana","Northern Lapwing","Northern Mockingbird","Northern Parula","Northern Pintail","Northern Pygmy-Owl","Northern Rough-winged Swallow","Northern Saw-whet Owl","Northern Shoveler","Northern Shrike","Northern Waterthrush","Northern Wheatear","Northwestern Crow","Nuttall's Woodpecker","Nutting's Flycatcher","Oak Titmouse","Oldsquaw","Olive Sparrow","Olive Warbler","Olive-backed Pipit","Olive-sided Flycatcher","Orange-crowned Warbler","Orchard Oriole","Oriental Cuckoo","Oriental Greenfinch","Oriental Pratincole","Oriental Scops-Owl","Oriental Turtle-Dove","Osprey","Ovenbird","Pacific Golden-Plover","Pacific Loon","Pacific-slope Flycatcher","Paint-billed Crake","Painted Bunting","Painted Redstart","Pallas's Bunting","Palm Warbler","Parakeet Auklet","Parasitic Jaeger","Passenger Pigeon","Pechora Pipit","Pectoral Sandpiper","Pelagic Cormorant","Peregrine Falcon","Phainopepla","Philadelphia Vireo","Pied-billed Grebe","Pigeon Guillemot","Pileated Woodpecker","Pin-tailed Snipe","Pine Bunting","Pine Grosbeak","Pine Siskin","Pine Warbler","Pink-footed Goose","Pink-footed Shearwater","Pinyon Jay","Piping Plover","Plain Chachalaca","Plain-capped Starthroat","Plumbeous Vireo","Pomarine Jaeger","Prairie Falcon","Prairie Warbler","Prothonotary Warbler","Purple Finch","Purple Gallinule","Purple Martin","Purple Sandpiper","Pygmy Nuthatch","Pyrrhuloxia","Razorbill","Red Crossbill","Red Knot","Red Phalarope","Red-bellied Woodpecker","Red-billed Pigeon","Red-billed Tropicbird","Red-breasted Flycatcher","Red-breasted Merganser","Red-breasted Nuthatch","Red-breasted Sapsucker","Red-cockaded Woodpecker","Red-crowned Parrot","Red-eyed Vireo","Red-faced Cormorant","Red-faced Warbler","Red-flanked Bluetail","Red-footed Booby","Red-headed Woodpecker","Red-legged Kittiwake","Red-naped Sapsucker","Red-necked Grebe","Red-necked Phalarope","Red-necked Stint","Red-shouldered Hawk","Red-tailed Hawk","Red-tailed Tropicbird","Red-throated Loon","Red-throated Pipit","Red-whiskered Bulbul","Red-winged Blackbird","Reddish Egret","Redhead","Redwing","Reed Bunting","Rhinoceros Auklet","Ring-billed Gull","Ring-necked Duck","Ring-necked Pheasant","Ringed Kingfisher","Roadside Hawk","Rock Dove","Rock Ptarmigan","Rock Sandpiper","Rock Wren","Rose-breasted Grosbeak","Rose-throated Becard","Roseate Spoonbill","Roseate Tern","Ross's Goose","Ross's Gull","Rough-legged Hawk","Royal Tern","Ruby-crowned Kinglet","Ruby-throated Hummingbird","Ruddy Duck","Ruddy Ground-Dove","Ruddy Quail-Dove","Ruddy Turnstone","Ruff","Ruffed Grouse","Rufous Hummingbird","Rufous-backed Robin","Rufous-capped Warbler","Rufous-crowned Sparrow","Rufous-winged Sparrow","Rustic Bunting","Rusty Blackbird","Sabine's Gull","Sage Grouse","Sage Sparrow","Sage Thrasher","Saltmarsh Sharp-tailed Sparrow","Sanderling","Sandhill Crane","Sandwich Tern","Savannah Sparrow","Say's Phoebe","Scaled Quail","Scaly-naped Pigeon","Scarlet Ibis","Scarlet Tanager","Scissor-tailed Flycatcher","Scott's Oriole","Seaside Sparrow","Sedge Wren","Semipalmated Plover","Semipalmated Sandpiper","Sharp-shinned Hawk","Sharp-tailed Grouse","Sharp-tailed Sandpiper","Shiny Cowbird","Short-billed Dowitcher","Short-eared Owl","Short-tailed Albatross","Short-tailed Hawk","Short-tailed Shearwater","Shy Albatross","Siberian Accentor","Siberian Blue Robin","Siberian Flycatcher","Siberian Rubythroat","Sky Lark","Slate-throated Redstart","Slaty-backed Gull","Slender-billed Curlew","Smew","Smith's Longspur","Smooth-billed Ani","Snail Kite","Snow Bunting","Snow Goose","Snowy Egret","Snowy Owl","Snowy Plover","Solitary Sandpiper","Song Sparrow","Sooty Shearwater","Sooty Tern","Sora","South Polar Skua","Southern Martin","Spectacled Eider","Spoonbill Sandpiper","Spot-billed Duck","Spot-breasted Oriole","Spotted Dove","Spotted Owl","Spotted Rail","Spotted Redshank","Spotted Sandpiper","Spotted Towhee","Sprague's Pipit","Spruce Grouse","Stejneger's Petrel","Steller's Eider","Steller's Jay","Steller's Sea-Eagle","Stilt Sandpiper","Stonechat","Streak-backed Oriole","Streaked Shearwater","Strickland's Woodpecker","Stripe-headed Tanager","Sulphur-bellied Flycatcher","Summer Tanager","Surf Scoter","Surfbird","Swainson's Hawk","Swainson's Thrush","Swainson's Warbler","Swallow-tailed Kite","Swamp Sparrow","Tamaulipas Crow","Tawny-shouldered Blackbird","Temminck's Stint","Tennessee Warbler","Terek Sandpiper","Thayer's Gull","Thick-billed Kingbird","Thick-billed Murre","Thick-billed Parrot","Thick-billed Vireo","Three-toed Woodpecker","Townsend's Solitaire","Townsend's Warbler","Tree Pipit","Tree Swallow","Tricolored Blackbird","Tricolored Heron","Tropical Kingbird","Tropical Parula","Trumpeter Swan","Tufted Duck","Tufted Flycatcher","Tufted Puffin","Tufted Titmouse","Tundra Swan","Turkey Vulture","Upland Sandpiper","Varied Bunting","Varied Thrush","Variegated Flycatcher","Vaux's Swift","Veery","Verdin","Vermilion Flycatcher","Vesper Sparrow","Violet-crowned Hummingbird","Violet-green Swallow","Virginia Rail","Virginia's Warbler","Wandering Albatross","Wandering Tattler","Warbling Vireo","Wedge-rumped Storm-Petrel","Wedge-tailed Shearwater","Western Bluebird","Western Grebe","Western Gull","Western Kingbird","Western Meadowlark","Western Reef-Heron","Western Sandpiper","Western Screech-Owl","Western Scrub-Jay","Western Tanager","Western Wood-Pewee","Whimbrel","Whip-poor-will","Whiskered Auklet","Whiskered Screech-Owl","Whiskered Tern","White Ibis","White Wagtail","White-breasted Nuthatch","White-cheeked Pintail","White-chinned Petrel","White-collared Seedeater","White-collared Swift","White-crowned Pigeon","White-crowned Sparrow","White-eared Hummingbird","White-eyed Vireo","White-faced Ibis","White-faced Storm-Petrel","White-headed Woodpecker","White-rumped Sandpiper","White-tailed Eagle","White-tailed Hawk","White-tailed Kite","White-tailed Ptarmigan","White-tailed Tropicbird","White-throated Needletail","White-throated Robin","White-throated Sparrow","White-throated Swift","White-tipped Dove","White-winged Crossbill","White-winged Dove","White-winged Parakeet","White-winged Scoter","White-winged Tern","Whooper Swan","Whooping Crane","Wild Turkey","Willet","Williamson's Sapsucker","Willow Flycatcher","Willow Ptarmigan","Wilson's Phalarope","Wilson's Plover","Wilson's Storm-Petrel","Wilson's Warbler","Winter Wren","Wood Duck","Wood Sandpiper","Wood Stork","Wood Thrush","Wood Warbler","Worm-eating Warbler","Worthen's Sparrow","Wrentit","Xantus's Hummingbird","Xantus's Murrelet","Yellow Bittern","Yellow Grosbeak","Yellow Rail","Yellow Wagtail","Yellow Warbler","Yellow-bellied Flycatcher","Yellow-bellied Sapsucker","Yellow-billed Cuckoo","Yellow-billed Loon","Yellow-billed Magpie","Yellow-breasted Bunting","Yellow-breasted Chat","Yellow-crowned Night-Heron","Yellow-eyed Junco","Yellow-faced Grassquit","Yellow-footed Gull","Yellow-green Vireo","Yellow-headed Blackbird","Yellow-legged Gull","Yellow-nosed Albatross","Yellow-rumped Warbler","Yellow-throated Vireo","Yellow-throated Warbler","Yucatan Vireo","Zenaida Dove","Zone-tailed Hawk"],t=["Abyssinian","American Bobtail","American Curl","American Shorthair","American Wirehair","Balinese","Bengal","Birman","Bombay","British Shorthair","Burmese","Chartreux","Chausie","Cornish Rex","Devon Rex","Donskoy","Egyptian Mau","Exotic Shorthair","Havana","Highlander","Himalayan","Japanese Bobtail","Korat","Kurilian Bobtail","LaPerm","Maine Coon","Manx","Minskin","Munchkin","Nebelung","Norwegian Forest Cat","Ocicat","Ojos Azules","Oriental","Persian","Peterbald","Pixiebob","Ragdoll","Russian Blue","Savannah","Scottish Fold","Selkirk Rex","Serengeti","Siamese","Siberian","Singapura","Snowshoe","Sokoke","Somali","Sphynx","Thai","Tonkinese","Toyger","Turkish Angora","Turkish Van"],l=["Amazon River Dolphin","Arnoux's Beaked Whale","Atlantic Humpbacked Dolphin","Atlantic Spotted Dolphin","Atlantic White-Sided Dolphin","Australian Snubfin Dolphin","Australian humpback Dolphin","Blue Whale","Bottlenose Dolphin","Bryde’s whale","Burrunan Dolphin","Chilean Dolphin","Chinese River Dolphin","Chinese White Dolphin","Clymene Dolphin","Commerson’s Dolphin","Costero","Dusky Dolphin","False Killer Whale","Fin Whale","Fraser’s Dolphin","Ganges River Dolphin","Guiana Dolphin","Heaviside’s Dolphin","Hector’s Dolphin","Hourglass Dolphin","Humpback whale","Indo-Pacific Bottlenose Dolphin","Indo-Pacific Hump-backed Dolphin","Irrawaddy Dolphin","Killer Whale (Orca)","La Plata Dolphin","Long-Beaked Common Dolphin","Long-finned Pilot Whale","Longman's Beaked Whale","Melon-headed Whale","Northern Rightwhale Dolphin","Omura’s whale","Pacific White-Sided Dolphin","Pantropical Spotted Dolphin","Peale’s Dolphin","Pygmy Killer Whale","Risso’s Dolphin","Rough-Toothed Dolphin","Sei Whale","Short-Beaked Common Dolphin","Short-finned Pilot Whale","Southern Bottlenose Whale","Southern Rightwhale Dolphin","Sperm Whale","Spinner Dolphin","Striped Dolphin","Tucuxi","White-Beaked Dolphin"],s=["Aberdeen Angus","Abergele","Abigar","Abondance","Abyssinian Shorthorned Zebu","Aceh","Achham","Adamawa","Adaptaur","Afar","Africangus","Afrikaner","Agerolese","Alambadi","Alatau","Albanian","Albera","Alderney","Alentejana","Aleutian wild cattle","Aliad Dinka","Alistana-Sanabresa","Allmogekor","Alur","American","American Angus","American Beef Friesian","American Brown Swiss","American Milking Devon","American White Park","Amerifax","Amrit Mahal","Amsterdam Island cattle","Anatolian Black","Andalusian Black","Andalusian Blond","Andalusian Grey","Angeln","Angoni","Ankina","Ankole","Ankole-Watusi","Aracena","Arado","Argentine Criollo","Argentine Friesian","Armorican","Arouquesa","Arsi","Asturian Mountain","Asturian Valley","Aubrac","Aulie-Ata","Aure et Saint-Girons","Australian Braford","Australian Brangus","Australian Charbray","Australian Friesian Sahiwal","Australian Lowline","Australian Milking Zebu","Australian Shorthorn","Austrian Simmental","Austrian Yellow","Avileña-Negra Ibérica","Avétonou","Aweil Dinka","Ayrshire","Azaouak","Azebuado","Azerbaijan Zebu","Azores","Bachaur cattle","Baherie cattle","Bakosi cattle","Balancer","Baoule","Bargur cattle","Barrosã","Barzona","Bazadaise","Beef Freisian","Beefalo","Beefmaker","Beefmaster","Begayt","Belgian Blue","Belgian Red","Belgian Red Pied","Belgian White-and-Red","Belmont Red","Belted Galloway","Bernese","Berrenda cattle","Betizu","Bianca Modenese","Blaarkop","Black Angus","Black Baldy","Black Hereford","Blanca Cacereña","Blanco Orejinegro BON","Blonde d'Aquitaine","Blue Albion","Blue Grey","Bohuskulla","Bonsmara","Boran","Boškarin","Braford","Brahman","Brahmousin","Brangus","Braunvieh","Brava","Breed","British Friesian","British White","Brown Carpathian","Brown Caucasian","Brown Swiss","Bue Lingo","Burlina","Bushuyev","Butana cattle","Buša cattle","Cachena","Caldelana","Camargue","Campbell Island cattle","Canadian Speckle Park","Canadienne","Canaria","Canchim","Caracu","Carinthian Blondvieh","Carora","Charbray","Charolais","Chateaubriand","Chiangus","Chianina","Chillingham cattle","Chinese Black Pied","Cholistani","Coloursided White Back","Commercial","Corriente","Corsican cattle","Costeño con Cuernos","Crioulo Lageano","Cárdena Andaluza","Dajal","Dangi cattle","Danish Black-Pied","Danish Jersey","Danish Red","Deep Red cattle","Deoni","Devon","Dexter cattle","Dhanni","Doayo cattle","Doela","Drakensberger","Droughtmaster","Dulong'","Dutch Belted","Dutch Friesian","Dwarf Lulu","Dølafe","East Anatolian Red","Eastern Finncattle","Eastern Red Polled","Enderby Island cattle","English Longhorn","Ennstaler Bergscheck","Estonian Holstein","Estonian Native","Estonian Red cattle","Finncattle","Finnish Ayrshire","Finnish Holstein-Friesian","Fjäll","Fleckvieh","Florida Cracker cattle","Fogera","French Simmental","Fribourgeoise","Friesian Red and White","Fulani Sudanese","Fēng Cattle","Galician Blond","Galloway cattle","Gangatiri","Gaolao","Garvonesa","Gascon cattle","Gelbvieh","Georgian Mountain cattle","German Angus","German Black Pied Dairy","German Black Pied cattle","German Red Pied","Gir","Glan cattle","Gloucester","Gobra","Greek Shorthorn","Greek Steppe","Greyman cattle","Gudali","Guernsey cattle","Guzerá","Hallikar4","Hanwoo","Hariana cattle","Hartón del Valle","Harzer Rotvieh","Hays Converter","Heck cattle","Hereford","Herens","Highland cattle","Hinterwald","Holando-Argentino","Holstein Friesian cattle","Horro","Hungarian Grey","Huáng Cattle","Hybridmaster","Iberian cattle","Icelandic","Illawarra cattle","Improved Red and White","Indo-Brazilian","Irish Moiled","Israeli Holstein","Israeli Red","Istoben cattle","Istrian cattle","Jamaica Black","Jamaica Hope","Jamaica Red","Japanese Brown","Jarmelista","Javari cattle","Jersey cattle","Jutland cattle","Kabin Buri cattle","Kalmyk cattle","Kamphaeng Saen cattle","Kangayam","Kankrej","Karan Swiss","Kasaragod Dwarf cattle","Kathiawadi","Kazakh Whiteheaded","Kenana cattle","Kenkatha cattle","Kerry cattle","Kherigarh","Khillari cattle","Kholomogory","Korat Wagyu","Kostroma cattle","Krishna Valley cattle","Kurgan cattle","Kuri","La Reina cattle","Lakenvelder cattle","Lampurger","Latvian Blue","Latvian Brown","Latvian Danish Red","Lebedyn","Levantina","Limia cattle","Limousin","Limpurger","Lincoln Red","Lineback","Lithuanian Black-and-White","Lithuanian Light Grey","Lithuanian Red","Lithuanian White-Backed","Lohani cattle","Lourdais","Lucerna cattle","Luing","Madagascar Zebu","Madura","Maine-Anjou","Malnad Gidda","Malvi","Mandalong Special","Mantequera Leonesa","Maramureş Brown","Marchigiana","Maremmana","Marinhoa","Maronesa","Masai","Mashona","Menorquina","Mertolenga","Meuse-Rhine-Issel","Mewati","Milking Shorthorn","Minhota","Mirandesa","Mirkadim","Mocăniţă","Mollie","Monchina","Mongolian","Montbéliarde","Morucha","Murboden","Murnau-Werdenfels","Murray Grey","Muturu","N'Dama","Nagori","Negra Andaluza","Nelore","Nguni","Nimari","Normande","North Bengal Grey","Northern Finncattle","Northern Shorthorn","Norwegian Red","Ongole","Original Simmental","Pajuna","Palmera","Pantaneiro","Parda Alpina","Parthenaise","Pasiega","Pembroke","Philippine Native","Pie Rouge des Plaines","Piedmontese cattle","Pineywoods","Pinzgauer","Pirenaica","Podolac","Podolica","Polish Black-and-White","Polish Red","Poll Shorthorn","Polled Hereford","Polled Shorthorn","Ponwar","Preta","Pulikulam","Punganur","Pustertaler Sprinzen","Qinchaun","Queensland Miniature Boran","RX3","Ramo Grande","Randall","Raramuri Criollo","Rathi","Raya","Red Angus","Red Brangus","Red Chittagong","Red Fulani","Red Gorbatov","Red Holstein","Red Kandhari","Red Mingrelian","Red Poll","Red Polled Østland","Red Sindhi","Retinta","Riggit Galloway","Ringamåla","Rohjan","Romagnola","Romanian Bălţata","Romanian Steppe Gray","Romosinuano","Russian Black Pied","Rätisches Grauvieh","Sahiwal","Salers","Salorn","Sanga","Sanhe","Santa Cruz","Santa Gertrudis","Sayaguesa","Schwyz","Selembu","Senepol","Serbian Pied","Serbian Steppe","Sheko","Shetland","Shorthorn","Siboney de Cuba","Simbrah","Simford","Simmental","Siri","South Devon","Spanish Fighting Bull","Speckle Park","Square Meater","Sussex","Swedish Friesian","Swedish Polled","Swedish Red Pied","Swedish Red Polled","Swedish Red-and-White","Tabapuã","Tarentaise","Tasmanian Grey","Tauros","Telemark","Texas Longhorn","Texon","Thai Black","Thai Fighting Bull","Thai Friesian","Thai Milking Zebu","Tharparkar","Tswana","Tudanca","Tuli","Tulim","Turkish Grey Steppe","Tux-Zillertal","Tyrol Grey","Ukrainian Grey","Umblachery","Valdostana Castana","Valdostana Pezzata Nera","Valdostana Pezzata Rossa","Vaynol","Vechur8","Vestland Fjord","Vestland Red Polled","Vianesa","Volinian Beef","Vorderwald","Vosgienne","Väneko","Waguli","Wagyu","Wangus","Welsh Black","Western Finncattle","White Cáceres","White Fulani","White Lamphun","White Park","Whitebred Shorthorn","Xingjiang Brown","Yakutian","Yanbian","Yanhuang","Yurino","Zebu","Évolène cattle","Żubroń"],d=["African Slender-snouted Crocodile","Alligator mississippiensis","American Crocodile","Australian Freshwater Crocodile","Black Caiman","Broad-snouted Caiman","Chinese Alligator","Cuban Crocodile","Cuvier’s Dwarf Caiman","Dwarf Crocodile","Gharial","Morelet’s Crocodile","Mugger Crocodile","New Guinea Freshwater Crocodile","Nile Crocodile","Orinoco Crocodile","Philippine Crocodile","Saltwater Crocodile","Schneider’s Smooth-fronted Caiman","Siamese Crocodile","Spectacled Caiman","Tomistoma","West African Crocodile","Yacare Caiman"],u=["Affenpinscher","Afghan Hound","Aidi","Airedale Terrier","Akbash","Akita","Alano Español","Alapaha Blue Blood Bulldog","Alaskan Husky","Alaskan Klee Kai","Alaskan Malamute","Alopekis","Alpine Dachsbracke","American Bulldog","American Bully","American Cocker Spaniel","American English Coonhound","American Foxhound","American Hairless Terrier","American Pit Bull Terrier","American Staffordshire Terrier","American Water Spaniel","Andalusian Hound","Anglo-Français de Petite Vénerie","Appenzeller Sennenhund","Ariegeois","Armant","Armenian Gampr dog","Artois Hound","Australian Cattle Dog","Australian Kelpie","Australian Shepherd","Australian Stumpy Tail Cattle Dog","Australian Terrier","Austrian Black and Tan Hound","Austrian Pinscher","Azawakh","Bakharwal dog","Banjara Hound","Barbado da Terceira","Barbet","Basenji","Basque Shepherd Dog","Basset Artésien Normand","Basset Bleu de Gascogne","Basset Fauve de Bretagne","Basset Hound","Bavarian Mountain Hound","Beagle","Beagle-Harrier","Bearded Collie","Beauceron","Bedlington Terrier","Belgian Shepherd","Bergamasco Shepherd","Berger Picard","Bernese Mountain Dog","Bhotia","Bichon Frisé","Billy","Black Mouth Cur","Black Norwegian Elkhound","Black Russian Terrier","Black and Tan Coonhound","Bloodhound","Blue Lacy","Blue Picardy Spaniel","Bluetick Coonhound","Boerboel","Bohemian Shepherd","Bolognese","Border Collie","Border Terrier","Borzoi","Bosnian Coarse-haired Hound","Boston Terrier","Bouvier des Ardennes","Bouvier des Flandres","Boxer","Boykin Spaniel","Bracco Italiano","Braque Francais","Braque Saint-Germain","Braque d'Auvergne","Braque de l'Ariège","Braque du Bourbonnais","Briard","Briquet Griffon Vendéen","Brittany","Broholmer","Bruno Jura Hound","Brussels Griffon","Bucovina Shepherd Dog","Bull Arab","Bull Terrier","Bulldog","Bullmastiff","Bully Kutta","Burgos Pointer","Cairn Terrier","Campeiro Bulldog","Can de Chira","Canaan Dog","Canadian Eskimo Dog","Cane Corso","Cane Paratore","Cane di Oropa","Cantabrian Water Dog","Cardigan Welsh Corgi","Carea Castellano Manchego","Carolina Dog","Carpathian Shepherd Dog","Catahoula Leopard Dog","Catalan Sheepdog","Caucasian Shepherd Dog","Cavalier King Charles Spaniel","Central Asian Shepherd Dog","Cesky Fousek","Cesky Terrier","Chesapeake Bay Retriever","Chien Français Blanc et Noir","Chien Français Blanc et Orange","Chien Français Tricolore","Chihuahua","Chilean Terrier","Chinese Chongqing Dog","Chinese Crested Dog","Chinook","Chippiparai","Chongqing dog","Chortai","Chow Chow","Cimarrón Uruguayo","Cirneco dell'Etna","Clumber Spaniel","Colombian fino hound","Coton de Tulear","Cretan Hound","Croatian Sheepdog","Curly-Coated Retriever","Cursinu","Czechoslovakian Wolfdog","Cão Fila de São Miguel","Cão da Serra de Aires","Cão de Castro Laboreiro","Cão de Gado Transmontano","Dachshund","Dalmatian","Dandie Dinmont Terrier","Danish-Swedish Farmdog","Denmark Feist","Dingo","Doberman Pinscher","Dogo Argentino","Dogo Guatemalteco","Dogo Sardesco","Dogue Brasileiro","Dogue de Bordeaux","Drentse Patrijshond","Drever","Dunker","Dutch Shepherd","Dutch Smoushond","East European Shepherd","East Siberian Laika","English Cocker Spaniel","English Foxhound","English Mastiff","English Setter","English Shepherd","English Springer Spaniel","English Toy Terrier","Entlebucher Mountain Dog","Estonian Hound","Estrela Mountain Dog","Eurasier","Field Spaniel","Fila Brasileiro","Finnish Hound","Finnish Lapphund","Finnish Spitz","Flat-Coated Retriever","French Bulldog","French Spaniel","Galgo Español","Galician Shepherd Dog","Garafian Shepherd","Gascon Saintongeois","Georgian Shepherd","German Hound","German Longhaired Pointer","German Pinscher","German Roughhaired Pointer","German Shepherd Dog","German Shorthaired Pointer","German Spaniel","German Spitz","German Wirehaired Pointer","Giant Schnauzer","Glen of Imaal Terrier","Golden Retriever","Gordon Setter","Gończy Polski","Grand Anglo-Français Blanc et Noir","Grand Anglo-Français Blanc et Orange","Grand Anglo-Français Tricolore","Grand Basset Griffon Vendéen","Grand Bleu de Gascogne","Grand Griffon Vendéen","Great Dane","Greater Swiss Mountain Dog","Greek Harehound","Greek Shepherd","Greenland Dog","Greyhound","Griffon Bleu de Gascogne","Griffon Fauve de Bretagne","Griffon Nivernais","Gull Dong","Gull Terrier","Hamiltonstövare","Hanover Hound","Harrier","Havanese","Hierran Wolfdog","Hokkaido","Hovawart","Huntaway","Hygen Hound","Hällefors Elkhound","Ibizan Hound","Icelandic Sheepdog","Indian Spitz","Indian pariah dog","Irish Red and White Setter","Irish Setter","Irish Terrier","Irish Water Spaniel","Irish Wolfhound","Istrian Coarse-haired Hound","Istrian Shorthaired Hound","Italian Greyhound","Jack Russell Terrier","Jagdterrier","Japanese Chin","Japanese Spitz","Japanese Terrier","Jindo","Jonangi","Kai Ken","Kaikadi","Kangal Shepherd Dog","Kanni","Karakachan dog","Karelian Bear Dog","Kars","Karst Shepherd","Keeshond","Kerry Beagle","Kerry Blue Terrier","King Charles Spaniel","King Shepherd","Kintamani","Kishu","Kokoni","Kombai","Komondor","Kooikerhondje","Koolie","Koyun dog","Kromfohrländer","Kuchi","Kuvasz","Labrador Retriever","Lagotto Romagnolo","Lakeland Terrier","Lancashire Heeler","Landseer","Lapponian Herder","Large Münsterländer","Leonberger","Levriero Sardo","Lhasa Apso","Lithuanian Hound","Lupo Italiano","Löwchen","Mackenzie River Husky","Magyar agár","Mahratta Greyhound","Maltese","Manchester Terrier","Maremmano-Abruzzese Sheepdog","McNab dog","Miniature American Shepherd","Miniature Bull Terrier","Miniature Fox Terrier","Miniature Pinscher","Miniature Schnauzer","Molossus of Epirus","Montenegrin Mountain Hound","Mountain Cur","Mountain Feist","Mucuchies","Mudhol Hound","Mudi","Neapolitan Mastiff","New Guinea Singing Dog","New Zealand Heading Dog","Newfoundland","Norfolk Terrier","Norrbottenspets","Northern Inuit Dog","Norwegian Buhund","Norwegian Elkhound","Norwegian Lundehund","Norwich Terrier","Nova Scotia Duck Tolling Retriever","Old Croatian Sighthound","Old Danish Pointer","Old English Sheepdog","Old English Terrier","Olde English Bulldogge","Otterhound","Pachon Navarro","Paisley Terrier","Pampas Deerhound","Papillon","Parson Russell Terrier","Pastore della Lessinia e del Lagorai","Patagonian Sheepdog","Patterdale Terrier","Pekingese","Pembroke Welsh Corgi","Perro Majorero","Perro de Pastor Mallorquin","Perro de Presa Canario","Perro de Presa Mallorquin","Peruvian Inca Orchid","Petit Basset Griffon Vendéen","Petit Bleu de Gascogne","Phalène","Pharaoh Hound","Phu Quoc Ridgeback","Picardy Spaniel","Plott Hound","Plummer Terrier","Podenco Canario","Podenco Valenciano","Pointer","Poitevin","Polish Greyhound","Polish Hound","Polish Lowland Sheepdog","Polish Tatra Sheepdog","Pomeranian","Pont-Audemer Spaniel","Poodle","Porcelaine","Portuguese Podengo","Portuguese Pointer","Portuguese Water Dog","Posavac Hound","Pražský Krysařík","Pshdar Dog","Pudelpointer","Pug","Puli","Pumi","Pungsan Dog","Pyrenean Mastiff","Pyrenean Mountain Dog","Pyrenean Sheepdog","Rafeiro do Alentejo","Rajapalayam","Rampur Greyhound","Rat Terrier","Ratonero Bodeguero Andaluz","Ratonero Mallorquin","Ratonero Murciano de Huerta","Ratonero Valenciano","Redbone Coonhound","Rhodesian Ridgeback","Romanian Mioritic Shepherd Dog","Romanian Raven Shepherd Dog","Rottweiler","Rough Collie","Russian Spaniel","Russian Toy","Russo-European Laika","Saarloos Wolfdog","Sabueso Español","Saint Bernard","Saint Hubert Jura Hound","Saint-Usuge Spaniel","Saluki","Samoyed","Sapsali","Sarabi dog","Sardinian Shepherd Dog","Schapendoes","Schillerstövare","Schipperke","Schweizer Laufhund","Schweizerischer Niederlaufhund","Scottish Deerhound","Scottish Terrier","Sealyham Terrier","Segugio Italiano","Segugio Maremmano","Segugio dell'Appennino","Seppala Siberian Sleddog","Serbian Hound","Serbian Tricolour Hound","Serrano Bulldog","Shar Pei","Shetland Sheepdog","Shiba Inu","Shih Tzu","Shikoku","Shiloh Shepherd","Siberian Husky","Silken Windhound","Silky Terrier","Sinhala Hound","Skye Terrier","Sloughi","Slovakian Wirehaired Pointer","Slovenský Cuvac","Slovenský Kopov","Smalandstövare","Small Greek domestic dog","Small Münsterländer","Smooth Collie","Smooth Fox Terrier","Soft-Coated Wheaten Terrier","South Russian Ovcharka","Spanish Mastiff","Spanish Water Dog","Spinone Italiano","Sporting Lucas Terrier","Stabyhoun","Staffordshire Bull Terrier","Standard Schnauzer","Stephens Stock","Styrian Coarse-haired Hound","Sussex Spaniel","Swedish Elkhound","Swedish Lapphund","Swedish Vallhund","Swedish White Elkhound","Taigan","Taiwan Dog","Tamaskan Dog","Teddy Roosevelt Terrier","Telomian","Tenterfield Terrier","Terrier Brasileiro","Thai Bangkaew Dog","Thai Ridgeback","Tibetan Mastiff","Tibetan Spaniel","Tibetan Terrier","Tornjak","Tosa","Toy Fox Terrier","Toy Manchester Terrier","Transylvanian Hound","Treeing Cur","Treeing Feist","Treeing Tennessee Brindle","Treeing Walker Coonhound","Trigg Hound","Tyrolean Hound","Vikhan","Villano de Las Encartaciones","Villanuco de Las Encartaciones","Vizsla","Volpino Italiano","Weimaraner","Welsh Sheepdog","Welsh Springer Spaniel","Welsh Terrier","West Highland White Terrier","West Siberian Laika","Westphalian Dachsbracke","Wetterhoun","Whippet","White Shepherd","White Swiss Shepherd Dog","Wire Fox Terrier","Wirehaired Pointing Griffon","Wirehaired Vizsla","Xiasi Dog","Xoloitzcuintli","Yakutian Laika","Yorkshire Terrier","Šarplaninac"],c=["Alaska pollock","Albacore","Amur catfish","Araucanian herring","Argentine hake","Asari","Asian swamp eel","Atlantic cod","Atlantic herring","Atlantic horse mackerel","Atlantic mackerel","Atlantic menhaden","Atlantic salmon","Bigeye scad","Bigeye tuna","Bighead carp","Black carp","Blood cockle","Blue swimming crab","Blue whiting","Bombay-duck","Bonga shad","California pilchard","Cape horse mackerel","Capelin","Catla","Channel catfish","Chilean jack mackerel","Chinese perch","Chinese softshell turtle","Chub mackerel","Chum salmon","Common carp","Crucian carp","Daggertooth pike conger","European anchovy","European pilchard","European sprat","Filipino Venus","Gazami crab","Goldstripe sardinella","Grass carp","Gulf menhaden","Haddock","Hilsa shad","Indian mackerel","Indian oil sardine","Iridescent shark","Japanese anchovy","Japanese cockle","Japanese common catfish","Japanese flying squid","Japanese jack mackerel","Japanese littleneck","Japanese pilchard","Jumbo flying squid","Kawakawa","Korean bullhead","Largehead hairtail","Longtail tuna","Madeiran sardinella","Mandarin fish","Milkfish","Mrigal carp","Narrow-barred Spanish mackerel","Nile perch","Nile tilapia","North Pacific hake","Northern snakehead","Pacific anchoveta","Pacific cod","Pacific herring","Pacific sand lance","Pacific sandlance","Pacific saury","Pacific thread herring","Peruvian anchoveta","Pink salmon","Pollock","Pond loach","Rainbow trout","Rohu","Round sardinella","Short mackerel","Silver carp","Silver cyprinid","Skipjack tuna","Southern African anchovy","Southern rough shrimp","Whiteleg shrimp","Wuchang bream","Yellow croaker","Yellowfin tuna","Yellowhead catfish","Yellowstripe scad"],m$1=["Abaco Barb","Abtenauer","Abyssinian","Aegidienberger","Akhal-Teke","Albanian Horse","Altai Horse","Altèr Real","American Albino","American Cream Draft","American Indian Horse","American Paint Horse","American Quarter Horse","American Saddlebred","American Warmblood","Andalusian Horse","Andravida Horse","Anglo-Arabian","Anglo-Arabo-Sardo","Anglo-Kabarda","Appaloosa","AraAppaloosa","Arabian Horse","Ardennes Horse","Arenberg-Nordkirchen","Argentine Criollo","Asian wild Horse","Assateague Horse","Asturcón","Augeron","Australian Brumby","Australian Draught Horse","Australian Stock Horse","Austrian Warmblood","Auvergne Horse","Auxois","Azerbaijan Horse","Azteca Horse","Baise Horse","Bale","Balearic Horse","Balikun Horse","Baluchi Horse","Banker Horse","Barb Horse","Bardigiano","Bashkir Curly","Basque Mountain Horse","Bavarian Warmblood","Belgian Half-blood","Belgian Horse","Belgian Warmblood","Bhutia Horse","Black Forest Horse","Blazer Horse","Boerperd","Borana","Boulonnais Horse","Brabant","Brandenburger","Brazilian Sport Horse","Breton Horse","Brumby","Budyonny Horse","Burguete Horse","Burmese Horse","Byelorussian Harness Horse","Calabrese Horse","Camargue Horse","Camarillo White Horse","Campeiro","Campolina","Canadian Horse","Canadian Pacer","Carolina Marsh Tacky","Carthusian Horse","Caspian Horse","Castilian Horse","Castillonnais","Catria Horse","Cavallo Romano della Maremma Laziale","Cerbat Mustang","Chickasaw Horse","Chilean Corralero","Choctaw Horse","Cleveland Bay","Clydesdale Horse","Cob","Coldblood Trotter","Colonial Spanish Horse","Colorado Ranger","Comtois Horse","Corsican Horse","Costa Rican Saddle Horse","Cretan Horse","Criollo Horse","Croatian Coldblood","Cuban Criollo","Cumberland Island Horse","Curly Horse","Czech Warmblood","Daliboz","Danish Warmblood","Danube Delta Horse","Dole Gudbrandsdal","Don","Dongola Horse","Draft Trotter","Dutch Harness Horse","Dutch Heavy Draft","Dutch Warmblood","Dzungarian Horse","East Bulgarian","East Friesian Horse","Estonian Draft","Estonian Horse","Falabella","Faroese","Finnhorse","Fjord Horse","Fleuve","Florida Cracker Horse","Foutanké","Frederiksborg Horse","Freiberger","French Trotter","Friesian Cross","Friesian Horse","Friesian Sporthorse","Furioso-North Star","Galiceño","Galician Pony","Gelderland Horse","Georgian Grande Horse","German Warmblood","Giara Horse","Gidran","Groningen Horse","Gypsy Horse","Hackney Horse","Haflinger","Hanoverian Horse","Heck Horse","Heihe Horse","Henson Horse","Hequ Horse","Hirzai","Hispano-Bretón","Holsteiner Horse","Horro","Hungarian Warmblood","Icelandic Horse","Iomud","Irish Draught","Irish Sport Horse sometimes called Irish Hunter","Italian Heavy Draft","Italian Trotter","Jaca Navarra","Jeju Horse","Jutland Horse","Kabarda Horse","Kafa","Kaimanawa Horses","Kalmyk Horse","Karabair","Karabakh Horse","Karachai Horse","Karossier","Kathiawari","Kazakh Horse","Kentucky Mountain Saddle Horse","Kiger Mustang","Kinsky Horse","Kisber Felver","Kiso Horse","Kladruber","Knabstrupper","Konik","Kundudo","Kustanair","Kyrgyz Horse","Latvian Horse","Lipizzan","Lithuanian Heavy Draught","Lokai","Losino Horse","Lusitano","Lyngshest","M'Bayar","M'Par","Mallorquín","Malopolski","Mangalarga","Mangalarga Marchador","Maremmano","Marismeño Horse","Marsh Tacky","Marwari Horse","Mecklenburger","Menorquín","Messara Horse","Metis Trotter","Mezőhegyesi Sport Horse","Međimurje Horse","Miniature Horse","Misaki Horse","Missouri Fox Trotter","Monchina","Mongolian Horse","Mongolian Wild Horse","Monterufolino","Morab","Morgan Horse","Mountain Pleasure Horse","Moyle Horse","Murakoz Horse","Murgese","Mustang Horse","Mérens Horse","Namib Desert Horse","Nangchen Horse","National Show Horse","Nez Perce Horse","Nivernais Horse","Nokota Horse","Noma","Nonius Horse","Nooitgedachter","Nordlandshest","Noriker Horse","Norman Cob","North American Single-Footer Horse","North Swedish Horse","Norwegian Coldblood Trotter","Norwegian Fjord","Novokirghiz","Oberlander Horse","Ogaden","Oldenburg Horse","Orlov trotter","Ostfriesen","Paint","Pampa Horse","Paso Fino","Pentro Horse","Percheron","Persano Horse","Peruvian Paso","Pintabian","Pleven Horse","Poitevin Horse","Posavac Horse","Pottok","Pryor Mountain Mustang","Przewalski's Horse","Pura Raza Española","Purosangue Orientale","Qatgani","Quarab","Quarter Horse","Racking Horse","Retuerta Horse","Rhenish German Coldblood","Rhinelander Horse","Riwoche Horse","Rocky Mountain Horse","Romanian Sporthorse","Rottaler","Russian Don","Russian Heavy Draft","Russian Trotter","Saddlebred","Salerno Horse","Samolaco Horse","San Fratello Horse","Sarcidano Horse","Sardinian Anglo-Arab","Schleswig Coldblood","Schwarzwälder Kaltblut","Selale","Sella Italiano","Selle Français","Shagya Arabian","Shan Horse","Shire Horse","Siciliano Indigeno","Silesian Horse","Sokolsky Horse","Sorraia","South German Coldblood","Soviet Heavy Draft","Spanish Anglo-Arab","Spanish Barb","Spanish Jennet Horse","Spanish Mustang","Spanish Tarpan","Spanish-Norman Horse","Spiti Horse","Spotted Saddle Horse","Standardbred Horse","Suffolk Punch","Swedish Ardennes","Swedish Warmblood","Swedish coldblood trotter","Swiss Warmblood","Taishū Horse","Takhi","Tawleed","Tchernomor","Tennessee Walking Horse","Tersk Horse","Thoroughbred","Tiger Horse","Tinker Horse","Tolfetano","Tori Horse","Trait Du Nord","Trakehner","Tsushima","Tuigpaard","Ukrainian Riding Horse","Unmol Horse","Uzunyayla","Ventasso Horse","Virginia Highlander","Vlaamperd","Vladimir Heavy Draft","Vyatka","Waler","Waler Horse","Walkaloosa","Warlander","Warmblood","Welsh Cob","Westphalian Horse","Wielkopolski","Württemberger","Xilingol Horse","Yakutian Horse","Yili Horse","Yonaguni Horse","Zaniskari","Zhemaichu","Zweibrücker","Žemaitukas"],h=["Acacia-ants","Acorn-plum gall","Aerial yellowjacket","Africanized honey bee","Allegheny mound ant","Almond stone wasp","Ant","Arboreal ant","Argentine ant","Asian paper wasp","Baldfaced hornet","Bee","Bigheaded ant","Black and yellow mud dauber","Black carpenter ant","Black imported fire ant","Blue horntail woodwasp","Blue orchard bee","Braconid wasp","Bumble bee","Carpenter ant","Carpenter wasp","Chalcid wasp","Cicada killer","Citrus blackfly parasitoid","Common paper wasp","Crazy ant","Cuckoo wasp","Cynipid gall wasp","Eastern Carpenter bee","Eastern yellowjacket","Elm sawfly","Encyrtid wasp","Erythrina gall wasp","Eulophid wasp","European hornet","European imported fire ant","False honey ant","Fire ant","Forest bachac","Forest yellowjacket","German yellowjacket","Ghost ant","Giant ichneumon wasp","Giant resin bee","Giant wood wasp","Golden northern bumble bee","Golden paper wasp","Gouty oak gall","Grass Carrying Wasp","Great black wasp","Great golden digger wasp","Hackberry nipple gall parasitoid","Honey bee","Horned oak gall","Horse guard wasp","Hunting wasp","Ichneumonid wasp","Keyhole wasp","Knopper gall","Large garden bumble bee","Large oak-apple gall","Leafcutting bee","Little fire ant","Little yellow ant","Long-horned bees","Long-legged ant","Macao paper wasp","Mallow bee","Marble gall","Mossyrose gall wasp","Mud-daubers","Multiflora rose seed chalcid","Oak apple gall wasp","Oak rough bulletgall wasp","Oak saucer gall","Oak shoot sawfly","Odorous house ant","Orange-tailed bumble bee","Orangetailed potter wasp","Oriental chestnut gall wasp","Paper wasp","Pavement ant","Pigeon tremex","Pip gall wasp","Prairie yellowjacket","Pteromalid wasp","Pyramid ant","Raspberry Horntail","Red ant","Red carpenter ant","Red harvester ant","Red imported fire ant","Red wasp","Red wood ant","Red-tailed wasp","Reddish carpenter ant","Rough harvester ant","Sawfly parasitic wasp","Scale parasitoid","Silky ant","Sirex woodwasp","Siricid woodwasp","Smaller yellow ant","Southeastern blueberry bee","Southern fire ant","Southern yellowjacket","Sphecid wasp","Stony gall","Sweat bee","Texas leafcutting ant","Tiphiid wasp","Torymid wasp","Tramp ant","Valentine ant","Velvet ant","Vespid wasp","Weevil parasitoid","Western harvester ant","Western paper wasp","Western thatching ant","Western yellowjacket","White-horned horntail","Willow shoot sawfly","Woodwasp","Wool sower gall maker","Yellow Crazy Ant","Yellow and black potter wasp","Yellow-horned horntail"],y=["Asiatic Lion","Barbary Lion","Cape lion","Masai Lion","Northeast Congo Lion","Transvaal lion","West African Lion"],p$1=["Ace","Archie","Bailey","Bandit","Bella","Bentley","Bruno","Buddy","Charlie","Coco","Cookie","Cooper","Daisy","Dixie","Finn","Ginger","Gracie","Gus","Hank","Jack","Jax","Joey","Kobe","Leo","Lola","Louie","Lucy","Maggie","Max","Mia","Milo","Molly","Murphey","Nala","Nova","Ollie","Oreo","Rosie","Scout","Stella","Teddy","Tuffy"],g=["American","American Chinchilla","American Fuzzy Lop","American Sable","Argente Brun","Belgian Hare","Beveren","Blanc de Hotot","Britannia Petite","Californian","Champagne D’Argent","Checkered Giant","Cinnamon","Crème D’Argent","Dutch","Dwarf Hotot","English Angora","English Lop","English Spot","Flemish Giant","Florida White","French Angora","French Lop","Giant Angora","Giant Chinchilla","Harlequin","Havana","Himalayan","Holland Lop","Jersey Wooly","Lilac","Lionhead","Mini Lop","Mini Rex","Mini Satin","Netherland Dwarf","New Zealand","Palomino","Polish","Rex","Rhinelander","Satin","Satin Angora","Silver","Silver Fox","Silver Marten","Standard Chinchilla","Tan","Thrianta"],b=["Abrocoma","Abrocoma schistacea","Aconaemys","Aconaemys porteri","African brush-tailed porcupine","Andean mountain cavy","Argentine tuco-tuco","Ashy chinchilla rat","Asiatic brush-tailed porcupine","Atherurus","Azara's agouti","Azara's tuco-tuco","Bahia porcupine","Bathyergus","Bathyergus janetta","Bathyergus suillus","Bennett's chinchilla rat","Bicolored-spined porcupine","Black agouti","Black dwarf porcupine","Black-rumped agouti","Black-tailed hairy dwarf porcupine","Bolivian chinchilla rat","Bolivian tuco-tuco","Bonetto's tuco-tuco","Brandt's yellow-toothed cavy","Brazilian guinea pig","Brazilian porcupine","Brazilian tuco-tuco","Bridge's degu","Brown hairy dwarf porcupine","Budin's chinchilla rat, A. budini","Cape porcupine","Catamarca tuco-tuco","Cavia","Central American agouti","Chacoan tuco-tuco","Chilean rock rat","Chinchilla","Coendou","Coiban agouti","Colburn's tuco-tuco","Collared tuco-tuco","Common degu","Common yellow-toothed cavy","Conover's tuco-tuco","Coruro","Crested agouti","Crested porcupine","Cryptomys","Cryptomys bocagei","Cryptomys damarensis","Cryptomys foxi","Cryptomys hottentotus","Cryptomys mechowi","Cryptomys ochraceocinereus","Cryptomys zechi","Ctenomys","Cuniculus","Cuscomys","Cuscomys ashanika","Dactylomys","Dactylomys boliviensis","Dactylomys dactylinus","Dactylomys peruanus","Dasyprocta","Domestic guinea pig","Emily's tuco-tuco","Erethizon","Famatina chinchilla rat","Frosted hairy dwarf porcupine","Fukomys","Fukomys amatus","Fukomys anselli","Fukomys bocagei","Fukomys damarensis","Fukomys darlingi","Fukomys foxi","Fukomys ilariae","Fukomys kafuensis","Fukomys mechowii","Fukomys micklemi","Fukomys occlusus","Fukomys ochraceocinereus","Fukomys whytei","Fukomys zechi","Furtive tuco-tuco","Galea","Georychus","Georychus capensis","Golden viscacha-rat","Goya tuco-tuco","Greater guinea pig","Green acouchi","Haig's tuco-tuco","Heliophobius","Heliophobius argenteocinereus","Heterocephalus","Heterocephalus glaber","Highland tuco-tuco","Hystrix","Indian porcupine","Isla Mocha degu","Kalinowski agouti","Kannabateomys","Kannabateomys amblyonyx","Lagidium","Lagostomus","Lewis' tuco-tuco","Long-tailed chinchilla","Long-tailed porcupine","Los Chalchaleros' viscacha-rat","Lowland paca","Magellanic tuco-tuco","Malayan porcupine","Maule tuco-tuco","Mendoza tuco-tuco","Mexican agouti","Mexican hairy dwarf porcupine","Microcavia","Montane guinea pig","Moon-toothed degu","Mottled tuco-tuco","Mountain degu","Mountain paca","Mountain viscacha-rat","Myoprocta","Natterer's tuco-tuco","North American porcupine","Northern viscacha","Octodon","Octodontomys","Octomys","Olallamys","Olallamys albicauda","Olallamys edax","Orinoco agouti","Paraguaian hairy dwarf porcupine","Pearson's tuco-tuco","Peruvian tuco-tuco","Philippine porcupine","Pipanacoctomys","Plains viscacha","Plains viscacha-rat","Porteous' tuco-tuco","Punta de Vacas chinchilla rat","Red acouchi","Red-rumped agouti","Reddish tuco-tuco","Rio Negro tuco-tuco","Robust tuco-tuco","Roosmalen's dwarf porcupine","Rothschild's porcupine","Ruatan Island agouti","Sage's rock rat","Salinoctomys","Salta tuco-tuco","San Luis tuco-tuco","Santa Catarina's guinea pig","Shiny guinea pig","Shipton's mountain cavy","Short-tailed chinchilla","Silky tuco-tuco","Social tuco-tuco","Southern mountain cavy","Southern tuco-tuco","Southern viscacha","Spalacopus","Spix's yellow-toothed cavy","Steinbach's tuco-tuco","Streaked dwarf porcupine","Strong tuco-tuco","Stump-tailed porcupine","Sumatran porcupine","Sunda porcupine","Talas tuco-tuco","Tawny tuco-tuco","Thick-spined porcupine","Tiny tuco-tuco","Trichys","Tucuman tuco-tuco","Tympanoctomys","Uspallata chinchilla rat","White-toothed tuco-tuco","Wolffsohn's viscacha"],C=["Abaco Island boa","Aesculapian snake","African beaked snake","African puff adder","African rock python","African twig snake","African wolf snake","Amazon tree boa","Amazonian palm viper","American Vine Snake","American copperhead","Amethystine python","Anaconda","Andaman cat snake","Andaman cobra","Angolan python","Annulated sea snake","Arabian cobra","Arafura file snake","Arizona black rattlesnake","Arizona coral snake","Aruba rattlesnake","Asian Vine Snake, Whip Snake","Asian cobra","Asian keelback","Asian pipe snake","Asp","Asp viper","Assam keelback","Australian copperhead","Australian scrub python","Baird's rat snake","Baja California lyresnake","Ball Python","Ball python","Bamboo pitviper","Bamboo viper","Banded Flying Snake","Banded cat-eyed snake","Banded krait","Banded pitviper","Banded water cobra","Barbour's pit viper","Barred wolf snake","Beaked sea snake","Beauty rat snake","Beddome's cat snake","Beddome's coral snake","Bimini racer","Bird snake","Bismarck ringed python","Black headed python","Black krait","Black mamba","Black rat snake","Black snake","Black tree cobra","Black-banded trinket snake","Black-headed snake","Black-necked cobra","Black-necked spitting cobra","Black-speckled palm-pitviper","Black-striped keelback","Black-tailed horned pit viper","Blanding's tree snake","Blind snake","Blonde hognose snake","Blood python","Blue krait","Blunt-headed tree snake","Bluntnose viper","Boa","Boa constrictor","Bocourt's water snake","Boelen python","Boiga","Bolivian anaconda","Boomslang","Bornean pitviper","Borneo short-tailed python","Brahminy blind snake","Brazilian coral snake","Brazilian mud Viper","Brazilian smooth snake","Bredl's python","Brongersma's pitviper","Brown snake","Brown spotted pitviper[4]","Brown tree snake","Brown water python","Brown white-lipped python","Buff striped keelback","Bull snake","Burmese keelback","Burmese krait","Burmese python","Burrowing cobra","Burrowing viper","Bush viper","Bushmaster","Buttermilk racer","Calabar python","California kingsnake","Canebrake","Cantil","Cantor's pitviper","Cape cobra","Cape coral snake","Cape gopher snake","Carpet viper","Cascabel","Caspian cobra","Cat snake","Cat-eyed night snake","Cat-eyed snake","Central American lyre snake","Central ranges taipan","Centralian carpet python","Ceylon krait","Chappell Island tiger snake","Checkered garter snake","Checkered keelback","Chicken snake","Chihuahuan ridge-nosed rattlesnake","Children's python","Chinese tree viper","Coachwhip snake","Coastal carpet python","Coastal taipan","Cobra","Collett's snake","Colorado desert sidewinder","Common adder","Common cobra","Common garter snake","Common ground snake","Common keelback","Common lancehead","Common tiger snake","Common worm snake","Congo snake","Congo water cobra","Copperhead","Coral snake","Corn snake","Coronado Island rattlesnake","Cottonmouth","Crossed viper","Crowned snake","Cuban boa","Cuban wood snake","Cyclades blunt-nosed viper","Dauan Island water python","De Schauensee's anaconda","Death Adder","Desert death adder","Desert kingsnake","Desert woma python","Diamond python","Dog-toothed cat snake","Down's tiger snake","Dubois's sea snake","Dumeril's boa","Durango rock rattlesnake","Dusky pigmy rattlesnake","Dusty hognose snake","Dwarf beaked snake","Dwarf boa","Dwarf pipe snake","Dwarf sand adder","Eastern brown snake","Eastern coral snake","Eastern diamondback rattlesnake","Eastern green mamba","Eastern hognose snake","Eastern lyre snake","Eastern mud snake","Eastern racer","Eastern tiger snake","Eastern water cobra","Eastern yellowbelly sad racer","Egg-eater","Egyptian asp","Egyptian cobra","Elegant pitviper","Emerald tree boa","Equatorial spitting cobra","European asp","European smooth snake","Eyelash palm-pitviper","Eyelash pit viper","Eyelash viper","False cobra","False horned viper","False water cobra","Fan-Si-Pan horned pitviper","Fea's viper","Fer-de-lance","Fierce snake","Fifty pacer","Fishing snake","Flat-nosed pitviper","Flinders python","Flying snake","Forest cobra","Forest flame snake","Forsten's cat snake","Fox snake, three species of Pantherophis","Gaboon viper","Garter snake","Giant Malagasy hognose snake","Godman's pit viper","Gold tree cobra","Gold-ringed cat snake","Golden tree snake","Grand Canyon rattlesnake","Grass snake","Gray cat snake","Great Basin rattlesnake","Great Lakes bush viper","Great Plains rat snake","Green anaconda","Green cat-eyed snake","Green mamba","Green palm viper","Green rat snake","Green snake","Green tree pit viper","Green tree python","Grey Lora","Grey-banded kingsnake","Ground snake","Guatemalan palm viper","Guatemalan tree viper","Habu","Habu pit viper","Hagen's pitviper","Hairy bush viper","Halmahera python","Hardwicke's sea snake","Harlequin coral snake","High Woods coral snake","Hill keelback","Himalayan keelback","Hogg Island boa","Hognose snake","Hognosed viper","Honduran palm viper","Hook Nosed Sea Snake","Hopi rattlesnake","Horned adder","Horned desert viper","Horned viper","Horseshoe pitviper","Hundred pacer","Hutton's tree viper","Ikaheka snake","Indian cobra","Indian flying snake","Indian krait","Indian python","Indian tree viper","Indigo snake","Indochinese spitting cobra","Indonesian water python","Inland carpet python","Inland taipan","Jamaican Tree Snake","Jamaican boa","Jan's hognose snake","Japanese forest rat snake","Japanese rat snake","Japanese striped snake","Javan spitting cobra","Jerdon's pitviper","Jumping viper","Jungle carpet python","Kanburian pit viper","Kaulback's lance-headed pitviper","Kayaudi dwarf reticulated python","Kaznakov's viper","Keelback","Kham Plateau pitviper","Khasi Hills keelback","King Island tiger snake","King brown","King cobra","King rat snake","King snake","Krait","Krefft's tiger snake","Lance-headed rattlesnake","Lancehead","Large shield snake","Large-eyed pitviper","Large-scaled tree viper","Leaf viper","Leaf-nosed viper","Lesser black krait","Levant viper","Long-nosed adder","Long-nosed tree snake","Long-nosed viper","Long-nosed whip snake","Long-tailed rattlesnake","Longnosed worm snake","Lora","Lyre snake","Machete savane","Macklot's python","Madagascar ground boa","Madagascar tree boa","Malabar rock pitviper","Malayan krait","Malayan long-glanded coral snake","Malayan pit viper","Malcolm's tree viper","Mamba","Mamushi","Manchurian Black Water Snake","Mandalay cobra","Mandarin rat snake","Mangrove pit viper","Mangrove snake","Mangshan pitviper","Many-banded krait","Many-banded tree snake","Many-horned adder","Many-spotted cat snake","Massasauga rattlesnake","McMahon's viper","Mexican black kingsnake","Mexican green rattlesnake","Mexican hognose snake","Mexican palm-pitviper","Mexican parrot snake","Mexican racer","Mexican vine snake","Mexican west coast rattlesnake","Midget faded rattlesnake","Milk snake","Moccasin snake","Modest keelback","Mojave desert sidewinder","Mojave rattlesnake","Mole viper","Mollucan python","Moluccan flying snake","Montpellier snake","Motuo bamboo pitviper","Mountain adder","Mozambique spitting cobra","Mud adder","Mud snake","Mussurana","Namaqua dwarf adder","Namib dwarf sand adder","Narrowhead Garter Snake","New Guinea carpet python","Nichell snake","Nicobar Island keelback","Nicobar bamboo pitviper","Night snake","Nightingale adder","Nilgiri keelback","Nitsche's bush viper","Nitsche's tree viper","North Philippine cobra","North eastern king snake","Northeastern hill krait","Northern black-tailed rattlesnake","Northern tree snake","Northern water snake","Northern white-lipped python","Northwestern carpet python","Nose-horned viper","Nubian spitting cobra","Oaxacan small-headed rattlesnake","Oenpelli python","Olive python","Olive sea snake","Orange-collared keelback","Ornate flying snake","Palestine viper","Pallas' viper","Palm viper","Papuan python","Paradise flying snake","Parrot snake","Patchnose snake","Paupan taipan","Pelagic sea snake","Peninsula tiger snake","Peringuey's adder","Perrotet's shieldtail snake","Persian rat snake","Philippine cobra","Philippine pitviper","Pine snake","Pipe snake","Pit viper","Pointed-scaled pit viper[5]","Pope's tree viper","Portuguese viper","Prairie kingsnake","Puerto Rican boa","Puff adder","Pygmy python","Python","Queen snake","Racer","Raddysnake","Rainbow boa","Rat snake","Rattler","Rattlesnake","Red blood python","Red diamond rattlesnake","Red spitting cobra","Red-backed rat snake","Red-bellied black snake","Red-headed krait","Red-necked keelback","Red-tailed bamboo pitviper","Red-tailed boa","Red-tailed pipe snake","Reticulated python","Rhinoceros viper","Rhombic night adder","Ribbon snake","Rinkhals","Rinkhals cobra","River jack","Rosy boa","Rough green snake","Rough-scaled bush viper","Rough-scaled python","Rough-scaled tree viper","Royal python","Rubber boa","Rufous beaked snake","Rungwe tree viper","San Francisco garter snake","Sand adder","Sand boa","Savu python","Saw-scaled viper","Scarlet kingsnake","Schlegel's viper","Schultze's pitviper","Sea snake","Sedge viper","Selayer reticulated python","Sharp-nosed viper","Shield-nosed cobra","Shield-tailed snake","Siamese palm viper","Side-striped palm-pitviper","Sidewinder","Sikkim keelback","Sinai desert cobra","Sind krait","Small-eyed snake","Smooth green snake","Smooth snake","Snorkel viper","Snouted cobra","Sonoran sidewinder","South American hognose snake","South eastern corn snake","Southern Indonesian spitting cobra","Southern Pacific rattlesnake","Southern Philippine cobra","Southern black racer","Southern white-lipped python","Southwestern black spitting cobra","Southwestern blackhead snake","Southwestern carpet python","Southwestern speckled rattlesnake","Speckle-bellied keelback","Speckled kingsnake","Spectacled cobra","Spiny bush viper","Spitting cobra","Spotted python","Sri Lankan pit viper","Stejneger's bamboo pitviper","Stiletto snake","Stimson's python","Stoke's sea snake","Storm water cobra","Striped snake","Sumatran short-tailed python","Sumatran tree viper","Sunbeam snake","Taipan","Taiwan cobra","Tan racer","Tancitaran dusky rattlesnake","Tanimbar python","Tasmanian tiger snake","Tawny cat snake","Temple pit viper","Temple viper","Tentacled snake","Texas Coral Snake","Texas blind snake","Texas garter snake","Texas lyre snake","Texas night snake","Thai cobra","Three-lined ground snake","Tibetan bamboo pitviper","Tic polonga","Tiger pit viper","Tiger rattlesnake","Tiger snake","Tigre snake","Timber rattlesnake","Timor python","Titanboa","Tree boa","Tree snake","Tree viper","Trinket snake","Tropical rattlesnake","Twig snake","Twin Headed King Snake","Twin-Barred tree snake","Twin-spotted rat snake","Twin-spotted rattlesnake","Undulated pit viper","Uracoan rattlesnake","Ursini's viper","Urutu","Vine snake","Viper","Viper Adder","Vipera ammodytes","Wagler's pit viper","Wart snake","Water adder","Water moccasin","Water snake","West Indian racer","Western blind snake","Western carpet python","Western coral snake","Western diamondback rattlesnake","Western green mamba","Western ground snake","Western hog-nosed viper","Western mud snake","Western tiger snake","Western woma python","Wetar Island python","Whip snake","White-lipped keelback","White-lipped python","White-lipped tree viper","Wirot's pit viper","Wolf snake","Woma python","Worm snake","Wutu","Wynaad keelback","Yarara","Yellow anaconda","Yellow-banded sea snake","Yellow-bellied sea snake","Yellow-lined palm viper","Yellow-lipped sea snake","Yellow-striped rat snake","Yunnan keelback","Zebra snake","Zebra spitting cobra"],S$1=["bat","bear","bee","bird","butterfly","cat","cow","crocodile","deer","dog","dolphin","eagle","elephant","fish","flamingo","fox","frog","gecko","giraffe","gorilla","hamster","hippopotamus","horse","kangaroo","koala","lion","monkey","ostrich","panda","parrot","peacock","penguin","polar bear","rabbit","rhinoceros","sea lion","shark","snake","squirrel","tiger","turtle","whale","wolf","zebra"],_a={bear:n,bird:i,cat:t,cetacean:l,cow:s,crocodilia:d,dog:u,fish:c,horse:m$1,insect:h,lion:y,pet_name:p$1,rabbit:g,rodent:b,snake:C,type:S$1},k=_a,f$1=["{{person.name}}","{{company.name}}"],v$1=["Redhold","Treeflex","Trippledex","Kanlam","Bigtax","Daltfresh","Toughjoyfax","Mat Lam Tam","Otcom","Tres-Zap","Y-Solowarm","Tresom","Voltsillam","Biodex","Greenlam","Viva","Matsoft","Temp","Zoolab","Subin","Rank","Job","Stringtough","Tin","It","Home Ing","Zamit","Sonsing","Konklab","Alpha","Latlux","Voyatouch","Alphazap","Holdlamis","Zaam-Dox","Sub-Ex","Quo Lux","Bamity","Ventosanzap","Lotstring","Hatity","Tempsoft","Overhold","Fixflex","Konklux","Zontrax","Tampflex","Span","Namfix","Transcof","Stim","Fix San","Sonair","Stronghold","Fintone","Y-find","Opela","Lotlux","Ronstring","Zathin","Duobam","Keylex"],A$1=["0.#.#","0.##","#.##","#.#","#.#.#"],Qa={author:f$1,name:v$1,version:A$1},B$1=Qa,T$1=["A.A. Milne","Agatha Christie","Alan Moore and Dave Gibbons","Albert Camus","Aldous Huxley","Alexander Pope","Alexandre Dumas","Alice Walker","Andrew Lang","Anne Frank","Anthony Burgess","Anthony Trollope","Antoine de Saint-Exupéry","Anton Chekhov","Anton Pavlovich Chekhov","Arthur Conan Doyle","Arthur Schopenhauer","Aylmer Maude","Ayn Rand","Beatrix Potter","Benjamin Disraeli","Benjamin Jowett","Bernard Shaw","Bertrand Russell","Bhagavanlal Indrajit","Boris Pasternak","Bram Stoker","Brian Evenson","C.E. Brock","C.S. Lewis","Carson McCallers","Charles Dickens","Charles E. Derbyshire","Charlotte Brontë","Charlotte Perkins Gilman","Chinua Achebe","Clifford R. Adams","Constance Garnett","Cormac McCarthy","D.H. Lawrence","Dan Brown","Daniel Defoe","Dante Alighieri","Dashiell Hammett","David Widger","David Wyllie","Dean Koontz","Don DeLillo","E.M. Forster","Edgar Allan Poe","Edgar Rice Burroughs","Elizabeth Cleghorn Gaskell","Elizabeth Von Arnim","Emily Brontë","Erich Remarque","Ernest Hemingway","Evelyn Waugh","F. Scott Fitzgerald","Ford Madox Ford","Frances Hodgson Burnett","Frank Herbert","Frank T. Merrill","Franz Kafka","Friedrich Wilhelm Nietzsche","Fyodor Dostoyevsky","G.K. Chesterton","Gabriel Garcia Marquez","Geoffrey Chaucer","George Eliot","George Grossmith","George Orwell","George R. R. Martin","George Saunders","Grady Ward","Graham Greene","Gustave Doré","Gustave Flaubert","Guy de Maupassant","Günter Grass","H.G. Wells","H.P. Lovecraft","Harper Lee","Harriet Beecher Stowe","Haruki Murakami","Henrik Ibsen","Henry David Thoreau","Henry Fielding","Henry James","Henry Miller","Henry Morley","Herman Melville","Hermann Broch","Homer","Honoré de Balzac","Ian McEwan","Isabel Florence Hapgood","Italo Calvino","J.D. Salinger","J.K. Rowling","J.M. Barrie","J.R.R. Tolkien","Jack Kerouac","Jack London","Jacob Grimm","Jacqueline Crooks","James Baldwin","James Dickey","James Ellroy","James Joyce","James Patterson","Jane Austen","Johann Wolfgang von Goethe","John Bunyan","John Camden Hotten","John Dos Passos","John Green","John Grisham","John Kennedy Toole","John Milton","John Ormsby","John Steinbeck","John Updike","Jonathan Franzen","Jonathan Swift","Joseph Conrad","Joseph Heller","José Rizal","Judy Blume","Jules Verne","Junot Diaz","Karl Marx","Kazuo Ishiguro","Ken Follett","Ken Kesey","Kenneth Grahame","Khaled Hosseini","Kingsley Amis","Kurt Vonnegut","L. Frank Baum","L.M. Montgomery","Laurence Sterne","Leo Tolstoy","Lewis Carroll","Louisa May Alcott","Louise Maude","Malcolm Lowry","Marcel Proust","Margaret Atwood","Margaret Mitchell","Marilynne Robinson","Mark Twain","Martin Amis","Mary Shelley","Michael Chabon","Miguel de Cervantes","Mikhail Bulgakov","Muriel Spark","Nancy Mitford","Nathanael West","Nathaniel Hawthorne","Neil Gaiman","Niccolo Machiavelli","Norman Mailer","Oscar Levy","Oscar Wilde","P.G. Wodehouse","Paulo Coelho","Peter Carey","Philip Pullman","Philip Roth","Plato","R.L. Stine","Rachel Kushner","Ralph Ellison","Ray Bradbury","Raymond Chandler","Richard Wagner","Richard Wright","Richard Yates","Roald Dahl","Robert Graves","Robert Louis Stevenson","Robert Penn Warren","Rudyard Kipling","Salman Rushdie","Samuel Beckett","Samuel Butler","Samuel Richardson","Saul Bellow","Shivaram Parashuram Bhide","Sir Arthur Conan Doyle","Sir Richard Francis Burton","Stendhal","Stephen Hawking","Stephen King","Sun Tzu","Suzanne Collins","T. Smollett","T.S. Eliot","Theodore Alois Buckley","Theodore Dreiser","Thomas Hardy","Thomas Love Peacock","Thomas Mann","Toni Morrison","Truman Capote","V.S. Naipaul","Vance Packard","Vatsyayana","Victor Hugo","Virgil","Virginia Woolf","Vladimir Nabokov","Voltaire","W.G. Sebald","W.K. Marriott","Walker Percy","Walt Whitman","Walter Scott","Wilhelm Grimm","Wilkie Collins","William Faulkner","William Gibson","William Golding","William Makepeace Thackeray","William Shakespeare","Zadie Smith"],M$1=["Audiobook","Ebook","Hardcover","Paperback"],w$1=["Adventure","Biography","Business","Children's Literature","Classic","Comedy","Comic","Detective","Drama","Fantasy","Graphic Novel","Historical Fiction","Horror","Memoir","Mystery","Mythology","Philosophy","Poetry","Psychology","Religion","Romance","Science Fiction","Thriller","Western","Young Adult"],L$1=["Academic Press","Ace Books","Addison-Wesley","Adis International","Airiti Press","Allen Ltd","Andrews McMeel Publishing","Anova Books","Anvil Press Poetry","Applewood Books","Apress","Athabasca University Press","Atheneum Books","Atheneum Publishers","Atlantic Books","Atlas Press","BBC Books","Ballantine Books","Banner of Truth Trust","Bantam Books","Bantam Spectra","Barrie & Jenkins","Basic Books","Belknap Press","Bella Books","Bellevue Literary Press","Berg Publishers","Berkley Books","Bison Books","Black Dog Publishing","Black Library","Black Sparrow Books","Blackie and Son Limited","Blackstaff Press","Blackwell Publishing","Bloodaxe Books","Bloomsbury Publishing Plc","Blue Ribbon Books","Book League of America","Book Works","Booktrope","Borgo Press","Bowes & Bowes","Boydell & Brewer","Breslov Research Institute","Brill","Brimstone Press","Broadview Press","Burns & Oates","Butterworth-Heinemann","Caister Academic Press","Cambridge University Press","Candlewick Press","Canongate Books","Carcanet Press","Carlton Books","Carlton Publishing Group","Carnegie Mellon University Press","Casemate Publishers","Cengage Learning","Central European University Press","Chambers Harrap","Charles Scribner's Sons","Chatto and Windus","Chick Publications","Chronicle Books","Churchill Livingstone","Cisco Press","City Lights Publishers","Cloverdale Corporation","D. Appleton & Company","D. Reidel","DAW Books","Da Capo Press","Daedalus Publishing","Dalkey Archive Press","Darakwon Press","David & Charles","Dedalus Books","Del Rey Books","E. P. Dutton","ECW Press","Earthscan","Edupedia Publications","Eel Pie Publishing","Eerdmans Publishing","Ellora's Cave","Elsevier","Emerald Group Publishing","Etruscan Press","FabJob","Faber and Faber","Fairview Press","Farrar, Straus & Giroux","Fearless Books","Felony & Mayhem Press","Firebrand Books","Flame Tree Publishing","Focal Press","G-Unit Books","G. P. Putnam's Sons","Gaspereau Press","Gay Men's Press","Gefen Publishing House","George H. Doran Company","George Newnes","George Routledge & Sons","Godwit Press","Golden Cockerel Press","HMSO","Hachette Book Group USA","Hackett Publishing Company","Hamish Hamilton","Happy House","Harcourt Assessment","Harcourt Trade Publishers","Harlequin Enterprises Ltd","Harper & Brothers","Harper & Row","HarperCollins","HarperPrism","HarperTrophy","Harry N. Abrams, Inc.","Harvard University Press","Harvest House","Harvill Press at Random House","Hawthorne Books","Hay House","Haynes Manuals","Heyday Books","Hodder & Stoughton","Hodder Headline","Hogarth Press","Holland Park Press","Holt McDougal","Horizon Scientific Press","Ian Allan Publishing","Ignatius Press","Imperial War Museum","Indiana University Press","J. M. Dent","Jaico Publishing House","Jarrolds Publishing","John Blake Publishing","Karadi Tales","Kensington Books","Kessinger Publishing","Kodansha","Kogan Page","Koren Publishers Jerusalem","Ladybird Books","Leaf Books","Leafwood Publishers","Left Book Club","Legend Books","Lethe Press","Libertas Academica","Liberty Fund","Library of America","Lion Hudson","Macmillan Publishers","Mainstream Publishing","Manchester University Press","Mandrake Press","Mandrake of Oxford","Manning Publications","Manor House Publishing","Mapin Publishing","Marion Boyars Publishers","Mark Batty Publisher","Marshall Cavendish","Marshall Pickering","Martinus Nijhoff Publishers","Mascot Books","Matthias Media","McClelland and Stewart","McFarland & Company","McGraw Hill Financial","McGraw-Hill Education","Medknow Publications","Naiad Press","Nauka","NavPress","New Directions Publishing","New English Library","New Holland Publishers","New Village Press","Newnes","No Starch Press","Nonesuch Press","O'Reilly Media","Oberon Books","Open Court Publishing Company","Open University Press","Orchard Books","Orion Books","Packt Publishing","Palgrave Macmillan","Pan Books","Pantheon Books at Random House","Papadakis Publisher","Parachute Publishing","Parragon","Pathfinder Press","Paulist Press","Pavilion Books","Peace Hill Press","Pecan Grove Press","Pen and Sword Books","Penguin Books","Random House","Reed Elsevier","Reed Publishing","SAGE Publications","Salt Publishing","Sams Publishing","Schocken Books","Scholastic Press","Seagull Books","Secker & Warburg","Shambhala Publications","Shire Books","Shoemaker & Hoard Publishers","Shuter & Shooter Publishers","Sidgwick & Jackson","Signet Books","Simon & Schuster","St. Martin's Press","T & T Clark","Tachyon Publications","Tammi","Target Books","Tarpaulin Sky Press","Tartarus Press","Tate Publishing & Enterprises","Taunton Press","Taylor & Francis","Ten Speed Press","UCL Press","Unfinished Monument Press","United States Government Publishing Office","University of Akron Press","University of Alaska Press","University of California Press","University of Chicago Press","University of Michigan Press","University of Minnesota Press","University of Nebraska Press","Velazquez Press","Verso Books","Victor Gollancz Ltd","Viking Press","Vintage Books","Vintage Books at Random House","Virago Press","Virgin Publishing","Voyager Books","Zed Books","Ziff Davis Media","Zondervan"],D$1=["A Song of Ice and Fire","Anna Karenina","Colonel Race","Discworld","Dune","Harry Potter","Hercule Poirot","His Dark Materials","Jane Austen Murder Mysteries","Little Women","Outlander","Percy Jackson","Sherlock Holmes","The Arc of a Scythe","The Bartimaeus Trilogy","The Border Trilogy","The Chronicles of Narnia","The Dark Tower","The Dresden Files","The Eighth Life","The Foundation Series","The Hitchhiker's Guide to the Galaxy","The Hunger Games","The Infinity Cycle","The Inheritance Cycle","The Lord of the Rings","The Maze Runner","The Prison Healer","The Red Rising Saga","The Southern Reach","The Wheel of Time","Thursday Next Series","Twilight","War and Peace"],R$1=["1984","20,000 Leagues Under the Sea","A Bend in the River","A Brief History of Time","A Clockwork Orange","A Confederacy of Dunces","A Doll's House","A Handful of Dust","A Modest Proposal","A Passage to India","A Portrait of the Artist as a Young Man","A Room with a View","A Study in Scarlet","A Tale of Two Cities","A Wrinkle in Time","Absalom, Absalom!","Adventures of Huckleberry Finn","Alice's Adventures in Wonderland","All Quiet on the Western Front","All the King's Men","American Pastoral","An American Tragedy","And Then There Were None","Animal Farm","Anna Karenina","Anne of Green Gables","Are You There God? It's Me, Margaret","As I Lay Dying","Atlas Shrugged","Atonement","Austerlitz","Beloved","Beyond Good and Evil","Bible","Bleak House","Blood Meridian","Brave New World","Brideshead Revisited","Candide","Carmilla","Catch-22","Charlie and the Chocolate Factory","Charlotte's Web","Clarissa","Cranford","Crime and Punishment","Dao De Jing: A Minimalist Translation","David Copperfield","Deliverance","Don Quixote","Dora","Dr. Zhivago","Dracula","Dubliners","Dune","East of Eden","Emma","Fahrenheit 451","Faust","For Whom the Bell Tolls","Frankenstein","Freakonomics","Go Tell It on the Mountain","Gone with the Wind","Great Expectations","Grimms' Fairy Tales","Gulliver's Travels","Hamlet","Harry Potter and the Sorcerer's Stone","Heart of Darkness","Herzog","His Dark Materials","Hitting the line","Housekeeping","I, Claudius","If on a Winter's Night a Traveler","In Cold Blood","In Search of Lost Time","Invisible Man","It","Jane Eyre","Josefine Mutzenbacher","Jude the Obscure","L.A. Confidential","Leaves of Grass","Les Miserables","Life of Pi","Little Women","Lolita","Long Walk to Freedom","Lord Jim","Lord of the Flies","Lucky Jim","Madame Bovary","Malone Dies","Meditations","Men Without Women","Metamorphosis","Middlemarch","Midnight's Children","Moby Dick","Money","Mrs. Dalloway","My Bondage and My Freedom","My Life","Native Son","Neuromancer","Never Let Me Go","Nightmare Abbey","Nineteen Eighty Four","Nostromo","Notes from the Underground","Of Mice and Men","Oliver Twist","On the Duty of Civil Disobedience","On the Road","One Flew Over the Cuckoo's Nest","One Hundred Years of Solitude","One Thousand and One Nights","Oscar and Lucinda","Pale Fire","Paradise Lost","Peter Pan","Portnoy's Complaint","Pride and Prejudice","Rabbit, Run","Republic","Revolutionary Road","Robinson Crusoe","Romeo and Juliet","Ruth Fielding in Alaska","Scoop","Second Treatise of Government","Slaughterhouse Five","Stories of Anton Chekhov","Sybil","Tess of the d'Urbervilles","The Adventures of Augie March","The Adventures of Huckleberry Finn","The Adventures of Sherlock Holmes","The Adventures of Tom Sawyer","The Aeneid","The Alchemist","The Ambassadors","The Art of War","The Big Sleep","The Black Sheep","The Blue Castle","The Brief Wondrous Life of Oscar Wao","The Brothers Karamazov","The Call of the Wild","The Canterbury Tales","The Catcher in the Rye","The Color Purple","The Complete Works of Edgar Allen Poe","The Corrections","The Count of Monte Cristo","The Day of the Locust","The Diary of a Nobody","The Diary of a Young Girl","The Divine Comedy","The Enchanted April","The Fountainhead","The Golden Bowl","The Golden Notebook","The Good Soldier","The Grapes of Wrath","The Great Gatsby","The Handmaid's Tale","The Heart is a Lonely Hunter","The Heart of the Matter","The Hobbit","The Hound of the Baskervilles","The Idiot","The Iliad","The King in Yellow","The Kite Runner","The Lion, the Witch, and the Wardrobe","The Little Prince","The Lord of the Rings","The Magic Mountain","The Maltese Falcon","The Master and Margarita","The Moviegoer","The Naked and the Dead","The Odyssey","The Old Man and the Sea","The Pickwick Papers","The Picture of Dorian Gray","The Pilgrim's Progress","The Pillars of the Earth","The Plague","The Portrait of a Lady","The Prime of Miss Jean Brodie","The Prince","The Problems of Philosophy","The Prophet","The Pursuit of Love","The Rainbow","The Red and the Black","The Remains of the Day","The Republic","The Scarlet Letter","The Sleepwalkers","The Sound and the Fury","The Stand","The Strange Case of Dr. Jekyll and Mr. Hyde","The Stranger","The Sun Also Rises","The Thirty-Nine Steps","The Three Musketeers","The Time Machine","The Tin Drum","The Trial","The War of the Worlds","The Waste Land","The Way We Live Now","The Wind in the Willows","The Woman in White","The Wonderful Wizard of Oz","The Works of Edgar Allan Poe","The Yellow Wallpaper","Things Fall Apart","Tinker, Tailor, Soldier, Spy","To Kill a Mockingbird","To the Lighthouse","Tom Jones","Treasure Island","Tristram Shandy","Tropic of Cancer","U.S.A. Trilogy","Ulysses","Uncle Tom's Cabin","Under the Volcano","Underworld","Vanity Fair","Walden","War and Peace","Watchmen","Winnie-the-Pooh","Wuthering Heights"],Xa={author:T$1,format:M$1,genre:w$1,publisher:L$1,series:D$1,title:R$1},P$1=Xa,H$1=["###-###-####","(###) ###-####","1-###-###-####","###.###.####"],$a={formats:H$1},W$1=$a,G$1=["azure","black","blue","cyan","fuchsia","gold","green","grey","indigo","ivory","lavender","lime","magenta","maroon","mint green","olive","orange","orchid","pink","plum","purple","red","salmon","silver","sky blue","tan","teal","turquoise","violet","white","yellow"],er$1={human:G$1},F=er$1,N=["Automotive","Baby","Beauty","Books","Clothing","Computers","Electronics","Games","Garden","Grocery","Health","Home","Industrial","Jewelry","Kids","Movies","Music","Outdoors","Shoes","Sports","Tools","Toys"],E=["Discover the {{animal.type}}-like agility of our {{commerce.product}}, perfect for {{word.adjective}} users","Discover the {{word.adjective}} new {{commerce.product}} with an exciting mix of {{commerce.productMaterial}} ingredients","Ergonomic {{commerce.product}} made with {{commerce.productMaterial}} for all-day {{word.adjective}} support","Experience the {{color.human}} brilliance of our {{commerce.product}}, perfect for {{word.adjective}} environments","Featuring {{science.chemical_element.name}}-enhanced technology, our {{commerce.product}} offers unparalleled {{word.adjective}} performance","Innovative {{commerce.product}} featuring {{word.adjective}} technology and {{commerce.productMaterial}} construction","Introducing the {{location.country}}-inspired {{commerce.product}}, blending {{word.adjective}} style with local craftsmanship","New {{color.human}} {{commerce.product}} with ergonomic design for {{word.adjective}} comfort",'New {{commerce.product}} model with {{number.int({"min": 1, "max": 100})}} GB RAM, {{number.int({"min": 1, "max": 1000})}} GB storage, and {{word.adjective}} features',"Our {{animal.type}}-friendly {{commerce.product}} ensures {{word.adjective}} comfort for your pets","Our {{food.adjective}}-inspired {{commerce.product}} brings a taste of luxury to your {{word.adjective}} lifestyle","Professional-grade {{commerce.product}} perfect for {{word.adjective}} training and recreational use","Savor the {{food.adjective}} essence in our {{commerce.product}}, designed for {{word.adjective}} culinary adventures","Stylish {{commerce.product}} designed to make you stand out with {{word.adjective}} looks","The sleek and {{word.adjective}} {{commerce.product}} comes with {{color.human}} LED lighting for smart functionality","The {{color.human}} {{commerce.product}} combines {{location.country}} aesthetics with {{science.chemical_element.name}}-based durability","The {{company.catchPhrase}} {{commerce.product}} offers reliable performance and {{word.adjective}} design","The {{person.firstName}} {{commerce.product}} is the latest in a series of {{word.adjective}} products from {{company.name}}","{{commerce.productAdjective}} {{commerce.product}} designed with {{commerce.productMaterial}} for {{word.adjective}} performance","{{company.name}}'s most advanced {{commerce.product}} technology increases {{word.adjective}} capabilities"],J$1={adjective:["Awesome","Bespoke","Electronic","Elegant","Ergonomic","Fantastic","Fresh","Frozen","Generic","Gorgeous","Handcrafted","Handmade","Incredible","Intelligent","Licensed","Luxurious","Modern","Oriental","Practical","Recycled","Refined","Rustic","Sleek","Small","Soft","Tasty","Unbranded"],material:["Aluminum","Bamboo","Bronze","Ceramic","Concrete","Cotton","Gold","Granite","Marble","Metal","Plastic","Rubber","Silk","Steel","Wooden"],product:["Bacon","Ball","Bike","Car","Chair","Cheese","Chicken","Chips","Computer","Fish","Gloves","Hat","Keyboard","Mouse","Pants","Pizza","Salad","Sausages","Shirt","Shoes","Soap","Table","Towels","Tuna"]},ar$1={department:N,product_description:E,product_name:J$1},I$1=ar$1,K$1=["AI-driven","Adaptive","Advanced","Automated","Balanced","Business-focused","Centralized","Compatible","Configurable","Cross-platform","Customer-focused","Customizable","Decentralized","Devolved","Digitized","Distributed","Diverse","Enhanced","Ergonomic","Exclusive","Expanded","Extended","Face to face","Focused","Front-line","Fully-configurable","Fundamental","Future-proofed","Grass-roots","Horizontal","Immersive","Implemented","Innovative","Integrated","Intuitive","Managed","Monitored","Multi-tiered","Networked","Open-architected","Open-source","Operative","Optimized","Optional","Organic","Organized","Persevering","Persistent","Phased","Polarised","Proactive","Profit-focused","Profound","Programmable","Progressive","Public-key","Quality-focused","Reactive","Realigned","Reduced","Reverse-engineered","Robust","Seamless","Secured","Self-enabling","Sharable","Smart","Stand-alone","Streamlined","Sustainable","Synchronised","Team-oriented","Total","Triple-buffered","Universal","Upgradable","User-centric","User-friendly","Versatile","Virtual","Visionary"],O$1=["24/7","AI-driven","B2B","B2C","back-end","best-of-breed","bleeding-edge","collaborative","compelling","cross-media","cross-platform","customized","cutting-edge","decentralized","distributed","dynamic","efficient","end-to-end","enterprise","extensible","frictionless","front-end","generative","global","granular","holistic","immersive","impactful","innovative","integrated","interactive","intuitive","killer","leading-edge","magnetic","mission-critical","next-generation","one-to-one","open-source","out-of-the-box","plug-and-play","proactive","quantum","real-time","revolutionary","rich","robust","scalable","seamless","smart","sticky","strategic","sustainable","synergistic","transparent","turn-key","ubiquitous","user-centric","value-added","vertical","viral","virtual","visionary","world-class"],x$1=["AI","ROI","applications","architectures","blockchains","channels","communities","content","convergence","deliverables","e-commerce","experiences","functionalities","infrastructures","initiatives","interfaces","large language models","lifetime value","markets","methodologies","metrics","mindshare","models","networks","niches","paradigms","partnerships","platforms","relationships","schemas","smart contracts","solutions","supply-chains","synergies","systems","technologies","users","web services"],z$1=["aggregate","architect","benchmark","brand","collaborate","cultivate","deliver","deploy","disintermediate","drive","embrace","empower","enable","engage","engineer","enhance","evolve","expedite","exploit","extend","facilitate","gamify","generate","grow","harness","implement","incentivize","incubate","innovate","integrate","iterate","leverage","maximize","mesh","monetize","optimize","orchestrate","productize","redefine","reinvent","repurpose","revolutionize","scale","seize","simplify","strategize","streamline","syndicate","synthesize","target","transform","transition","unleash","utilize","visualize","whiteboard"],V$1=["24 hour","24/7","AI-powered","actuating","analyzing","asymmetric","asynchronous","attitude-oriented","bifurcated","bottom-line","clear-thinking","client-driven","client-server","cloud-native","coherent","cohesive","composite","content-based","context-sensitive","contextually-based","data-driven","dedicated","demand-driven","directional","discrete","disintermediate","dynamic","eco-centric","empowering","encompassing","executive","explicit","exuding","fault-tolerant","fresh-thinking","full-range","global","heuristic","high-level","holistic","homogeneous","human-resource","hybrid","immersive","impactful","incremental","intangible","interactive","intermediate","leading edge","local","logistical","maximized","methodical","mission-critical","mobile","modular","motivating","national","needs-based","neutral","next generation","optimal","optimizing","radical","real-time","reciprocal","regional","resilient","responsive","scalable","secondary","stable","static","sustainable","system-worthy","systematic","systemic","tangible","tertiary","transitional","uniform","user-facing","value-added","well-modulated","zero administration","zero defect","zero tolerance","zero trust"],Y$1=["Group","Inc","LLC","and Sons"],j$1=["{{person.last_name.generic}} - {{person.last_name.generic}}","{{person.last_name.generic}} {{company.legal_entity_type}}","{{person.last_name.generic}}, {{person.last_name.generic}} and {{person.last_name.generic}}"],q$1=["ability","access","adapter","algorithm","alliance","analyzer","application","approach","architecture","archive","array","artificial intelligence","attitude","benchmark","budgetary management","capability","capacity","challenge","circuit","collaboration","complexity","concept","conglomeration","contingency","core","customer loyalty","data-warehouse","database","definition","emulation","encoding","encryption","firmware","flexibility","focus group","forecast","frame","framework","function","functionalities","generative AI","hardware","help-desk","hierarchy","hub","implementation","infrastructure","initiative","installation","instruction set","interface","internet solution","intranet","knowledge base","knowledge user","leverage","local area network","matrices","matrix","methodology","microservice","middleware","migration","model","moderator","monitoring","moratorium","neural-net","open architecture","orchestration","paradigm","parallelism","policy","portal","pricing structure","process improvement","product","productivity","project","projection","protocol","service-desk","software","solution","standardization","strategy","structure","success","support","synergy","system engine","task-force","throughput","time-frame","toolset","utilisation","website","workforce"],rr$1={adjective:K$1,buzz_adjective:O$1,buzz_noun:x$1,buzz_verb:z$1,descriptor:V$1,legal_entity_type:Y$1,name_pattern:j$1,noun:q$1},U$1=rr$1,Z$1=["avatar","category","comment","createdAt","email","group","id","name","password","phone","status","title","token","updatedAt"],or$1={column:Z$1},_$1=or$1,Q$1={wide:["April","August","December","February","January","July","June","March","May","November","October","September"],abbr:["Apr","Aug","Dec","Feb","Jan","Jul","Jun","Mar","May","Nov","Oct","Sep"]},X$1={wide:["Friday","Monday","Saturday","Sunday","Thursday","Tuesday","Wednesday"],abbr:["Fri","Mon","Sat","Sun","Thu","Tue","Wed"]},nr$1={month:Q$1,weekday:X$1},$$1=nr$1,ee$1=["Auto Loan","Checking","Credit Card","Home Loan","Investment","Money Market","Personal Loan","Savings"],ae$1=["34##-######-####L","37##-######-####L"],re$1=["30[0-5]#-######-###L","36##-######-###L","54##-####-####-###L"],oe$1=["6011-####-####-###L","64[4-9]#-####-####-###L","65##-####-####-###L"],ne$1=["3528-####-####-###L","3529-####-####-###L","35[3-8]#-####-####-###L"],ie$1=["2[221-720]-####-####-###L","5[1-5]##-####-####-###L"],te$1=["4###########L","4###-####-####-###L"],ir$1={american_express:ae$1,diners_club:re$1,discover:oe$1,jcb:ne$1,mastercard:ie$1,visa:te$1},le$1=ir$1,se$1=[{name:"UAE Dirham",code:"AED",symbol:"",numericCode:"784"},{name:"Afghani",code:"AFN",symbol:"؋",numericCode:"971"},{name:"Lek",code:"ALL",symbol:"Lek",numericCode:"008"},{name:"Armenian Dram",code:"AMD",symbol:"",numericCode:"051"},{name:"Netherlands Antillian Guilder",code:"ANG",symbol:"ƒ",numericCode:"532"},{name:"Kwanza",code:"AOA",symbol:"",numericCode:"973"},{name:"Argentine Peso",code:"ARS",symbol:"$",numericCode:"032"},{name:"Australian Dollar",code:"AUD",symbol:"$",numericCode:"036"},{name:"Aruban Guilder",code:"AWG",symbol:"ƒ",numericCode:"533"},{name:"Azerbaijanian Manat",code:"AZN",symbol:"ман",numericCode:"944"},{name:"Convertible Marks",code:"BAM",symbol:"KM",numericCode:"977"},{name:"Barbados Dollar",code:"BBD",symbol:"$",numericCode:"052"},{name:"Taka",code:"BDT",symbol:"",numericCode:"050"},{name:"Bulgarian Lev",code:"BGN",symbol:"лв",numericCode:"975"},{name:"Bahraini Dinar",code:"BHD",symbol:"",numericCode:"048"},{name:"Burundi Franc",code:"BIF",symbol:"",numericCode:"108"},{name:"Bermudian Dollar (customarily known as Bermuda Dollar)",code:"BMD",symbol:"$",numericCode:"060"},{name:"Brunei Dollar",code:"BND",symbol:"$",numericCode:"096"},{name:"Boliviano boliviano",code:"BOB",symbol:"Bs",numericCode:"068"},{name:"Brazilian Real",code:"BRL",symbol:"R$",numericCode:"986"},{name:"Bahamian Dollar",code:"BSD",symbol:"$",numericCode:"044"},{name:"Pula",code:"BWP",symbol:"P",numericCode:"072"},{name:"Belarusian Ruble",code:"BYN",symbol:"Rbl",numericCode:"933"},{name:"Belize Dollar",code:"BZD",symbol:"BZ$",numericCode:"084"},{name:"Canadian Dollar",code:"CAD",symbol:"$",numericCode:"124"},{name:"Congolese Franc",code:"CDF",symbol:"",numericCode:"976"},{name:"Swiss Franc",code:"CHF",symbol:"CHF",numericCode:"756"},{name:"Chilean Peso",code:"CLP",symbol:"$",numericCode:"152"},{name:"Yuan Renminbi",code:"CNY",symbol:"¥",numericCode:"156"},{name:"Colombian Peso",code:"COP",symbol:"$",numericCode:"170"},{name:"Costa Rican Colon",code:"CRC",symbol:"₡",numericCode:"188"},{name:"Cuban Peso",code:"CUP",symbol:"₱",numericCode:"192"},{name:"Cape Verde Escudo",code:"CVE",symbol:"",numericCode:"132"},{name:"Czech Koruna",code:"CZK",symbol:"Kč",numericCode:"203"},{name:"Djibouti Franc",code:"DJF",symbol:"",numericCode:"262"},{name:"Danish Krone",code:"DKK",symbol:"kr",numericCode:"208"},{name:"Dominican Peso",code:"DOP",symbol:"RD$",numericCode:"214"},{name:"Algerian Dinar",code:"DZD",symbol:"",numericCode:"012"},{name:"Egyptian Pound",code:"EGP",symbol:"£",numericCode:"818"},{name:"Nakfa",code:"ERN",symbol:"",numericCode:"232"},{name:"Ethiopian Birr",code:"ETB",symbol:"",numericCode:"230"},{name:"Euro",code:"EUR",symbol:"€",numericCode:"978"},{name:"Fiji Dollar",code:"FJD",symbol:"$",numericCode:"242"},{name:"Falkland Islands Pound",code:"FKP",symbol:"£",numericCode:"238"},{name:"Pound Sterling",code:"GBP",symbol:"£",numericCode:"826"},{name:"Lari",code:"GEL",symbol:"",numericCode:"981"},{name:"Cedi",code:"GHS",symbol:"",numericCode:"936"},{name:"Gibraltar Pound",code:"GIP",symbol:"£",numericCode:"292"},{name:"Dalasi",code:"GMD",symbol:"",numericCode:"270"},{name:"Guinea Franc",code:"GNF",symbol:"",numericCode:"324"},{name:"Quetzal",code:"GTQ",symbol:"Q",numericCode:"320"},{name:"Guyana Dollar",code:"GYD",symbol:"$",numericCode:"328"},{name:"Hong Kong Dollar",code:"HKD",symbol:"$",numericCode:"344"},{name:"Lempira",code:"HNL",symbol:"L",numericCode:"340"},{name:"Gourde",code:"HTG",symbol:"",numericCode:"332"},{name:"Forint",code:"HUF",symbol:"Ft",numericCode:"348"},{name:"Rupiah",code:"IDR",symbol:"Rp",numericCode:"360"},{name:"New Israeli Sheqel",code:"ILS",symbol:"₪",numericCode:"376"},{name:"Bhutanese Ngultrum",code:"BTN",symbol:"Nu",numericCode:"064"},{name:"Indian Rupee",code:"INR",symbol:"₹",numericCode:"356"},{name:"Iraqi Dinar",code:"IQD",symbol:"",numericCode:"368"},{name:"Iranian Rial",code:"IRR",symbol:"﷼",numericCode:"364"},{name:"Iceland Krona",code:"ISK",symbol:"kr",numericCode:"352"},{name:"Jamaican Dollar",code:"JMD",symbol:"J$",numericCode:"388"},{name:"Jordanian Dinar",code:"JOD",symbol:"",numericCode:"400"},{name:"Yen",code:"JPY",symbol:"¥",numericCode:"392"},{name:"Kenyan Shilling",code:"KES",symbol:"",numericCode:"404"},{name:"Som",code:"KGS",symbol:"лв",numericCode:"417"},{name:"Riel",code:"KHR",symbol:"៛",numericCode:"116"},{name:"Comoro Franc",code:"KMF",symbol:"",numericCode:"174"},{name:"North Korean Won",code:"KPW",symbol:"₩",numericCode:"408"},{name:"Won",code:"KRW",symbol:"₩",numericCode:"410"},{name:"Kuwaiti Dinar",code:"KWD",symbol:"",numericCode:"414"},{name:"Cayman Islands Dollar",code:"KYD",symbol:"$",numericCode:"136"},{name:"Tenge",code:"KZT",symbol:"лв",numericCode:"398"},{name:"Kip",code:"LAK",symbol:"₭",numericCode:"418"},{name:"Lebanese Pound",code:"LBP",symbol:"£",numericCode:"422"},{name:"Sri Lanka Rupee",code:"LKR",symbol:"₨",numericCode:"144"},{name:"Liberian Dollar",code:"LRD",symbol:"$",numericCode:"430"},{name:"Libyan Dinar",code:"LYD",symbol:"",numericCode:"434"},{name:"Moroccan Dirham",code:"MAD",symbol:"",numericCode:"504"},{name:"Moldovan Leu",code:"MDL",symbol:"",numericCode:"498"},{name:"Malagasy Ariary",code:"MGA",symbol:"",numericCode:"969"},{name:"Denar",code:"MKD",symbol:"ден",numericCode:"807"},{name:"Kyat",code:"MMK",symbol:"",numericCode:"104"},{name:"Tugrik",code:"MNT",symbol:"₮",numericCode:"496"},{name:"Pataca",code:"MOP",symbol:"",numericCode:"446"},{name:"Ouguiya",code:"MRU",symbol:"",numericCode:"929"},{name:"Mauritius Rupee",code:"MUR",symbol:"₨",numericCode:"480"},{name:"Rufiyaa",code:"MVR",symbol:"",numericCode:"462"},{name:"Kwacha",code:"MWK",symbol:"",numericCode:"454"},{name:"Mexican Peso",code:"MXN",symbol:"$",numericCode:"484"},{name:"Malaysian Ringgit",code:"MYR",symbol:"RM",numericCode:"458"},{name:"Metical",code:"MZN",symbol:"MT",numericCode:"943"},{name:"Naira",code:"NGN",symbol:"₦",numericCode:"566"},{name:"Cordoba Oro",code:"NIO",symbol:"C$",numericCode:"558"},{name:"Norwegian Krone",code:"NOK",symbol:"kr",numericCode:"578"},{name:"Nepalese Rupee",code:"NPR",symbol:"₨",numericCode:"524"},{name:"New Zealand Dollar",code:"NZD",symbol:"$",numericCode:"554"},{name:"Rial Omani",code:"OMR",symbol:"﷼",numericCode:"512"},{name:"Balboa",code:"PAB",symbol:"B/.",numericCode:"590"},{name:"Nuevo Sol",code:"PEN",symbol:"S/.",numericCode:"604"},{name:"Kina",code:"PGK",symbol:"",numericCode:"598"},{name:"Philippine Peso",code:"PHP",symbol:"Php",numericCode:"608"},{name:"Pakistan Rupee",code:"PKR",symbol:"₨",numericCode:"586"},{name:"Zloty",code:"PLN",symbol:"zł",numericCode:"985"},{name:"Guarani",code:"PYG",symbol:"Gs",numericCode:"600"},{name:"Qatari Rial",code:"QAR",symbol:"﷼",numericCode:"634"},{name:"New Leu",code:"RON",symbol:"lei",numericCode:"946"},{name:"Serbian Dinar",code:"RSD",symbol:"Дин.",numericCode:"941"},{name:"Russian Ruble",code:"RUB",symbol:"руб",numericCode:"643"},{name:"Rwanda Franc",code:"RWF",symbol:"",numericCode:"646"},{name:"Saudi Riyal",code:"SAR",symbol:"﷼",numericCode:"682"},{name:"Solomon Islands Dollar",code:"SBD",symbol:"$",numericCode:"090"},{name:"Seychelles Rupee",code:"SCR",symbol:"₨",numericCode:"690"},{name:"Sudanese Pound",code:"SDG",symbol:"",numericCode:"938"},{name:"Swedish Krona",code:"SEK",symbol:"kr",numericCode:"752"},{name:"Singapore Dollar",code:"SGD",symbol:"$",numericCode:"702"},{name:"Saint Helena Pound",code:"SHP",symbol:"£",numericCode:"654"},{name:"Leone",code:"SLE",symbol:"",numericCode:"925"},{name:"Somali Shilling",code:"SOS",symbol:"S",numericCode:"706"},{name:"Surinam Dollar",code:"SRD",symbol:"$",numericCode:"968"},{name:"South Sudanese pound",code:"SSP",symbol:"",numericCode:"728"},{name:"Dobra",code:"STN",symbol:"Db",numericCode:"930"},{name:"Syrian Pound",code:"SYP",symbol:"£",numericCode:"760"},{name:"Lilangeni",code:"SZL",symbol:"",numericCode:"748"},{name:"Baht",code:"THB",symbol:"฿",numericCode:"764"},{name:"Somoni",code:"TJS",symbol:"",numericCode:"972"},{name:"Manat",code:"TMT",symbol:"",numericCode:"934"},{name:"Tunisian Dinar",code:"TND",symbol:"",numericCode:"788"},{name:"Pa'anga",code:"TOP",symbol:"",numericCode:"776"},{name:"Turkish Lira",code:"TRY",symbol:"₺",numericCode:"949"},{name:"Trinidad and Tobago Dollar",code:"TTD",symbol:"TT$",numericCode:"780"},{name:"New Taiwan Dollar",code:"TWD",symbol:"NT$",numericCode:"901"},{name:"Tanzanian Shilling",code:"TZS",symbol:"",numericCode:"834"},{name:"Hryvnia",code:"UAH",symbol:"₴",numericCode:"980"},{name:"Uganda Shilling",code:"UGX",symbol:"",numericCode:"800"},{name:"US Dollar",code:"USD",symbol:"$",numericCode:"840"},{name:"Peso Uruguayo",code:"UYU",symbol:"$U",numericCode:"858"},{name:"Uzbekistan Sum",code:"UZS",symbol:"лв",numericCode:"860"},{name:"Venezuelan bolívar",code:"VES",symbol:"Bs",numericCode:"928"},{name:"Dong",code:"VND",symbol:"₫",numericCode:"704"},{name:"Vatu",code:"VUV",symbol:"",numericCode:"548"},{name:"Tala",code:"WST",symbol:"",numericCode:"882"},{name:"CFA Franc BEAC",code:"XAF",symbol:"",numericCode:"950"},{name:"East Caribbean Dollar",code:"XCD",symbol:"$",numericCode:"951"},{name:"CFA Franc BCEAO",code:"XOF",symbol:"",numericCode:"952"},{name:"CFP Franc",code:"XPF",symbol:"",numericCode:"953"},{name:"Yemeni Rial",code:"YER",symbol:"﷼",numericCode:"886"},{name:"Rand",code:"ZAR",symbol:"R",numericCode:"710"},{name:"Lesotho Loti",code:"LSL",symbol:"",numericCode:"426"},{name:"Namibia Dollar",code:"NAD",symbol:"N$",numericCode:"516"},{name:"Zambian Kwacha",code:"ZMW",symbol:"K",numericCode:"967"},{name:"Zimbabwe Dollar",code:"ZWL",symbol:"",numericCode:"932"}],de$1=["A {{finance.transactionType}} for {{finance.currencyCode}} {{finance.amount}} was made at {{company.name}} via card ending ****{{string.numeric(4)}} on account ***{{string.numeric(4)}}.","A {{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} occurred at {{company.name}} using a card ending in ****{{string.numeric(4)}} for account ***{{string.numeric(4)}}.","Payment of {{finance.currencyCode}} {{finance.amount}} for {{finance.transactionType}} at {{company.name}}, processed with card ending ****{{string.numeric(4)}} linked to account ***{{string.numeric(4)}}.","Transaction alert: {{finance.transactionType}} at {{company.name}} using card ending ****{{string.numeric(4)}} for an amount of {{finance.currencyCode}} {{finance.amount}} on account ***{{string.numeric(4)}}.","You made a {{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} at {{company.name}} using card ending in ****{{string.numeric(4)}} from account ***{{string.numeric(4)}}.","Your {{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} at {{company.name}} was successful. Charged via card ****{{string.numeric(4)}} to account ***{{string.numeric(4)}}.","{{finance.transactionType}} at {{company.name}} with a card ending in ****{{string.numeric(4)}} for {{finance.currencyCode}} {{finance.amount}} from account ***{{string.numeric(4)}}.","{{finance.transactionType}} confirmed at {{company.name}} for {{finance.currencyCode}} {{finance.amount}}, card ending in ****{{string.numeric(4)}} associated with account ***{{string.numeric(4)}}.","{{finance.transactionType}} of {{finance.currencyCode}} {{finance.amount}} at {{company.name}} charged to account ending in {{string.numeric(4)}} using card ending in ****{{string.numeric(4)}}.","{{finance.transactionType}} processed at {{company.name}} for {{finance.currencyCode}} {{finance.amount}}, using card ending ****{{string.numeric(4)}}. Account: ***{{string.numeric(4)}}.","{{finance.transactionType}} transaction at {{company.name}} using card ending with ****{{string.numeric(4)}} for {{finance.currencyCode}} {{finance.amount}} in account ***{{string.numeric(4)}}."],ue$1=["deposit","invoice","payment","withdrawal"],tr$1={account_type:ee$1,credit_card:le$1,currency:se$1,transaction_description_pattern:de$1,transaction_type:ue$1},ce$1=tr$1,me$1=["bitter","creamy","crispy","crunchy","delicious","fluffy","fresh","golden","juicy","moist","rich","salty","savory","smoky","sour","spicy","sweet","tangy","tender","zesty"],he$1=["A classic pie filled with delicious {{food.meat}} and {{food.adjective}} {{food.ingredient}}, baked in a {{food.adjective}} pastry crust and topped with a golden-brown lattice.","A delightful tart combining {{food.adjective}} {{food.vegetable}} and sweet {{food.fruit}}, set in a buttery pastry shell and finished with a hint of {{food.spice}}.","A heartwarming {{food.ethnic_category}} soup, featuring fresh {{food.ingredient}} and an aromatic blend of traditional spices.","A robust {{food.adjective}} stew featuring {{food.ethnic_category}} flavors, loaded with {{food.adjective}} meat, {{food.adjective}} vegetables, and a {{food.adjective}}, {{food.adjective}} broth.","A simple {{food.fruit}} pie. No fancy stuff. Just pie.","A slow-roasted {{animal.bird}} with a {{food.adjective}}, {{food.adjective}} exterior. Stuffed with {{food.fruit}} and covered in {{food.fruit}} sauce. Sides with {{food.vegetable}} puree and wild {{food.vegetable}}.","A special {{color.human}} {{food.ingredient}} from {{location.country}}. To support the strong flavor it is sided with a tablespoon of {{food.spice}}.","A succulent {{food.meat}} steak, encased in a {{food.adjective}} {{food.spice}} crust, served with a side of {{food.spice}} mashed {{food.vegetable}}.","An exquisite {{food.meat}} roast, infused with the essence of {{food.fruit}}, slow-roasted to bring out its natural flavors and served with a side of creamy {{food.vegetable}}","Baked {{food.ingredient}}-stuffed {{food.meat}}, seasoned with {{food.spice}} and {{food.adjective}} herbs, accompanied by roasted {{food.vegetable}} medley.","Crispy fried {{food.meat}} bites, seasoned with {{food.spice}} and served with a tangy {{food.fruit}} dipping sauce.","Fresh mixed greens tossed with {{food.spice}}-rubbed {{food.meat}}, {{food.vegetable}}, and a light dressing.","Fresh {{food.ingredient}} with a pinch of {{food.spice}}, topped by a caramelized {{food.fruit}} with whipped cream","Grilled {{food.meat}} kebabs, marinated in {{food.ethnic_category}} spices and served with a fresh {{food.vegetable}} and {{food.fruit}} salad.","Hearty {{food.ingredient}} and {{food.meat}} stew, slow-cooked with {{food.spice}} and {{food.vegetable}} for a comforting, flavorful meal.","Juicy {{food.meat}}, grilled to your liking and drizzled with a bold {{food.spice}} sauce, served alongside roasted {{food.vegetable}}.","Our {{food.adjective}} {{food.meat}}, slow-cooked to perfection, accompanied by steamed {{food.vegetable}} and a rich, savory gravy.","Tender {{food.meat}} skewers, glazed with a sweet and tangy {{food.fruit}} sauce, served over a bed of fragrant jasmine rice.","Tenderly braised {{food.meat}} in a rich {{food.spice}} and {{food.vegetable}} sauce, served with a side of creamy {{food.vegetable}}.","Three {{food.ingredient}} with {{food.vegetable}}, {{food.vegetable}}, {{food.vegetable}}, {{food.vegetable}} and {{food.ingredient}}. With a side of baked {{food.fruit}}, and your choice of {{food.ingredient}} or {{food.ingredient}}.",'{{number.int({"min":1, "max":99})}}-day aged {{food.meat}} steak, with choice of {{number.int({"min":2, "max":4})}} sides.'],ye$1=["California maki","Peking duck","Philadelphia maki","arepas","barbecue ribs","bruschette with tomato","bunny chow","caesar salad","caprese salad","cauliflower penne","cheeseburger","chicken fajitas","chicken milanese","chicken parm","chicken wings","chilli con carne","ebiten maki","fettuccine alfredo","fish and chips","french fries with sausages","french toast","hummus","katsu curry","kebab","lasagne","linguine with clams","massaman curry","meatballs with sauce","mushroom risotto","pappardelle alla bolognese","pasta and beans","pasta carbonara","pasta with tomato and basil","pho","pierogi","pizza","poke","pork belly buns","pork sausage roll","poutine","ricotta stuffed ravioli","risotto with seafood","salmon nigiri","scotch eggs","seafood paella","som tam","souvlaki","stinky tofu","sushi","tacos","teriyaki chicken donburi","tiramisù","tuna sashimi","vegetable soup"],pe$1=["{{food.adjective}} {{food.ethnic_category}} stew","{{food.adjective}} {{food.meat}} with {{food.vegetable}}","{{food.ethnic_category}} {{food.ingredient}} soup","{{food.fruit}} and {{food.fruit}} tart","{{food.fruit}} pie","{{food.fruit}}-glazed {{food.meat}} skewers","{{food.fruit}}-infused {{food.meat}} roast","{{food.ingredient}} and {{food.meat}} pie","{{food.ingredient}}-infused {{food.meat}}","{{food.meat}} steak","{{food.meat}} with {{food.fruit}} sauce","{{food.spice}}-crusted {{food.meat}}","{{food.spice}}-rubbed {{food.meat}} salad","{{food.vegetable}} salad","{{person.first_name.generic}}'s special {{food.ingredient}}"],ge$1=["Ainu","Albanian","American","Andhra","Anglo-Indian","Arab","Argentine","Armenian","Assyrian","Awadhi","Azerbaijani","Balochi","Bangladeshi","Bashkir","Belarusian","Bengali","Berber","Brazilian","British","Buddhist","Bulgarian","Cajun","Cantonese","Caribbean","Chechen","Chinese","Chinese Islamic","Circassian","Crimean Tatar","Cypriot","Czech","Danish","Egyptian","English","Eritrean","Estonian","Ethiopian","Filipino","French","Georgian","German","Goan","Goan Catholic","Greek","Gujarati","Hyderabad","Indian","Indian Chinese","Indian Singaporean","Indonesian","Inuit","Irish","Italian","Italian-American","Jamaican","Japanese","Jewish - Israeli","Karnataka","Kazakh","Keralite","Korean","Kurdish","Laotian","Latvian","Lebanese","Lithuanian","Louisiana Creole","Maharashtrian","Malay","Malaysian Chinese","Malaysian Indian","Mangalorean","Mediterranean","Mennonite","Mexican","Mordovian","Mughal","Native American","Nepalese","New Mexican","Odia","Pakistani","Parsi","Pashtun","Pennsylvania Dutch","Peranakan","Persian","Peruvian","Polish","Portuguese","Punjabi","Québécois","Rajasthani","Romani","Romanian","Russian","Sami","Serbian","Sindhi","Slovak","Slovenian","Somali","South Indian","Soviet","Spanish","Sri Lankan","Taiwanese","Tamil","Tatar","Texan","Thai","Turkish","Udupi","Ukrainian","Vietnamese","Yamal","Zambian","Zanzibari"],be$1=["apple","apricot","aubergine","avocado","banana","berry","blackberry","blood orange","blueberry","bush tomato","butternut pumpkin","cantaloupe","cavalo","cherry","corella pear","cranberry","cumquat","currant","custard apple","custard apples daikon","date","dragonfruit","dried apricot","elderberry","feijoa","fig","fingerlime","goji berry","grape","grapefruit","guava","honeydew melon","incaberry","jarrahdale pumpkin","juniper berry","kiwi fruit","kiwiberry","lemon","lime","longan","loquat","lychee","mandarin","mango","mangosteen","melon","mulberry","nashi pear","nectarine","olive","orange","papaw","papaya","passionfruit","peach","pear","pineapple","plum","pomegranate","prune","rockmelon","snowpea","sprout","starfruit","strawberry","sultana","tangelo","tomato","watermelon"],Ce=["achacha","adzuki beans","agar","agave syrup","ajowan seed","albacore tuna","alfalfa","allspice","almond oil","almonds","amaranth","amchur","anchovies","aniseed","annatto seed","apple cider vinegar","apple juice","apple juice concentrate","apples","apricots","arborio rice","arrowroot","artichoke","arugula","asafoetida","asian greens","asian noodles","asparagus","aubergine","avocado","avocado oil","avocado spread","bacon","baking powder","baking soda","balsamic vinegar","bamboo shoots","banana","barberry","barley","barramundi","basil basmati rice","bay leaves","bean shoots","bean sprouts","beans","beef","beef stock","beetroot","berries","besan","black eyed beans","blackberries","blood oranges","blue cheese","blue eye trevalla","blue swimmer crab","blueberries","bocconcini","bok choy","bonito flakes","bonza","borlotti beans","bran","brazil nut","bread","brie","broccoli","broccolini","brown flour","brown mushrooms","brown rice","brown rice vinegar","brussels sprouts","buckwheat","buckwheat flour","buckwheat noodles","bulghur","bush tomato","butter","butter beans","buttermilk","butternut lettuce","butternut pumpkin","cabbage","cacao","cake","calamari","camellia tea oil","camembert","camomile","candle nut","cannellini beans","canola oil","cantaloupe","capers","capsicum","caraway seed","cardamom","carob carrot","carrot","cashews","cassia bark","cauliflower","cavalo","cayenne","celery","celery seed","cheddar","cherries","chestnut","chia seeds","chicken","chicken stock","chickory","chickpea","chilli pepper","chinese cabbage","chinese five spice","chives","choy sum","cinnamon","clams","cloves","cocoa powder","coconut","coconut oil","coconut water","coffee","common cultivated mushrooms","corella pear","coriander leaves","coriander seed","corn oil","corn syrup","corn tortilla","cornichons","cornmeal","cos lettuce","cottage cheese","cous cous","crabs","cranberry","cream","cream cheese","cucumber","cumin","cumquat","currants","curry leaves","curry powder","custard apples","dandelion","dark chocolate","dashi","dates","dill","dragonfruit","dried apricots","dried chinese broccoli","duck","edam","edamame","eggplant","eggs","elderberry","endive","english spinach","enoki mushrooms","extra virgin olive oil","farmed prawns","feijoa","fennel","fennel seeds","fenugreek","feta","figs","file powder","fingerlime","fish sauce","fish stock","flat mushrooms","flathead","flaxseed","flaxseed oil","flounder","flour","freekeh","french eschallots","fresh chillies","fromage blanc","fruit","galangal","garam masala","garlic","goat cheese","goat milk","goji berry","grape seed oil","grapefruit","grapes","green beans","green pepper","green tea","green tea noodles","greenwheat freekeh","gruyere","guava","gula melaka","haloumi","ham","haricot beans","harissa","hazelnut","hijiki","hiramasa kingfish","hokkien noodles","honey","honeydew melon","horseradish","hot smoked salmon","hummus","iceberg lettuce","incaberries","jarrahdale pumpkin","jasmine rice","jelly","jerusalem artichoke","jewfish","jicama","juniper berries","kale","kangaroo","kecap manis","kenchur","kidney beans","kidneys","kiwi berries","kiwi fruit","kohlrabi","kokam","kombu","koshihikari rice","kudzu","kumera","lamb","lavender flowers","leeks","lemon","lemongrass","lentils","lettuce","licorice","lime leaves","limes","liver","lobster","longan","loquats","lotus root","lychees","macadamia nut","macadamia oil","mace","mackerel","mahi mahi","mahlab","malt vinegar","mandarins","mango","mangosteens","maple syrup","margarine","marigold","marjoram","mastic","melon","milk","milk chocolate","mint","miso","molasses","monkfish","morwong","mountain bread","mozzarella","muesli","mulberries","mullet","mung beans","mussels","mustard","mustard seed","nashi pear","nasturtium","nectarines","nori","nutmeg","nutritional yeast","nuts","oat flour","oatmeal","oats","octopus","okra","olive oil","olives","omega spread","onion","oranges","oregano","oyster mushrooms","oyster sauce","oysters","pandanus leaves","papaw","papaya","paprik","parmesan cheese","parrotfish","parsley","parsnip","passionfruit","pasta","peaches","peanuts","pear","pear juice","pears","peas","pecan nut","pecorino","pepitas","peppercorns","peppermint","peppers","persimmon","pine nut","pineapple","pinto beans","pistachio nut","plums","polenta","pomegranate","poppy seed","porcini mushrooms","pork","potato flour","potatoes","provolone","prunes","pumpkin","pumpkin seed","purple carrot","purple rice","quark","quince","quinoa","radicchio","radish","raisin","raspberry","red cabbage","red lentils","red pepper","red wine","red wine vinegar","redfish","rhubarb","rice flour","rice noodles","rice paper","rice syrup","ricemilk","ricotta","rockmelon","rose water","rosemary","rye","rye bread","safflower oil","saffron","sage","sake","salmon","sardines","sausages","scallops","sea salt","semolina","sesame oil","sesame seeds","shark","shiitake mushrooms","silverbeet","slivered almonds","smoked trout","snapper","snowpea sprouts","snowpeas","soba","sour dough bread","soy","soy beans","soy flour","soy milk","soy sauce","soymilk","spearmint","spelt","spelt bread","spinach","spring onions","sprouts","squash","squid","star anise","star fruit","starfruit","stevia","strawberries","sugar","sultanas","sun-dried tomatoes","sunflower oil","sunflower seeds","sweet chilli sauce","sweet potato","swiss chard","swordfish","szechuan pepperberry","tabasco","tahini","taleggio cheese","tamari","tamarillo","tangelo","tapioca","tapioca flour","tarragon","tea","tea oil","tempeh","thyme","tinned","tofu","tom yum","tomatoes","trout","tuna","turkey","turmeric","turnips","unbleached flour","vanilla beans","vegetable oil","vegetable spaghetti","vegetable stock","vermicelli noodles","vinegar","wakame","walnut","warehou","wasabi","water","watercress","watermelon","wattleseed","wheat","wheatgrass juice","white bread","white flour","white rice","white wine","white wine vinegar","whiting wild rice","wholegrain bread","wholemeal","wholewheat flour","william pear","yeast","yellow papaw","yellowtail kingfish","yoghurt","yogurt","zucchini"],Se$1=["beef","chicken","crocodile","duck","emu","goose","kangaroo","lamb","ostrich","pigeon","pork","quail","rabbit","salmon","turkey","venison"],ke$1=["achiote seed","ajwain seed","ajwan seed","allspice","amchoor","anise","anise star","aniseed","annatto seed","arrowroot","asafoetida","baharat","balti masala","balti stir fry mix","basil","bay leaves","bbq","caraway seed","cardamom","cassia","cayenne pepper","celery","chamomile","chervil","chilli","chilli pepper","chillies","china star","chives","cinnamon","cloves","colombo","coriander","cumin","curly leaf parsley","curry","dhansak","dill","fennel seed","fenugreek","fines herbes","five spice","french lavender","galangal","garam masala","garlic","german chamomile","ginger","green cardamom","herbes de provence","jalfrezi","jerk","kaffir leaves","korma","lavender","lemon grass","lemon pepper","lime leaves","liquorice root","mace","mango","marjoram","methi","mint","mustard","nutmeg","onion seed","orange zest","oregano","paprika","parsley","pepper","peppercorns","pimento","piri piri","poppy seed","pot marjoram","poudre de colombo","ras-el-hanout","rice paper","rogan josh","rose baie","rosemary","saffron","sage","sesame seed","spearmint","sumac","sweet basil","sweet laurel","tagine","tandoori masala","tarragon","thyme","tikka masala","turmeric","vanilla","zahtar"],fe$1=["artichoke","arugula","asian greens","asparagus","bean shoots","bean sprouts","beans","beetroot","bok choy","broccoli","broccolini","brussels sprouts","butternut lettuce","cabbage","capers","carob carrot","carrot","cauliflower","celery","chilli pepper","chinese cabbage","chives","cornichons","cos lettuce","cucumber","dried chinese broccoli","eggplant","endive","english spinach","french eschallots","fresh chillies","garlic","green beans","green pepper","hijiki","iceberg lettuce","jerusalem artichoke","jicama","kale","kohlrabi","leeks","lettuce","okra","onion","parsnip","peas","peppers","potatoes","pumpkin","purple carrot","radicchio","radish","raspberry","red cabbage","red pepper","rhubarb","snowpea sprouts","spinach","squash","sun dried tomatoes","sweet potato","swiss chard","turnips","zucchini"],lr$1={adjective:me$1,description_pattern:he$1,dish:ye$1,dish_pattern:pe$1,ethnic_category:ge$1,fruit:be$1,ingredient:Ce,meat:Se$1,spice:ke$1,vegetable:fe$1},ve$1=lr$1,Ae$1=["1080p","auxiliary","back-end","bluetooth","cross-platform","digital","haptic","mobile","multi-byte","neural","online","open-source","optical","primary","redundant","solid state","virtual","wireless"],Be$1=["backing up","bypassing","calculating","compressing","connecting","copying","generating","hacking","indexing","navigating","overriding","parsing","programming","quantifying","synthesizing","transmitting"],Te$1=["alarm","application","array","bandwidth","bus","capacitor","card","circuit","driver","feed","firewall","hard drive","interface","matrix","microchip","monitor","panel","pixel","port","program","protocol","sensor","system","transmitter"],Me$1=["I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!","If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!","The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!","Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!","Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!","We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!","You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!","{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!"],we$1=["back up","bypass","calculate","compress","connect","copy","generate","hack","index","input","navigate","override","parse","program","quantify","reboot","synthesize","transmit"],sr$1={adjective:Ae$1,ingverb:Be$1,noun:Te$1,phrase:Me$1,verb:we$1},Le$1=sr$1,De$1=["biz","com","info","name","net","org"],Re$1=["example.com","example.net","example.org"],Pe$1=["gmail.com","hotmail.com","yahoo.com"],dr$1={domain_suffix:De$1,example_email:Re$1,free_email:Pe$1},He$1=dr$1,We$1=["#####","####","###"],Ge$1=["Abilene","Akron","Alafaya","Alameda","Albany","Albuquerque","Alexandria","Alhambra","Aliso Viejo","Allen","Allentown","Aloha","Alpharetta","Altadena","Altamonte Springs","Altoona","Amarillo","Ames","Anaheim","Anchorage","Anderson","Ankeny","Ann Arbor","Annandale","Antelope","Antioch","Apex","Apopka","Apple Valley","Appleton","Arcadia","Arden-Arcade","Arecibo","Arlington","Arlington Heights","Arvada","Ashburn","Asheville","Aspen Hill","Atascocita","Athens-Clarke County","Atlanta","Attleboro","Auburn","Augusta-Richmond County","Aurora","Austin","Avondale","Azusa","Bakersfield","Baldwin Park","Baltimore","Barnstable Town","Bartlett","Baton Rouge","Battle Creek","Bayamon","Bayonne","Baytown","Beaumont","Beavercreek","Beaverton","Bedford","Bel Air South","Bell Gardens","Belleville","Bellevue","Bellflower","Bellingham","Bend","Bentonville","Berkeley","Berwyn","Bethesda","Bethlehem","Billings","Biloxi","Binghamton","Birmingham","Bismarck","Blacksburg","Blaine","Bloomington","Blue Springs","Boca Raton","Boise City","Bolingbrook","Bonita Springs","Bossier City","Boston","Bothell","Boulder","Bountiful","Bowie","Bowling Green","Boynton Beach","Bozeman","Bradenton","Brandon","Brentwood","Bridgeport","Bristol","Brockton","Broken Arrow","Brookhaven","Brookline","Brooklyn Park","Broomfield","Brownsville","Bryan","Buckeye","Buena Park","Buffalo","Buffalo Grove","Burbank","Burien","Burke","Burleson","Burlington","Burnsville","Caguas","Caldwell","Camarillo","Cambridge","Camden","Canton","Cape Coral","Carlsbad","Carmel","Carmichael","Carolina","Carrollton","Carson","Carson City","Cary","Casa Grande","Casas Adobes","Casper","Castle Rock","Castro Valley","Catalina Foothills","Cathedral City","Catonsville","Cedar Hill","Cedar Park","Cedar Rapids","Centennial","Centreville","Ceres","Cerritos","Champaign","Chandler","Chapel Hill","Charleston","Charlotte","Charlottesville","Chattanooga","Cheektowaga","Chesapeake","Chesterfield","Cheyenne","Chicago","Chico","Chicopee","Chino","Chino Hills","Chula Vista","Cicero","Cincinnati","Citrus Heights","Clarksville","Clearwater","Cleveland","Cleveland Heights","Clifton","Clovis","Coachella","Coconut Creek","Coeur d'Alene","College Station","Collierville","Colorado Springs","Colton","Columbia","Columbus","Commerce City","Compton","Concord","Conroe","Conway","Coon Rapids","Coral Gables","Coral Springs","Corona","Corpus Christi","Corvallis","Costa Mesa","Council Bluffs","Country Club","Covina","Cranston","Cupertino","Cutler Bay","Cuyahoga Falls","Cypress","Dale City","Dallas","Daly City","Danbury","Danville","Davenport","Davie","Davis","Dayton","Daytona Beach","DeKalb","DeSoto","Dearborn","Dearborn Heights","Decatur","Deerfield Beach","Delano","Delray Beach","Deltona","Denton","Denver","Des Moines","Des Plaines","Detroit","Diamond Bar","Doral","Dothan","Downers Grove","Downey","Draper","Dublin","Dubuque","Duluth","Dundalk","Dunwoody","Durham","Eagan","East Hartford","East Honolulu","East Lansing","East Los Angeles","East Orange","East Providence","Eastvale","Eau Claire","Eden Prairie","Edina","Edinburg","Edmond","El Cajon","El Centro","El Dorado Hills","El Monte","El Paso","Elgin","Elizabeth","Elk Grove","Elkhart","Ellicott City","Elmhurst","Elyria","Encinitas","Enid","Enterprise","Erie","Escondido","Euclid","Eugene","Euless","Evanston","Evansville","Everett","Fairfield","Fall River","Fargo","Farmington","Farmington Hills","Fayetteville","Federal Way","Findlay","Fishers","Flagstaff","Flint","Florence-Graham","Florin","Florissant","Flower Mound","Folsom","Fond du Lac","Fontana","Fort Collins","Fort Lauderdale","Fort Myers","Fort Pierce","Fort Smith","Fort Wayne","Fort Worth","Fountain Valley","Fountainebleau","Framingham","Franklin","Frederick","Freeport","Fremont","Fresno","Frisco","Fullerton","Gainesville","Gaithersburg","Galveston","Garden Grove","Gardena","Garland","Gary","Gastonia","Georgetown","Germantown","Gilbert","Gilroy","Glen Burnie","Glendale","Glendora","Glenview","Goodyear","Grand Forks","Grand Island","Grand Junction","Grand Prairie","Grand Rapids","Grapevine","Great Falls","Greeley","Green Bay","Greensboro","Greenville","Greenwood","Gresham","Guaynabo","Gulfport","Hacienda Heights","Hackensack","Haltom City","Hamilton","Hammond","Hampton","Hanford","Harlingen","Harrisburg","Harrisonburg","Hartford","Hattiesburg","Haverhill","Hawthorne","Hayward","Hemet","Hempstead","Henderson","Hendersonville","Hesperia","Hialeah","Hicksville","High Point","Highland","Highlands Ranch","Hillsboro","Hilo","Hoboken","Hoffman Estates","Hollywood","Homestead","Honolulu","Hoover","Houston","Huntersville","Huntington","Huntington Beach","Huntington Park","Huntsville","Hutchinson","Idaho Falls","Independence","Indianapolis","Indio","Inglewood","Iowa City","Irondequoit","Irvine","Irving","Jackson","Jacksonville","Janesville","Jefferson City","Jeffersonville","Jersey City","Johns Creek","Johnson City","Joliet","Jonesboro","Joplin","Jupiter","Jurupa Valley","Kalamazoo","Kannapolis","Kansas City","Kearny","Keller","Kendale Lakes","Kendall","Kenner","Kennewick","Kenosha","Kent","Kentwood","Kettering","Killeen","Kingsport","Kirkland","Kissimmee","Knoxville","Kokomo","La Crosse","La Habra","La Mesa","La Mirada","Lacey","Lafayette","Laguna Niguel","Lake Charles","Lake Elsinore","Lake Forest","Lake Havasu City","Lake Ridge","Lakeland","Lakeville","Lakewood","Lancaster","Lansing","Laredo","Largo","Las Cruces","Las Vegas","Lauderhill","Lawrence","Lawton","Layton","League City","Lee's Summit","Leesburg","Lehi","Lehigh Acres","Lenexa","Levittown","Lewisville","Lexington-Fayette","Lincoln","Linden","Little Rock","Littleton","Livermore","Livonia","Lodi","Logan","Lombard","Lompoc","Long Beach","Longmont","Longview","Lorain","Los Angeles","Louisville/Jefferson County","Loveland","Lowell","Lubbock","Lynchburg","Lynn","Lynwood","Macon-Bibb County","Madera","Madison","Malden","Manchester","Manhattan","Mansfield","Manteca","Maple Grove","Margate","Maricopa","Marietta","Marysville","Mayaguez","McAllen","McKinney","McLean","Medford","Melbourne","Memphis","Menifee","Mentor","Merced","Meriden","Meridian","Mesa","Mesquite","Metairie","Methuen Town","Miami","Miami Beach","Miami Gardens","Middletown","Midland","Midwest City","Milford","Millcreek","Milpitas","Milwaukee","Minneapolis","Minnetonka","Minot","Miramar","Mishawaka","Mission","Mission Viejo","Missoula","Missouri City","Mobile","Modesto","Moline","Monroe","Montebello","Monterey Park","Montgomery","Moore","Moreno Valley","Morgan Hill","Mount Pleasant","Mount Prospect","Mount Vernon","Mountain View","Muncie","Murfreesboro","Murray","Murrieta","Nampa","Napa","Naperville","Nashua","Nashville-Davidson","National City","New Bedford","New Braunfels","New Britain","New Brunswick","New Haven","New Orleans","New Rochelle","New York","Newark","Newport Beach","Newport News","Newton","Niagara Falls","Noblesville","Norfolk","Normal","Norman","North Bethesda","North Charleston","North Highlands","North Las Vegas","North Lauderdale","North Little Rock","North Miami","North Miami Beach","North Port","North Richland Hills","Norwalk","Novato","Novi","O'Fallon","Oak Lawn","Oak Park","Oakland","Oakland Park","Ocala","Oceanside","Odessa","Ogden","Oklahoma City","Olathe","Olympia","Omaha","Ontario","Orange","Orem","Orland Park","Orlando","Oro Valley","Oshkosh","Overland Park","Owensboro","Oxnard","Palatine","Palm Bay","Palm Beach Gardens","Palm Coast","Palm Desert","Palm Harbor","Palm Springs","Palmdale","Palo Alto","Paradise","Paramount","Parker","Parma","Pasadena","Pasco","Passaic","Paterson","Pawtucket","Peabody","Pearl City","Pearland","Pembroke Pines","Pensacola","Peoria","Perris","Perth Amboy","Petaluma","Pflugerville","Pharr","Philadelphia","Phoenix","Pico Rivera","Pine Bluff","Pine Hills","Pinellas Park","Pittsburg","Pittsburgh","Pittsfield","Placentia","Plainfield","Plano","Plantation","Pleasanton","Plymouth","Pocatello","Poinciana","Pomona","Pompano Beach","Ponce","Pontiac","Port Arthur","Port Charlotte","Port Orange","Port St. Lucie","Portage","Porterville","Portland","Portsmouth","Potomac","Poway","Providence","Provo","Pueblo","Quincy","Racine","Raleigh","Rancho Cordova","Rancho Cucamonga","Rancho Palos Verdes","Rancho Santa Margarita","Rapid City","Reading","Redding","Redlands","Redmond","Redondo Beach","Redwood City","Reno","Renton","Reston","Revere","Rialto","Richardson","Richland","Richmond","Rio Rancho","Riverside","Riverton","Riverview","Roanoke","Rochester","Rochester Hills","Rock Hill","Rockford","Rocklin","Rockville","Rockwall","Rocky Mount","Rogers","Rohnert Park","Rosemead","Roseville","Roswell","Round Rock","Rowland Heights","Rowlett","Royal Oak","Sacramento","Saginaw","Salem","Salina","Salinas","Salt Lake City","Sammamish","San Angelo","San Antonio","San Bernardino","San Bruno","San Buenaventura (Ventura)","San Clemente","San Diego","San Francisco","San Jacinto","San Jose","San Juan","San Leandro","San Luis Obispo","San Marcos","San Mateo","San Rafael","San Ramon","San Tan Valley","Sandy","Sandy Springs","Sanford","Santa Ana","Santa Barbara","Santa Clara","Santa Clarita","Santa Cruz","Santa Fe","Santa Maria","Santa Monica","Santa Rosa","Santee","Sarasota","Savannah","Sayreville","Schaumburg","Schenectady","Scottsdale","Scranton","Seattle","Severn","Shawnee","Sheboygan","Shoreline","Shreveport","Sierra Vista","Silver Spring","Simi Valley","Sioux City","Sioux Falls","Skokie","Smyrna","Somerville","South Bend","South Gate","South Hill","South Jordan","South San Francisco","South Valley","South Whittier","Southaven","Southfield","Sparks","Spokane","Spokane Valley","Spring","Spring Hill","Spring Valley","Springdale","Springfield","St. Charles","St. Clair Shores","St. Cloud","St. George","St. Joseph","St. Louis","St. Louis Park","St. Paul","St. Peters","St. Petersburg","Stamford","State College","Sterling Heights","Stillwater","Stockton","Stratford","Strongsville","Suffolk","Sugar Land","Summerville","Sunnyvale","Sunrise","Sunrise Manor","Surprise","Syracuse","Tacoma","Tallahassee","Tamarac","Tamiami","Tampa","Taunton","Taylor","Taylorsville","Temecula","Tempe","Temple","Terre Haute","Texas City","The Hammocks","The Villages","The Woodlands","Thornton","Thousand Oaks","Tigard","Tinley Park","Titusville","Toledo","Toms River","Tonawanda","Topeka","Torrance","Town 'n' Country","Towson","Tracy","Trenton","Troy","Trujillo Alto","Tuckahoe","Tucson","Tulare","Tulsa","Turlock","Tuscaloosa","Tustin","Twin Falls","Tyler","Union City","University","Upland","Urbana","Urbandale","Utica","Vacaville","Valdosta","Vallejo","Vancouver","Victoria","Victorville","Vineland","Virginia Beach","Visalia","Vista","Waco","Waipahu","Waldorf","Walnut Creek","Waltham","Warner Robins","Warren","Warwick","Washington","Waterbury","Waterloo","Watsonville","Waukegan","Waukesha","Wauwatosa","Wellington","Wesley Chapel","West Allis","West Babylon","West Covina","West Des Moines","West Hartford","West Haven","West Jordan","West Lafayette","West New York","West Palm Beach","West Sacramento","West Seneca","West Valley City","Westfield","Westland","Westminster","Weston","Weymouth Town","Wheaton","White Plains","Whittier","Wichita","Wichita Falls","Wilmington","Wilson","Winston-Salem","Woodbury","Woodland","Worcester","Wylie","Wyoming","Yakima","Yonkers","Yorba Linda","York","Youngstown","Yuba City","Yucaipa","Yuma"],Fe$1=["{{location.city_prefix}} {{person.first_name.generic}}{{location.city_suffix}}","{{location.city_prefix}} {{person.first_name.generic}}","{{person.first_name.generic}}{{location.city_suffix}}","{{person.last_name.generic}}{{location.city_suffix}}","{{location.city_name}}"],Ne$1=["North","East","West","South","New","Lake","Port","Fort"],Ee$1=["town","ton","land","ville","berg","burgh","boro","borough","bury","view","port","mouth","stad","stead","furt","chester","cester","fort","field","haven","side","shire","worth"],Je$1=["Africa","Antarctica","Asia","Australia","Europe","North America","South America"],Ie$1=["Afghanistan","Aland Islands","Albania","Algeria","American Samoa","Andorra","Angola","Anguilla","Antarctica","Antigua and Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bonaire, Sint Eustatius and Saba","Bosnia and Herzegovina","Botswana","Bouvet Island","Brazil","British Indian Ocean Territory (Chagos Archipelago)","Brunei Darussalam","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Canada","Cape Verde","Cayman Islands","Central African Republic","Chad","Chile","China","Christmas Island","Cocos (Keeling) Islands","Colombia","Comoros","Congo","Cook Islands","Costa Rica","Cote d'Ivoire","Croatia","Cuba","Curacao","Cyprus","Czechia","Democratic Republic of the Congo","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Eritrea","Estonia","Eswatini","Ethiopia","Faroe Islands","Falkland Islands (Malvinas)","Fiji","Finland","France","French Guiana","French Polynesia","French Southern Territories","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guam","Guatemala","Guernsey","Guinea","Guinea-Bissau","Guyana","Haiti","Heard Island and McDonald Islands","Holy See (Vatican City State)","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Democratic People's Republic of Korea","Republic of Korea","Kuwait","Kyrgyz Republic","Lao People's Democratic Republic","Latvia","Lebanon","Lesotho","Liberia","Libyan Arab Jamahiriya","Liechtenstein","Lithuania","Luxembourg","Macao","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Marshall Islands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Niue","Norfolk Island","North Macedonia","Northern Mariana Islands","Norway","Oman","Pakistan","Palau","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Pitcairn Islands","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russian Federation","Rwanda","Saint Barthelemy","Saint Helena","Saint Kitts and Nevis","Saint Lucia","Saint Martin","Saint Pierre and Miquelon","Saint Vincent and the Grenadines","Samoa","San Marino","Sao Tome and Principe","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Sint Maarten","Slovakia","Slovenia","Solomon Islands","Somalia","South Africa","South Georgia and the South Sandwich Islands","South Sudan","Spain","Sri Lanka","Sudan","Suriname","Svalbard & Jan Mayen Islands","Sweden","Switzerland","Syrian Arab Republic","Taiwan","Tajikistan","Tanzania","Thailand","Timor-Leste","Togo","Tokelau","Tonga","Trinidad and Tobago","Tunisia","Turkey","Turkmenistan","Turks and Caicos Islands","Tuvalu","Uganda","Ukraine","United Arab Emirates","United Kingdom","United States of America","United States Minor Outlying Islands","Uruguay","Uzbekistan","Vanuatu","Venezuela","Vietnam","Virgin Islands, British","Virgin Islands, U.S.","Wallis and Futuna","Western Sahara","Yemen","Zambia","Zimbabwe"],Ke$1=["Adams County","Calhoun County","Carroll County","Clark County","Clay County","Crawford County","Douglas County","Fayette County","Franklin County","Grant County","Greene County","Hamilton County","Hancock County","Henry County","Jackson County","Jefferson County","Johnson County","Lake County","Lawrence County","Lee County","Lincoln County","Logan County","Madison County","Marion County","Marshall County","Monroe County","Montgomery County","Morgan County","Perry County","Pike County","Polk County","Scott County","Union County","Warren County","Washington County","Wayne County","Avon","Bedfordshire","Berkshire","Borders","Buckinghamshire","Cambridgeshire","Central","Cheshire","Cleveland","Clwyd","Cornwall","County Antrim","County Armagh","County Down","County Fermanagh","County Londonderry","County Tyrone","Cumbria","Derbyshire","Devon","Dorset","Dumfries and Galloway","Durham","Dyfed","East Sussex","Essex","Fife","Gloucestershire","Grampian","Greater Manchester","Gwent","Gwynedd County","Hampshire","Herefordshire","Hertfordshire","Highlands and Islands","Humberside","Isle of Wight","Kent","Lancashire","Leicestershire","Lincolnshire","Lothian","Merseyside","Mid Glamorgan","Norfolk","North Yorkshire","Northamptonshire","Northumberland","Nottinghamshire","Oxfordshire","Powys","Rutland","Shropshire","Somerset","South Glamorgan","South Yorkshire","Staffordshire","Strathclyde","Suffolk","Surrey","Tayside","Tyne and Wear","Warwickshire","West Glamorgan","West Midlands","West Sussex","West Yorkshire","Wiltshire","Worcestershire"],Oe$1={cardinal:["North","East","South","West"],cardinal_abbr:["N","E","S","W"],ordinal:["Northeast","Northwest","Southeast","Southwest"],ordinal_abbr:["NE","NW","SE","SW"]},xe$1=[{name:"Afrikaans",alpha2:"af",alpha3:"afr"},{name:"Azerbaijani",alpha2:"az",alpha3:"aze"},{name:"Maldivian",alpha2:"dv",alpha3:"div"},{name:"Farsi/Persian",alpha2:"fa",alpha3:"fas"},{name:"Latvian",alpha2:"lv",alpha3:"lav"},{name:"Indonesian",alpha2:"id",alpha3:"ind"},{name:"Nepali",alpha2:"ne",alpha3:"nep"},{name:"Thai",alpha2:"th",alpha3:"tha"},{name:"Uzbek",alpha2:"uz",alpha3:"uzb"},{name:"Yoruba",alpha2:"yo",alpha3:"yor"},{name:"Pashto",alpha2:"ps",alpha3:"pus"},{name:"English",alpha2:"en",alpha3:"eng"},{name:"Urdu",alpha2:"ur",alpha3:"urd"},{name:"German",alpha2:"de",alpha3:"deu"},{name:"French",alpha2:"fr",alpha3:"fra"},{name:"Spanish",alpha2:"es",alpha3:"spa"},{name:"Italian",alpha2:"it",alpha3:"ita"},{name:"Dutch",alpha2:"nl",alpha3:"nld"},{name:"Russian",alpha2:"ru",alpha3:"rus"},{name:"Portuguese",alpha2:"pt",alpha3:"por"},{name:"Polish",alpha2:"pl",alpha3:"pol"},{name:"Arabic",alpha2:"ar",alpha3:"ara"},{name:"Japanese",alpha2:"ja",alpha3:"jpn"},{name:"Chinese",alpha2:"zh",alpha3:"zho"},{name:"Hindi",alpha2:"hi",alpha3:"hin"},{name:"Bengali",alpha2:"bn",alpha3:"ben"},{name:"Gujarati",alpha2:"gu",alpha3:"guj"},{name:"Tamil",alpha2:"ta",alpha3:"tam"},{name:"Telugu",alpha2:"te",alpha3:"tel"},{name:"Punjabi",alpha2:"pa",alpha3:"pan"},{name:"Vietnamese",alpha2:"vi",alpha3:"vie"},{name:"Korean",alpha2:"ko",alpha3:"kor"},{name:"Turkish",alpha2:"tr",alpha3:"tur"},{name:"Swedish",alpha2:"sv",alpha3:"swe"},{name:"Greek",alpha2:"el",alpha3:"ell"},{name:"Czech",alpha2:"cs",alpha3:"ces"},{name:"Hungarian",alpha2:"hu",alpha3:"hun"},{name:"Romanian",alpha2:"ro",alpha3:"ron"},{name:"Ukrainian",alpha2:"uk",alpha3:"ukr"},{name:"Norwegian",alpha2:"no",alpha3:"nor"},{name:"Serbian",alpha2:"sr",alpha3:"srp"},{name:"Croatian",alpha2:"hr",alpha3:"hrv"},{name:"Slovak",alpha2:"sk",alpha3:"slk"},{name:"Slovenian",alpha2:"sl",alpha3:"slv"},{name:"Icelandic",alpha2:"is",alpha3:"isl"},{name:"Finnish",alpha2:"fi",alpha3:"fin"},{name:"Danish",alpha2:"da",alpha3:"dan"},{name:"Swahili",alpha2:"sw",alpha3:"swa"},{name:"Bashkir",alpha2:"ba",alpha3:"bak"},{name:"Basque",alpha2:"eu",alpha3:"eus"},{name:"Catalan",alpha2:"ca",alpha3:"cat"},{name:"Galician",alpha2:"gl",alpha3:"glg"},{name:"Esperanto",alpha2:"eo",alpha3:"epo"},{name:"Fijian",alpha2:"fj",alpha3:"fij"},{name:"Malagasy",alpha2:"mg",alpha3:"mlg"},{name:"Maltese",alpha2:"mt",alpha3:"mlt"},{name:"Albanian",alpha2:"sq",alpha3:"sqi"},{name:"Armenian",alpha2:"hy",alpha3:"hye"},{name:"Georgian",alpha2:"ka",alpha3:"kat"},{name:"Macedonian",alpha2:"mk",alpha3:"mkd"},{name:"Kazakh",alpha2:"kk",alpha3:"kaz"},{name:"Haitian Creole",alpha2:"ht",alpha3:"hat"},{name:"Mongolian",alpha2:"mn",alpha3:"mon"},{name:"Kyrgyz",alpha2:"ky",alpha3:"kir"},{name:"Finnish",alpha2:"fi",alpha3:"fin"},{name:"Tagalog",alpha2:"tl",alpha3:"tgl"},{name:"Malay",alpha2:"ms",alpha3:"msa"},{name:"Tajik",alpha2:"tg",alpha3:"tgk"},{name:"Swati",alpha2:"ss",alpha3:"ssw"},{name:"Tatar",alpha2:"tt",alpha3:"tat"},{name:"Zulu",alpha2:"zu",alpha3:"zul"}],ze$1=["#####","#####-####"],Ve$1=["Apt. ###","Suite ###"],Ye$1=["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"],je$1=["AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY"],qe$1={normal:"{{location.buildingNumber}} {{location.street}}",full:"{{location.buildingNumber}} {{location.street}} {{location.secondaryAddress}}"},Ue$1=["10th Street","11th Street","12th Street","13th Street","14th Street","15th Street","16th Street","1st Avenue","1st Street","2nd Avenue","2nd Street","3rd Avenue","3rd Street","4th Avenue","4th Street","5th Avenue","5th Street","6th Avenue","6th Street","7th Avenue","7th Street","8th Avenue","8th Street","9th Street","A Street","Abbey Road","Adams Avenue","Adams Street","Airport Road","Albany Road","Albert Road","Albion Street","Alexandra Road","Alfred Street","Alma Street","Ash Close","Ash Grove","Ash Road","Ash Street","Aspen Close","Atlantic Avenue","Avenue Road","Back Lane","Baker Street","Balmoral Road","Barn Close","Barton Road","Bath Road","Bath Street","Bay Street","Beach Road","Bedford Road","Beech Close","Beech Drive","Beech Grove","Beech Road","Beechwood Avenue","Bell Lane","Belmont Road","Birch Avenue","Birch Close","Birch Grove","Birch Road","Blind Lane","Bluebell Close","Boundary Road","Bramble Close","Bramley Close","Bridge Road","Bridge Street","Broad Lane","Broad Street","Broadway","Broadway Avenue","Broadway Street","Brook Lane","Brook Road","Brook Street","Brookside","Buckingham Road","Cambridge Street","Canal Street","Castle Close","Castle Lane","Castle Road","Castle Street","Cavendish Road","Cedar Avenue","Cedar Close","Cedar Grove","Cedar Road","Cedar Street","Cemetery Road","Center Avenue","Center Road","Center Street","Central Avenue","Central Street","Chapel Close","Chapel Hill","Chapel Road","Chapel Street","Charles Street","Cherry Close","Cherry Street","Cherry Tree Close","Chester Road","Chestnut Close","Chestnut Drive","Chestnut Grove","Chestnut Street","Church Avenue","Church Close","Church Hill","Church Lane","Church Path","Church Road","Church Street","Church View","Church Walk","Claremont Road","Clarence Road","Clarence Street","Clarendon Road","Clark Street","Clay Lane","Cleveland Street","Cliff Road","Clifton Road","Clinton Street","College Avenue","College Street","Columbia Avenue","Commerce Street","Commercial Road","Commercial Street","Common Lane","Coronation Avenue","Coronation Road","County Line Road","County Road","Court Street","Cow Lane","Crescent Road","Cromwell Road","Cross Lane","Cross Street","Crown Street","Cumberland Street","Dale Street","Dark Lane","Davis Street","Depot Street","Derby Road","Derwent Close","Devonshire Road","Division Street","Douglas Road","Duke Street","E 10th Street","E 11th Street","E 12th Street","E 14th Street","E 1st Street","E 2nd Street","E 3rd Street","E 4th Avenue","E 4th Street","E 5th Street","E 6th Avenue","E 6th Street","E 7th Street","E 8th Street","E 9th Street","E Bridge Street","E Broad Street","E Broadway","E Broadway Street","E Cedar Street","E Center Street","E Central Avenue","E Church Street","E Elm Street","E Franklin Street","E Front Street","E Grand Avenue","E High Street","E Jackson Street","E Jefferson Street","E Main","E Main Street","E Maple Street","E Market Street","E North Street","E Oak Street","E Park Avenue","E Pine Street","E River Road","E South Street","E State Street","E Union Street","E Walnut Street","E Washington Avenue","E Washington Street","E Water Street","East Avenue","East Road","East Street","Edward Street","Elm Close","Elm Grove","Elm Road","Elm Street","Euclid Avenue","Fairfield Road","Farm Close","Ferry Road","Field Close","Field Lane","First Avenue","First Street","Fore Street","Forest Avenue","Forest Road","Fourth Avenue","Franklin Avenue","Franklin Road","Franklin Street","Front Street","Frontage Road","Garden Close","Garden Street","George Street","Gladstone Road","Glebe Close","Gloucester Road","Gordon Road","Gordon Street","Grand Avenue","Grange Avenue","Grange Close","Grange Road","Grant Street","Green Close","Green Lane","Green Street","Greenville Road","Greenway","Greenwood Road","Grove Lane","Grove Road","Grove Street","Hall Lane","Hall Street","Harrison Avenue","Harrison Street","Hawthorn Avenue","Hawthorn Close","Hazel Close","Hazel Grove","Heath Road","Heather Close","Henry Street","Heron Close","Hickory Street","High Road","High Street","Highfield Avenue","Highfield Close","Highfield Road","Highland Avenue","Hill Road","Hill Street","Hillside","Hillside Avenue","Hillside Close","Hillside Road","Holly Close","Honeysuckle Close","Howard Road","Howard Street","Jackson Avenue","Jackson Street","James Street","Jefferson Avenue","Jefferson Street","Johnson Street","Jubilee Close","Juniper Close","Kent Road","Kestrel Close","King Street","King's Road","Kingfisher Close","Kings Highway","Kingsway","Laburnum Grove","Lafayette Street","Lake Avenue","Lake Drive","Lake Road","Lake Street","Lancaster Road","Lansdowne Road","Larch Close","Laurel Close","Lawrence Street","Lee Street","Liberty Street","Lime Grove","Lincoln Avenue","Lincoln Highway","Lincoln Road","Lincoln Street","Locust Street","Lodge Close","Lodge Lane","London Road","Long Lane","Low Road","Madison Avenue","Madison Street","Main","Main Avenue","Main Road","Main Street","Main Street E","Main Street N","Main Street S","Main Street W","Manchester Road","Manor Close","Manor Drive","Manor Gardens","Manor Road","Manor Way","Maple Avenue","Maple Close","Maple Drive","Maple Road","Maple Street","Market Place","Market Square","Market Street","Marlborough Road","Marsh Lane","Martin Luther King Boulevard","Martin Luther King Drive","Martin Luther King Jr Boulevard","Mary Street","Mayfield Road","Meadow Close","Meadow Drive","Meadow Lane","Meadow View","Meadow Way","Memorial Drive","Middle Street","Mill Close","Mill Lane","Mill Road","Mill Street","Milton Road","Milton Street","Monroe Street","Moor Lane","Moss Lane","Mount Pleasant","Mount Street","Mulberry Street","N 1st Street","N 2nd Street","N 3rd Street","N 4th Street","N 5th Street","N 6th Street","N 7th Street","N 8th Street","N 9th Street","N Bridge Street","N Broad Street","N Broadway","N Broadway Street","N Cedar Street","N Center Street","N Central Avenue","N Chestnut Street","N Church Street","N College Street","N Court Street","N Division Street","N East Street","N Elm Street","N Franklin Street","N Front Street","N Harrison Street","N High Street","N Jackson Street","N Jefferson Street","N Lincoln Street","N Locust Street","N Main","N Main Avenue","N Main Street","N Maple Street","N Market Street","N Monroe Street","N Oak Street","N Park Street","N Pearl Street","N Pine Street","N Poplar Street","N Railroad Street","N State Street","N Union Street","N Walnut Street","N Washington Avenue","N Washington Street","N Water Street","Nelson Road","Nelson Street","New Lane","New Road","New Street","Newton Road","Nightingale Close","Norfolk Road","North Avenue","North Lane","North Road","North Street","Northfield Road","Oak Avenue","Oak Drive","Oak Lane","Oak Road","Oak Street","Oakfield Road","Oaklands","Old Lane","Old Military Road","Old Road","Old State Road","Orchard Drive","Orchard Lane","Orchard Road","Orchard Street","Oxford Road","Oxford Street","Park Avenue","Park Crescent","Park Drive","Park Lane","Park Place","Park Road","Park Street","Park View","Parkside","Pearl Street","Pennsylvania Avenue","Pine Close","Pine Grove","Pine Street","Pinfold Lane","Pleasant Street","Poplar Avenue","Poplar Close","Poplar Road","Poplar Street","Post Road","Pound Lane","Princes Street","Princess Street","Priory Close","Priory Road","Prospect Avenue","Prospect Place","Prospect Road","Prospect Street","Quarry Lane","Quarry Road","Queen's Road","Railroad Avenue","Railroad Street","Railway Street","Rectory Close","Rectory Lane","Richmond Close","Richmond Road","Ridge Road","River Road","River Street","Riverside","Riverside Avenue","Riverside Drive","Roman Road","Roman Way","Rowan Close","Russell Street","S 10th Street","S 14th Street","S 1st Avenue","S 1st Street","S 2nd Street","S 3rd Street","S 4th Street","S 5th Street","S 6th Street","S 7th Street","S 8th Street","S 9th Street","S Bridge Street","S Broad Street","S Broadway","S Broadway Street","S Center Street","S Central Avenue","S Chestnut Street","S Church Street","S College Street","S Division Street","S East Street","S Elm Street","S Franklin Street","S Front Street","S Grand Avenue","S High Street","S Jackson Street","S Jefferson Street","S Lincoln Street","S Main","S Main Avenue","S Main Street","S Maple Street","S Market Street","S Mill Street","S Monroe Street","S Oak Street","S Park Street","S Pine Street","S Railroad Street","S State Street","S Union Street","S Walnut Street","S Washington Avenue","S Washington Street","S Water Street","S West Street","Salisbury Road","Sandringham Road","Sandy Lane","School Close","School Lane","School Road","School Street","Second Avenue","Silver Street","Skyline Drive","Smith Street","Somerset Road","South Avenue","South Drive","South Road","South Street","South View","Spring Gardens","Spring Street","Springfield Close","Springfield Road","Spruce Street","St Andrew's Road","St Andrews Close","St George's Road","St John's Road","St Mary's Close","St Mary's Road","Stanley Road","Stanley Street","State Avenue","State Line Road","State Road","State Street","Station Road","Station Street","Stoney Lane","Sycamore Avenue","Sycamore Close","Sycamore Drive","Sycamore Street","Talbot Road","Tennyson Road","The Avenue","The Beeches","The Causeway","The Chase","The Coppice","The Copse","The Crescent","The Croft","The Dell","The Drive","The Fairway","The Glebe","The Grange","The Green","The Grove","The Hawthorns","The Lane","The Laurels","The Limes","The Maltings","The Meadows","The Mews","The Mount","The Oaks","The Orchard","The Oval","The Paddock","The Paddocks","The Poplars","The Ridgeway","The Ridings","The Rise","The Sidings","The Spinney","The Square","The Willows","The Woodlands","Third Avenue","Third Street","Tower Road","Trinity Road","Tudor Close","Union Avenue","Union Street","University Avenue","University Drive","Valley Road","Veterans Memorial Drive","Veterans Memorial Highway","Vicarage Close","Vicarage Lane","Vicarage Road","Victoria Place","Victoria Road","Victoria Street","Vine Street","W 10th Street","W 11th Street","W 12th Street","W 14th Street","W 1st Street","W 2nd Street","W 3rd Street","W 4th Avenue","W 4th Street","W 5th Street","W 6th Avenue","W 6th Street","W 7th Street","W 8th Street","W 9th Street","W Bridge Street","W Broad Street","W Broadway","W Broadway Avenue","W Broadway Street","W Center Street","W Central Avenue","W Chestnut Street","W Church Street","W Division Street","W Elm Street","W Franklin Street","W Front Street","W Grand Avenue","W High Street","W Jackson Street","W Jefferson Street","W Lake Street","W Main","W Main Street","W Maple Street","W Market Street","W Monroe Street","W North Street","W Oak Street","W Park Street","W Pine Street","W River Road","W South Street","W State Street","W Union Street","W Walnut Street","W Washington Avenue","W Washington Street","Walnut Close","Walnut Street","Warren Close","Warren Road","Washington Avenue","Washington Boulevard","Washington Road","Washington Street","Water Lane","Water Street","Waterloo Road","Waterside","Watery Lane","Waverley Road","Well Lane","Wellington Road","Wellington Street","West Avenue","West End","West Lane","West Road","West Street","West View","Western Avenue","Western Road","Westfield Road","Westgate","William Street","Willow Close","Willow Drive","Willow Grove","Willow Road","Willow Street","Windermere Road","Windmill Close","Windmill Lane","Windsor Avenue","Windsor Close","Windsor Drive","Wood Lane","Wood Street","Woodland Close","Woodland Road","Woodlands","Woodlands Avenue","Woodlands Close","Woodlands Road","Woodside","Woodside Road","Wren Close","Yew Tree Close","York Road","York Street"],Ze$1=["{{person.first_name.generic}} {{location.street_suffix}}","{{person.last_name.generic}} {{location.street_suffix}}","{{location.street_name}}"],_e$1=["Alley","Avenue","Branch","Bridge","Brook","Brooks","Burg","Burgs","Bypass","Camp","Canyon","Cape","Causeway","Center","Centers","Circle","Circles","Cliff","Cliffs","Club","Common","Corner","Corners","Course","Court","Courts","Cove","Coves","Creek","Crescent","Crest","Crossing","Crossroad","Curve","Dale","Dam","Divide","Drive","Drives","Estate","Estates","Expressway","Extension","Extensions","Fall","Falls","Ferry","Field","Fields","Flat","Flats","Ford","Fords","Forest","Forge","Forges","Fork","Forks","Fort","Freeway","Garden","Gardens","Gateway","Glen","Glens","Green","Greens","Grove","Groves","Harbor","Harbors","Haven","Heights","Highway","Hill","Hills","Hollow","Inlet","Island","Islands","Isle","Junction","Junctions","Key","Keys","Knoll","Knolls","Lake","Lakes","Land","Landing","Lane","Light","Lights","Loaf","Lock","Locks","Lodge","Loop","Mall","Manor","Manors","Meadow","Meadows","Mews","Mill","Mills","Mission","Motorway","Mount","Mountain","Mountains","Neck","Orchard","Oval","Overpass","Park","Parks","Parkway","Parkways","Pass","Passage","Path","Pike","Pine","Pines","Place","Plain","Plains","Plaza","Point","Points","Port","Ports","Prairie","Radial","Ramp","Ranch","Rapid","Rapids","Rest","Ridge","Ridges","River","Road","Roads","Route","Row","Rue","Run","Shoal","Shoals","Shore","Shores","Skyway","Spring","Springs","Spur","Spurs","Square","Squares","Station","Stravenue","Stream","Street","Streets","Summit","Terrace","Throughway","Trace","Track","Trafficway","Trail","Tunnel","Turnpike","Underpass","Union","Unions","Valley","Valleys","Via","Viaduct","View","Views","Village","Villages","Ville","Vista","Walk","Walks","Wall","Way","Ways","Well","Wells"],ur$1={building_number:We$1,city_name:Ge$1,city_pattern:Fe$1,city_prefix:Ne$1,city_suffix:Ee$1,continent:Je$1,country:Ie$1,county:Ke$1,direction:Oe$1,language:xe$1,postcode:ze$1,secondary_address:Ve$1,state:Ye$1,state_abbr:je$1,street_address:qe$1,street_name:Ue$1,street_pattern:Ze$1,street_suffix:_e$1},Qe$1=ur$1,Xe$1=["a","ab","abbas","abduco","abeo","abscido","absconditus","absens","absorbeo","absque","abstergo","absum","abundans","abutor","accedo","accendo","acceptus","accommodo","accusamus","accusantium","accusator","acer","acerbitas","acervus","acidus","acies","acquiro","acsi","ad","adamo","adaugeo","addo","adduco","ademptio","adeo","adeptio","adfectus","adfero","adficio","adflicto","adhaero","adhuc","adicio","adimpleo","adinventitias","adipisci","adipiscor","adiuvo","administratio","admiratio","admitto","admoneo","admoveo","adnuo","adopto","adsidue","adstringo","adsuesco","adsum","adulatio","adulescens","aduro","advenio","adversus","advoco","aedificium","aeger","aegre","aegrotatio","aegrus","aeneus","aequitas","aequus","aer","aestas","aestivus","aestus","aetas","aeternus","ager","aggero","aggredior","agnitio","agnosco","ago","ait","aiunt","alias","alienus","alii","alioqui","aliqua","aliquam","aliquid","alius","allatus","alo","alter","altus","alveus","amaritudo","ambitus","ambulo","amet","amicitia","amiculum","amissio","amita","amitto","amo","amor","amoveo","amplexus","amplitudo","amplus","ancilla","angelus","angulus","angustus","animadverto","animi","animus","annus","anser","ante","antea","antepono","antiquus","aperiam","aperio","aperte","apostolus","apparatus","appello","appono","appositus","approbo","apto","aptus","apud","aqua","ara","aranea","arbitro","arbor","arbustum","arca","arceo","arcesso","architecto","arcus","argentum","argumentum","arguo","arma","armarium","aro","ars","articulus","artificiose","arto","arx","ascisco","ascit","asper","asperiores","aspernatur","aspicio","asporto","assentator","assumenda","astrum","at","atavus","ater","atque","atqui","atrocitas","atrox","attero","attollo","attonbitus","auctor","auctus","audacia","audax","audentia","audeo","audio","auditor","aufero","aureus","aurum","aut","autem","autus","auxilium","avaritia","avarus","aveho","averto","baiulus","balbus","barba","bardus","basium","beatae","beatus","bellicus","bellum","bene","beneficium","benevolentia","benigne","bestia","bibo","bis","blandior","blanditiis","bonus","bos","brevis","cado","caecus","caelestis","caelum","calamitas","calcar","calco","calculus","callide","campana","candidus","canis","canonicus","canto","capillus","capio","capitulus","capto","caput","carbo","carcer","careo","caries","cariosus","caritas","carmen","carpo","carus","casso","caste","casus","catena","caterva","cattus","cauda","causa","caute","caveo","cavus","cedo","celebrer","celer","celo","cena","cenaculum","ceno","censura","centum","cerno","cernuus","certe","certus","cervus","cetera","charisma","chirographum","cibo","cibus","cicuta","cilicium","cimentarius","ciminatio","cinis","circumvenio","cito","civis","civitas","clam","clamo","claro","clarus","claudeo","claustrum","clementia","clibanus","coadunatio","coaegresco","coepi","coerceo","cogito","cognatus","cognomen","cogo","cohaero","cohibeo","cohors","colligo","collum","colo","color","coma","combibo","comburo","comedo","comes","cometes","comis","comitatus","commemoro","comminor","commodi","commodo","communis","comparo","compello","complectus","compono","comprehendo","comptus","conatus","concedo","concido","conculco","condico","conduco","confero","confido","conforto","confugo","congregatio","conicio","coniecto","conitor","coniuratio","conor","conqueror","conscendo","consectetur","consequatur","consequuntur","conservo","considero","conspergo","constans","consuasor","contabesco","contego","contigo","contra","conturbo","conventus","convoco","copia","copiose","cornu","corona","corporis","corpus","correptius","corrigo","corroboro","corrumpo","corrupti","coruscus","cotidie","crapula","cras","crastinus","creator","creber","crebro","credo","creo","creptio","crepusculum","cresco","creta","cribro","crinis","cruciamentum","crudelis","cruentus","crur","crustulum","crux","cubicularis","cubitum","cubo","cui","cuius","culpa","culpo","cultellus","cultura","cum","cumque","cunabula","cunae","cunctatio","cupiditas","cupiditate","cupio","cuppedia","cupressus","cur","cura","curatio","curia","curiositas","curis","curo","curriculum","currus","cursim","curso","cursus","curto","curtus","curvo","custodia","damnatio","damno","dapifer","debeo","debilito","debitis","decens","decerno","decet","decimus","decipio","decor","decretum","decumbo","dedecor","dedico","deduco","defaeco","defendo","defero","defessus","defetiscor","deficio","defleo","defluo","defungo","degenero","degero","degusto","deinde","delectatio","delectus","delego","deleniti","deleo","delibero","delicate","delinquo","deludo","demens","demergo","demitto","demo","demonstro","demoror","demulceo","demum","denego","denique","dens","denuncio","denuo","deorsum","depereo","depono","depopulo","deporto","depraedor","deprecator","deprimo","depromo","depulso","deputo","derelinquo","derideo","deripio","deserunt","desidero","desino","desipio","desolo","desparatus","despecto","dicta","dignissimos","distinctio","dolor","dolore","dolorem","doloremque","dolores","doloribus","dolorum","ducimus","ea","eaque","earum","eius","eligendi","enim","eos","error","esse","est","et","eum","eveniet","ex","excepturi","exercitationem","expedita","explicabo","facere","facilis","fuga","fugiat","fugit","harum","hic","id","illo","illum","impedit","in","incidunt","infit","inflammatio","inventore","ipsa","ipsam","ipsum","iste","itaque","iure","iusto","labore","laboriosam","laborum","laudantium","libero","magnam","magni","maiores","maxime","minima","minus","modi","molestiae","molestias","mollitia","nam","natus","necessitatibus","nemo","neque","nesciunt","nihil","nisi","nobis","non","nostrum","nulla","numquam","occaecati","ocer","odio","odit","officia","officiis","omnis","optio","paens","pariatur","patior","patria","patrocinor","patruus","pauci","paulatim","pauper","pax","peccatus","pecco","pecto","pectus","pecus","peior","pel","perferendis","perspiciatis","placeat","porro","possimus","praesentium","provident","quae","quaerat","quam","quas","quasi","qui","quia","quibusdam","quidem","quis","quisquam","quo","quod","quos","ratione","recusandae","reiciendis","rem","repellat","repellendus","reprehenderit","repudiandae","rerum","saepe","sapiente","sed","sequi","similique","sint","sit","socius","sodalitas","sol","soleo","solio","solitudo","solium","sollers","sollicito","solum","solus","soluta","solutio","solvo","somniculosus","somnus","sonitus","sono","sophismata","sopor","sordeo","sortitus","spargo","speciosus","spectaculum","speculum","sperno","spero","spes","spiculum","spiritus","spoliatio","sponte","stabilis","statim","statua","stella","stillicidium","stipes","stips","sto","strenuus","strues","studio","stultus","suadeo","suasoria","sub","subito","subiungo","sublime","subnecto","subseco","substantia","subvenio","succedo","succurro","sufficio","suffoco","suffragium","suggero","sui","sulum","sum","summa","summisse","summopere","sumo","sumptus","sunt","supellex","super","suppellex","supplanto","suppono","supra","surculus","surgo","sursum","suscipio","suscipit","suspendo","sustineo","suus","synagoga","tabella","tabernus","tabesco","tabgo","tabula","taceo","tactus","taedium","talio","talis","talus","tam","tamdiu","tamen","tametsi","tamisium","tamquam","tandem","tantillus","tantum","tardus","tego","temeritas","temperantia","templum","tempora","tempore","temporibus","temptatio","tempus","tenax","tendo","teneo","tener","tenetur","tenuis","tenus","tepesco","tepidus","ter","terebro","teres","terga","tergeo","tergiversatio","tergo","tergum","termes","terminatio","tero","terra","terreo","territo","terror","tersus","tertius","testimonium","texo","textilis","textor","textus","thalassinus","theatrum","theca","thema","theologus","thermae","thesaurus","thesis","thorax","thymbra","thymum","tibi","timidus","timor","titulus","tolero","tollo","tondeo","tonsor","torqueo","torrens","tot","totam","totidem","toties","totus","tracto","trado","traho","trans","tredecim","tremo","trepide","tres","tribuo","tricesimus","triduana","tripudio","tristis","triumphus","trucido","truculenter","tubineus","tui","tum","tumultus","tunc","turba","turbo","turpis","tutamen","tutis","tyrannus","uberrime","ubi","ulciscor","ullam","ullus","ulterius","ultio","ultra","umbra","umerus","umquam","una","unde","undique","universe","unus","urbanus","urbs","uredo","usitas","usque","ustilo","ustulo","usus","ut","uter","uterque","utilis","utique","utor","utpote","utrimque","utroque","utrum","uxor","vaco","vacuus","vado","vae","valde","valens","valeo","valetudo","validus","vallum","vapulus","varietas","varius","vehemens","vel","velit","velociter","velum","velut","venia","veniam","venio","ventito","ventosus","ventus","venustas","ver","verbera","verbum","vere","verecundia","vereor","vergo","veritas","veritatis","vero","versus","verto","verumtamen","verus","vesco","vesica","vesper","vespillo","vester","vestigium","vestrum","vetus","via","vicinus","vicissitudo","victoria","victus","videlicet","video","viduo","vigilo","vigor","vilicus","vilis","vilitas","villa","vinco","vinculum","vindico","vinitor","vinum","vir","virga","virgo","viridis","viriliter","virtus","vis","viscus","vita","vitae","vitiosus","vitium","vito","vivo","vix","vobis","vociferor","voco","volaticus","volo","volubilis","voluntarius","volup","voluptas","voluptate","voluptatem","voluptates","voluptatibus","voluptatum","volutabrum","volva","vomer","vomica","vomito","vorago","vorax","voro","vos","votum","voveo","vox","vulariter","vulgaris","vulgivagus","vulgo","vulgus","vulnero","vulnus","vulpes","vulticulus","xiphias"],cr$1={word:Xe$1},$e$1=cr$1,mr$1={title:"English",code:"en",language:"en",endonym:"English",dir:"ltr",script:"Latn"},ea=mr$1,aa=['"Awaken, My Love!"',"(What's The Story) Morning Glory?","- Tragedy +","13 Reasons Why (Season 3)","21st Century Breakdown","30 De Febrero","432 Hz Deep Healing","5-Star","528 Hz Meditation Music","54+1","8 Mile","808s & Heartbreak","9 To 5 And Odd Jobs","A Beautiful Lie","A Day At The Races","A Day Without Rain","A Fever You Can't Sweat Out","A Gangsta's Pain","A Gift & A Curse","A Hard Day's Night","A Head Full Of Dreams","A Kind Of Magic","A Million Ways To Murder","A Moment Apart","A Song For Every Moon","A Thousand Suns","A Winter Romance","ABBA","AI YoungBoy","AJ Tracey","Act One","After Hours","Agent Provocateur","All About You","All I Know So Far: Setlist","All Or Nothing","All Out","All Over The Place","All Stand Together","All The Lost Souls","All The Things I Never Said","All Things Must Pass","Alleen","Alright, Still","Alta Suciedad","America","American Heartbreak","American Teen","And Justice For None","Animal Songs","Another Friday Night","Anything Goes","Ao Vivo Em São Paulo","Ao Vivo No Ibirapuera","Apricot Princess","Aqui E Agora (Ao Vivo)","Arcane League Of Legends","Ardipithecus","Aretha Now","Around The Fur","Arrival","Artist 2.0","As She Pleases","Ascend","Ashlyn","Astro Lounge","At Night, Alone.","At. Long. Last. ASAP","Atlas","Audioslave","Aura","Austin","Awake","Away From The Sun","Ayayay!","Baby On Baby","Back For Everything","Back From The Edge","Back In Black","Back To Black","Back To The Game","Bad","Bahía Ducati","Baila","Barbie The Album","Battleground","Bayou Country","Bcos U Will Never B Free","Be","Be Here Now","Beautiful Mind","Beautiful Thugger Girls","Beautiful Trauma","Beauty And The Beast","Beggars Banquet","Being Funny In A Foreign Language","Berlin Lebt","Berry Is On Top","Best White Noise For Baby Sleep - Loopable With No Fade","Big Baby DRAM","Bigger, Better, Faster, More!","Billy Talent II","Black Star Elephant","Blackout","Blank Face LP","Bleach","Blizzard Of Ozz","Blonde","Blood Sugar Sex Magik","Bloom","Blowin' Your Mind!","Blu Celeste","Blue","Blue Banisters","Blue Hawaii","Blue Neighbourhood","Bluebird Days","Bobby Tarantino","Bobby Tarantino II","Bon Iver","Born Pink","Born To Run","Brand New Eyes","Break The Cycle","Breakfast In America","Breakthrough","Brett Young","Bridge Over Troubled Water","Bright: The Album","Brol","Buds","Buena Vista Social Club","Built On Glass","Bury Me At Makeout Creek","Busyhead","By The Way","CB6","CNCO","California Sunrise","Californication","Call Me Irresponsible","Calm","Camino Palmero","Camp","Caracal","Carbon Fiber Hits","Carnival","Carry On","Cartel De Santa","Certified Lover Boy","Chaaama","Chama Meu Nome","Chapter 1: Snake Oil","Chapter 2: Swamp Savant","Chapter One","Charlie's Angels","Cherry Bomb","Chief","Chocolate Factory","Chosen","Chris Brown","Christina Aguilera","Chromatica","Church","City Of Evil","Clandestino","Clouds","Coco","Collision Course","Colour Vision","Combat Rock","Come Around Sundown","Come Away With Me","Come Home The Kids Miss You","Come What(ever) May","Commando","Common Sense","Communion","Conditions","Confident","Confrontation","Control The Streets, Volume 2","Corinne Bailey Rae","Costello Music","Cottonwood","Covers, Vol. 2","Cozy Tapes Vol. 2: Too Cozy","Crash Talk","Crazy Love","Crazysexycool","Crowded House","Cruisin' With Junior H","Culture","Current Mood","DS2","Dale","Danger Days: The True Lives Of The Fabulous Killjoys","Dangerous Woman","Dangerous: The Double Album","Dark Horse","Day69","Daydream","De Fiesta","De Viaje","DeAnn","Death Race For Love","Delirium","Delta","Demidevil","Depression Cherry","Descendants","Desgenerados Mixtape","Destin","Destiny Fulfilled","Desvelado","Detroit 2","Dex Meets Dexter","Dharma","Die A Legend","Different World","Dig Your Roots","Digital Druglord","Dirt","Disclaimer I / II","Discovery","Disraeli Gears","Disumano","Dizzy Up The Girl","Don't Play That Song","Donda","Donde Quiero Estar","Doo-Wops & Hooligans","Down The Way","Dr. Feelgood","Dream Your Life Away","Dreaming Out Loud","Drip Harder","Drive","Drones","Dropped Outta College","Drowning","Dua Warna Cinta","Dulce Beat","Dusty In Memphis","Dutty Rock","Dying To Live","ENR","East Atlanta Love Letter","Editorial","Edna","El Abayarde","El Amor En Los Tiempos Del Perreo","El Camino","El Comienzo","El Dorado","El Karma","El Mal Querer","El Malo","El Trabajo Es La Suerte","El Viaje De Copperpot","Electric Ladyland","Emotion","En Tus Planes","Endless Summer Vacation","Enter The Wu-Tang (36 Chambers)","Equals (=)","Estrella","Euphoria","Europop","Evermore","Every Kingdom","Everyday Life","Evolve","Expectations","Face Yourself","Facelift","Fallin'","Fancy You","Fantasía","Favourite Worst Nightmare","Fear Of The Dark","Fearless","Feel Something","Feels Like Home","Femme Fatale","Ferxxocalipsis","Fifty Shades Darker","Fifty Shades Freed","Fifty Shades Of Grey","Final (Vol.1)","Finding Beauty In Negative Spaces","Fine Line","First Impressions Of Earth","First Steps","Five Seconds Flat","Folklore","For Emma, Forever Ago","Forajido EP 1","Forever","Forever Young","Formula Of Love: O+T=<3","Free 6lack","Freudian","Frozen II","Full Moon Fever","Funhouse","Funk Wav Bounces Vol.1","Future History","FutureSex/LoveSounds","Fuzzybrain","Gallery","Gangsta's Paradise","Gemini","Gemini Rights","Generationwhy","Get A Grip","Get Up","Gettin' Old","Girl","Gladiator","Glisten","Globalization","Gloria","Glory Days","God's Project","Gold Skies","Golden","Good Evening","Good Thing","Goodbye Yellow Brick Road","Gossip Columns","Got Your Six","Graceland","Graduation","Grand Champ","Grandson, Vol. 1","Green River","Guerra","Ha*Ash Primera Fila - Hecho Realidad","Haiz","Hamilton","Happy Endings","Harry Styles","Hasta La Raíz","Hatful Of Hollow","Head In The Clouds","Heard It In A Past Life","Heart Shaped World","Heartbeat City","Heartbreak On A Full Moon / Cuffing Season - 12 Days Of Christmas","Heaven Or Hell","Heaven knows","Hellbilly Deluxe","Hellboy","Help!","Her Loss","Here Comes The Cowboy","Hey World","High School Musical","High Tide In The Snake's Nest","Historias De Un Capricornio","Hndrxx","Hombres G (Devuélveme A Mi Chica)","Homerun","Homework","Hot Fuss","Hot Pink","Hot Sauce / Hello Future","Hot Space","Hotel Diablo","Houses Of The Holy","How Big, How Blue, How Beautiful","How I'm Feeling","How To Be Human","How To Save A Life","How To: Friend, Love, Freefall","Hozier","Human","Huncho Jack, Jack Huncho","Hunter Hayes","Hysteria","I Am...Sasha Fierce","I Can't Handle Change","I Met You When I Was 18. (The Playlist)","I Never Liked You","I Never Loved A Man The Way I Love You","I See You","I Think You Think Too Much Of Me","I Used To Know Her","I Used To Think I Could Fly","I'm Comin' Over","Ich & Keine Maske","If You Can Believe Your Eyes & Ears","Il Ballo Della Vita","Ill Communication","Imagination & The Misfit Kid","Imagine","Immortalized","In A Perfect World...","In Colour","In My Own Words","In Rainbows","In Return","In The Lonely Hour","Infest","Innuendo","Inter Shibuya - La Mafia","Interstellar","Is This It","It Was Written","It's Not Me, It's You","It's Only Me","Ivory","JackBoys","Jamie","Jazz","Jibrail & Iblis","Jordi","Jordin Sparks","Jose","Just As I Am","Just Cause Y'all Waited 2","Just Like You","Justified","K-12 / After School","K.I.D.S.","K.O.","K.O.B. Live","KG0516","KOD","Kane Brown","Kid A","Kid Krow","Kids See Ghosts","Kids in Love","Kinks (You Really Got Me)","Know-It-All","Konvicted","Kring","LANY","LM5","La Criatura","La Flaca","La Melodia De La Calle","La Revolucion","Lady Lady","Lady Wood","Langit Mong Bughaw","Las Que No Iban A Salir","Last Day Of Summer","Last Year Was Complicated","Layers","Layover","Lazarus","Led Zeppelin","Left Of The Middle","Leftoverture","Legends Never Die","Let's Skip To The Wedding","Let's Talk About Love","Licensed To Ill","Life In Cartoon Motion","Life Thru A Lens","Lifelines","Like..?","Lil Big Pac","Lil Boat","Lil Boat 2","Lil Boat 3.5","Lil Kiwi","Lil Pump","Limon Y Sal","Listen Without Prejudice","Little Voice","Live On Red Barn Radio I & II","Lo Que Andábamos Buscando","Lofi Fruits Music 2021","London Calling","Los Campeones Del Pueblo","Los Extraterrestres","Los Favoritos 2","Lost","Lost In Love","Loud","Love Sick","Love Story","Love Stuff","Love Yourself: Tear","Lover","Luca Brasi 2: Gangsta Grillz","Lust For Life","Luv Is Rage","M!ssundaztood","Ma Fleur","Made In Lagos","Mafia Bidness","Magazines Or Novels","Mainstream Sellout","Majestic","Make It Big","Make Yourself","Making Mirrors","Mamma Mia! Here We Go Again","Man Of The Woods","Manic","Me And My Gang","Meduza","Meet The Orphans","Meet The Woo","Melim","Mellon Collie And The Infinite Sadness","Melly vs. Melvin","Memories...Do Not Open","Menagerie","Midnights","Minecraft - Volume Alpha","Minutes To Midnight","Mix Pa Llorar En Tu Cuarto","Modo Avión","Monkey Business","Mono.","Montana","Montevallo","Moosetape","Morning View","Motivan2","Moving Pictures","Mr. Davis","Mr. Misunderstood","Mulan","Mura Masa","Music From The Edge Of Heaven","Music Of The Sun","My House","My Kinda Party","My Krazy Life","My Liver Will Handle What My Heart Can't","My Moment","My Own Lane","My Turn","My Worlds","Na Praia (Ao Vivo)","Nakamura","Nation Of Two","Navegando","Need You Now","Neon Future III","Neotheater","Never Trust A Happy Song","New English","News Of The World","Nicole","Night & Day","Nimmerland","Nimrod","Nine Track Mind","No Angel","No Me Pidas Perdón","No More Drama","No Protection","No Strings Attached","No Time To Die","Nobody Is Listening","Non Stop Erotic Cabaret","Non-Fiction","Northsbest","Nostalgia","Nostalgia, Ultra","Notes On A Conditional Form","Now Or Never","O Embaixador (Ao Vivo)","O My Heart","OK Computer","Ocean","Ocean Avenue","Ocean Eyes","Odisea","Oh My My","Oh, What A Life","On The 6","One In A Million","One More Light","One Of These Nights","Open Up And Say...Ahh!","Ordinary Man","Origins","Out Of The Blue","Over It","OzuTochi","PTSD","Pa Las Baby's Y Belikeada","Pa Que Hablen","Pa' Luego Es Tarde","Pa' Otro La 'O","Pablo Honey","Pain Is Love","Pain Is Temporary","Painting Pictures","Palmen Aus Plastik 2","Para Mi Ex","Para Siempre","Partners In Crime","Pawn Shop","Pegasus / Neon Shark VS Pegasus","Pet Sounds","Piece By Piece","Pier Pressure","Pineapple Sunrise","Piseiro 2020 Ao Vivo","Planet Pit","Plans","Play Deep","Playa Saturno","Por Primera Vez","Por Vida","Positions","Post Human: Survival Horror","Poster Girl","Prazer, Eu Sou Ferrugem (Ao Vivo)","Pretty Girls Like Trap Music","Pretty. Odd.","Prince Royce","Prisma","Prometo","Providence","Puberty 2","Punisher","Purgatory","Purple Rain","Que Bendición","Queen Of The Clouds","Quiero Volver","R&G (Rhythm & Gangsta): The Masterpiece","Raise!","Ransom 2","Rapunzel","Rare","Re Mida","Ready To Die","Realer","Rebelde","Reclassified","Recovery","Recuerden Mi Estilo","Reggatta De Blanc","Regulate… G Funk Era","Reik","Reise, Reise","Relapse","Relaxing Piano Lullabies And Natural Sleep Aid For Baby Sleep Music","Religiously. The Album.","Replay","Results May Vary","Revenge","Revolve","Revolver","Ricky Martin","Rien 100 Rien","Ripcord","Rise And Fall, Rage And Grace","Rise Of An Empire","Robin Hood: Prince Of Thieves","Rock N Roll Jesus","Romance","Romances","Ronan","Royal Blood","Rumours","Sad Boyz 4 Life II","San Lucas","Santana World","Saturation III","Sauce Boyz","Savage Mode","Saxobeats","Scarlet","Schwarzes Herz","Seal The Deal & Let's Boogie","Section.80","Segundo Romance","Sehnsucht","Shake The Snow Globe","Shang-Chi And The Legend Of The Ten Rings: The Album","Sheer Heart Attack","Shiesty Season","Shock Value","Shoot For The Stars, Aim For The Moon","Signed Sealed And Delivered","Signos","Silent Alarm","Simplemente Gracias","Sin Bandera","Sing Me A Lullaby, My Sweet Temptation","Sinner","Sirio","Sit Still, Look Pretty","Skin","Slowhand","Smash","Smithereens","Snow Cougar","Social Cues","Some Girls","Song Hits From Holiday Inn","Songs For Dads","Songs For The Deaf","Songs For You, Truths For Me","Songs In The Key Of Life","Souled Out","Sounds Of Silence","Soy Como Quiero Ser","Speak Now","Speak Your Mind","Speakerboxxx/The Love Below","Spider-Man: Into The Spider-Verse","Split Decision","Square Up","SremmLife","Starboy","Stay +","Stay Dangerous","Staying At Tamara's","Steppenwolf","Stick Season","Still Bill","Straight Outta Compton","Strange Trails","Stronger","Suavemente","Sublime","Suck It and See","Sucker","Sueños","Sugar","Summer Forever","Summer,","Sunset Season","Sunshine On Leith","Surfer Rosa","Sweet Talker","SweetSexySavage","System Of A Down","TA13OO","Talk That Talk","Talking Heads: 77","Tangled Up","Tango In The Night","Taxi Driver","Taylor Swift","Tell Me It's Real","Ten","Ten Summoner's Tales","Terra Sem Cep (Ao Vivo)","Terral","Testing","Tha Carter III","Thank Me Later","That's Christmas To Me","The Academy","The Adventures Of Bobby Ray","The Album","The Andy Williams Christmas Album","The Aviary","The Balcony","The Battle Of Los Angeles","The Beatles (White Album)","The Beginning","The Better Life","The Big Day","The Book","The Breakfast Club","The Cars","The Colour And The Shape","The Death Of Peace Of Mind","The Diary Of Alicia Keys","The Documentary","The Emancipation Of Mimi","The Eminem Show","The End Of Everything","The Final Countdown","The Forever Story","The Foundation","The Goat","The Golden Child","The Good Parts","The Greatest Showman: Reimagined","The Green Trip","The Hardest Love","The Head And The Heart","The Human Condition","The Infamous","The Lady Killer","The Last Don II","The Lion King","The Lockdown Sessions","The London Sessions","The Lord Of The Rings: The Fellowship Of The Ring","The Lost Boy","The Magic Of Christmas / The Christmas Song","The Marshall Mathers LP","The Martin Garrix Collection","The Melodic Blue","The Mockingbird & The Crow","The Pains Of Growing","The Papercut Chronicles","The Perfect Luv Tape","The Pinkprint","The Predator","The Queen Is Dead","The ReVe Festival: Finale","The Rise And Fall Of Ziggy Stardust And The Spiders From Mars","The Rising Tied","The River","The Stone Roses","The Story Of Us","The Stranger","The Sufferer & The Witness","The Sun's Tirade","The Temptations Sing Smokey","The Time Of Our Lives","The Way It Is","The Wonderful World Of Sam Cooke","The Writing's On The Wall","The Young And The Hopeless","Therapy","Therapy Session","There Is More (Live)","There Is Nothing Left To Lose","These Things Happen","Third Eye Blind","This Is Me...Then","This Unruly Mess I've Made","Threat to Survival","Thrill Of The Chase","Time","Timelezz","To Let A Good Thing Die","To Pimp A Butterfly","Toast To Our Differences","Todos Os Cantos, Vol. 1 (Ao Vivo)","Too Hard","Torches X","Total Xanarchy","Toto IV","Toulouse Street","Tourist History","Toxicity","Tragic Kingdom","Tranquility Base Hotel & Casino","Traumazine","Traveler","Tres Hombres","Trip At Knight","Tron: Legacy","True Blue","True Colors","Trustfall","Tu Veneno Mortal","Tudo Em Paz","Ubuntu","Ugly Is Beautiful","Ultra 2021","Una Mattina","Unbroken","Uncovered","Under Pressure","Unsponsored Content","Unstoppable","Unwritten","Urban Flora","Urban Hymns","Use Your Illusion I","Veneer","Versions Of Me","Vibes","Vice Versa","Vices & Virtues","Victory","Vida","Viejo Marihuano","Visualízate","Walk Away","Walk Me Home...","Watch The Throne","Wave","We Broke The Rules","We Love You Tecca","We Love You Tecca 2","Weezer (Green Album)","Welcome To The Madhouse","Westlife","What A Time To Be Alive","What Do You Think About The Car?","What Is Love?","What Makes You Country","What Separates Me From You","What You See Is What You Get / What You See Ain't Always What You Get","When It's Dark Out","When We All Fall Asleep, Where Do We Go?","Where The Light Is","While The World Was Burning","White Pony","Whitney","Who Really Cares","Who You Are","Who's Next","Wide Open","Wilder Mind","Wildfire","Willy And The Poor Boys","Wings / You Never Walk Alone","Wish","Wish You Were Here","Without Warning","Wonder","X&Y","XOXO","Y Que Quede Claro","YBN: The Mixtape","Yo Creo","You Will Regret","Youngblood","Younger Now","Youth"],ra=["$NOT","$uicideboy$","(G)I-DLE","*NSYNC","2 Chainz","21 Savage","6LACK","? & The Mysterians","A Boogie Wit da Hoodie","A Taste of Honey","A Tribe Called Quest","A-Ha","ABBA","AC/DC","AJ Tracey","ATEEZ","Ace of Base","Adele","Ado","Aerosmith","Agust D","Aitana","Al Dexter & his Troopers","Al Green","Al Jolson","Al Martino","Alan Jackson","Alannah Myles","Alec Benjamin","Alejandro Sanz","Alesso","Alfredo Olivas","Ali Gatie","Alice In Chains","Alina Baraz","All Time Low","All-4-One","All-American Rejects","Alok","America","American Quartet","Amii Stewart","Amitabh Bhattacharya","Ana Castela","Anderson .Paak","Andy Grammer","Angus & Julia Stone","Anirudh Ravichander","Anita Ward","Anitta","Anton Karas","Anuel AA","Arcade Fire","Archie Bell & The Drells","Archies","Aretha Franklin","Arizona Zervas","Armin van Buuren","Arthur Conley","Artie Shaw","Asake","Asees Kaur","Association","Atif Aslam","Audioslave","Aventura","Avril Lavigne","Aya Nakamura","B J Thomas","B.o.B","BLACKPINK","BONES","BROCKHAMPTON","BTS","Baby Keem","Bachman-Turner Overdrive","Backstreet Boys","Bad Bunny","Badshah","Bailey Zimmerman","Banda El Recodo","Barbra Streisand","Barry White","Bazzi","Bebe Rexha","Becky G","Becky Hill","Bee Gees","Ben Bernie","Ben Howard","Ben Selvin","Berlin","Bessie Smith","Bethel Music","Bette Midler","Beyonce","Bibi Blocksberg","Bibi und Tina","BigXthaPlug","Bill Doggett","Bill Haley & his Comets","Bill Withers","Billy Davis Jr","Billy Joel","Billy Paul","Billy Preston","Billy Swan","Birdy","Bizarrap","Blake Shelton","Blur","Bob Marley & The Wailers","Bob Seger","Bobby Darin","Bobby Lewis","Bobby McFerrin","Bobby Vinton","Boney M.","Bonez MC","Bonnie Tyler","Booba","Boston","BoyWithUke","Boyce Avenue","Bradley Cooper","Bread","Brent Faiyaz","Brett Young","Bring Me The Horizon","Britney Spears","Brooks & Dunn","Bruce Channel","Bruno & Marrone","Bryan Adams","Bryce Vine","Buddy Holly","Burna Boy","C. Tangana","CKay","CRO","Camilo","Capital Bra","Captain & Tennille","Cardi B","Carin Leon","Carlos Vives","Carly Simon","Carpenters","Cavetown","Celine Dion","Central Cee","Chaka Khan","Champs","Charlie Rich","Chayanne","Cheat Codes","Cher","Chic","Chicago","Chris Brown","Chris Isaak","Chris Young","Christina Aguilera","Christina Perri","Christopher Cross","Chuck Berry","Ciara","Cigarettes After Sex","Cliff Edwards (Ukelele Ike)","Cody Johnson","Colbie Caillat","Colby O'Donis","Cole Swindell","Coleman Hawkins","Contours","Coolio","Count Basie","Cris Mj","Culture Club","Cyndi Lauper","D-Block Europe","DAY6","DJ Khaled","DJ Luian","DJ Nelson","DMX","DNCE","DaVido","Dadju","Daft Punk","Dan + Shay","Daniel Powter","Danny Ocean","Darius Rucker","Dave","David Bowie","David Guetta","Daya","Dean Martin","Deee-Lite","Deep Purple","Deftones","Demi Lovato","Dennis Lloyd","Denzel Curry","Dermot Kennedy","Desiigner","Devo","Dewa 19","Dexys Midnight Runners","Diddy","Dido","Die drei !!!","Diego & Victor Hugo","Diljit Dosanjh","Dimitri Vegas & Like Mike","Dinah Shore","Dionne Warwick","Dire Straits","Disclosure","Dixie Cups","Doja Cat","Dolly Parton","Don Diablo","Don Henley","Don McLean","Don Omar","Donna Summer","Donovan","Dr. Dre","Drake","Dreamville","Dua Lipa","EMF","ENHYPEN","Earth, Wind & Fire","Ed Sheeran","Eddie Cantor","Eddie Cochran","Eddy Howard","Edgar Winter Group","Edwin Hawkins Singers","Edwin Starr","El Alfa","Eladio Carrion","Electric Light Orchestra","Elevation Worship","Ella Henderson","Ellie Goulding","Elton John","Elvis Presley","Empire of the Sun","En Vogue","Enrique Iglesias","Eslabon Armado","Ethel Waters","Etta James","Evanescence","Exile","Extreme","Faith Hill","Fall Out Boy","Fanny Brice","Farruko","Fats Domino","Fats Waller","Feid","Felix Jaehn","Fergie","Fetty Wap","Fiersa Besari","Fifth Harmony","Fine Young Cannibals","Five Finger Death Punch","Fleetwood Mac","Flo-Rida","Florence + The Machine","Flume","Foo Fighters","Foreigner","Foster The People","Four Aces","Frank Ocean","Frank Sinatra","Frankie Avalon","Frankie Valli","Fred Astaire","Freda Payne","Freddie Dredd","Freddy Fender","French Montana","Fuerza Regida","Fujii Kaze","Future","G-Eazy","Garfunkel and Oates","Gary Lewis & The Playboys","Gary Numan","Gene Autry","Gene Chandler","Gene Vincent","George Michael","George Strait","Gera MX","Ghost","Ghostemane","Gigi D'Agostino","Gladys Knight & The Pips","Glass Animals","Glee Cast","Gloria Gaynor","Godsmack","Gorillaz","Gotye","Grand Funk Railroad","Green Day","Grouplove","Grupo Firme","Grupo Marca Registrada","Gryffin","Gucci Mane","Guess Who","Gunna","Gusttavo Lima","Guy Mitchell","Gwen Stefani","Gzuz","H.E.R.","HARDY","Hailee Steinfeld","Halsey","Hans Zimmer","Harris Jayaraj","Harry Chapin","Harry James","Harry Nilsson","Harry Styles","Hayley Williams","Herb Alpert","Herman's Hermits","Hillsong UNITED","Hillsong Worship","Hollywood Undead","Honey Cone","Hoobastank","Hues Corporation","I Prevail","ITZY","IVE","Ice Cube","Ice Spice","Iggy Azalea","Imagine Dragons","Incubus","Internet Money","Isaac Hayes","J Geils Band","J. Cole","JAY-Z","JJ Lin","JP Saxe","JVKE","Jack Harlow","Jack Johnson","Jackie Wilson","Jacquees","James Arthur","James Brown","James TW","James Taylor","Jamie Foxx","Janet Jackson","Janis Joplin","Jason Aldean","Jason Mraz","Jay Chou","Jay Sean","Jay Wheeler","Jaymes Young","Jean Knight","Jeezy","Jennifer Lopez","Jennifer Warnes","Jeremih","Jeremy Zucker","Jerry Lee Lewis","Jerry Murad's Harmonicats","Jess Glynne","Jessie J","Jewel","Jimi Hendrix","Jimin","Jimmie Rodgers","Jimmy Dean","Jo Stafford","Joan Jett & The Blackhearts","Joao Gilberto","Joel Corry","John Fred & The Playboy Band","John Legend","John Mayer","John Williams","Johnnie Ray","Johnnie Taylor","Johnny Cash","Johnny Horton","Johnny Mathis","Johnny Mercer","Johnny Nash","Joji","Jon Bellion","Jonas Blue","Jonas Brothers","Joni James","Jorja Smith","Juan Gabriel","Juan Luis Guerra 4.40","Juanes","Juice Newton","Julia Michaels","Justin Bieber","Justin Quiles","KALEO","KAROL G","KAYTRANADA","KK","KSI","KYLE","Kacey Musgraves","Kane Brown","Kanye West","Karan Aujla","Kate Smith","Katy Perry","Kay Kyser","Ke$ha","Kehlani","Kelly Clarkson","Kenny Chesney","Kenny Loggins","Kenny Rogers","Kenshi Yonezu","Kenya Grace","Kevin Gates","Key Glock","Khalid","Kim Carnes","Kim Petras","Kimbra","Kina","King Gnu","Kings of Leon","Kingsmen","Kitty Kallen","Kodak Black","Kodaline","Kollegah","Kool & The Gang","Kungs","Kygo","Kylie Minogue","LE SSERAFIM","LISA","LMFAO","LUDMILLA","La Adictiva Banda San José de Mesillas","La Oreja de Van Gogh","Labrinth","Lady Antebellum","Lady GaGa","Lainey Wilson","Lana Del Rey","Latto","Lauryn Hill","Lauv","League of Legends","Lee Brice","Leon Bridges","Leona Lewis","Lesley Gore","Leslie Odom Jr.","Liam Payne","Lifehouse","Lil Baby","Lil Dicky","Lil Durk","Lil Mosey","Lil Nas X","Lil Pump","Lil Skies","Lil Tjay","Lil Uzi Vert","Lil Yachty","Lil' Kim","Lil' Wayne","Lin-Manuel Miranda","Linkin Park","Lionel Richie","Lipps Inc","Lisa Loeb","Little Peggy March","Little Richard","Lofi Fruits Music","Lord Huron","Los Del Rio","Los Dos Carnales","Los Lobos","Los Temerarios","Los Tigres Del Norte","Los Tucanes De Tijuana","Lou Reed","Loud Luxury","Louis Jordan","Louis Tomlinson","Love Unlimited","Lovin' Spoonful","Luan Santana","Luciano","Luis Miguel","Luis R Conriquez","Lulu","Lunay","Lupe Fiasco","M","MAX","MC Hammer","MC Ryan SP","MKTO","Mabel","Machine Gun Kelly","Madison Beer","Madonna","Mahalini","Major Lazer","Mambo Kingz","Maneskin","Marco Antonio Solís","Margaret Whiting","Maria Becerra","Mario","Mario Lanza","Mark Ronson","Maroon 5","Marshmello","Martin Garrix","Mary Ford","Mary J Blige","Mary J. Blige","Mary Wells","Matoma","Mau y Ricky","Meek Mill","Megadeth","Melanie","Melanie Martinez","Melendi","Men At Work","Metro Boomin","Michael Bublé","Michael Jackson","Michael McDonald","Michael Sembello","Miguel","Mike Posner","Miley Cyrus","Milky Chance","Minnie Riperton","Miracle Tones","Miranda Lambert","Mohit Chauhan","Mon Laferte","Moneybagg Yo","Monsta X","Mora","Morad","Morat","Mother Mother","Motley Crue","Ms. Lauryn Hill","Mumford & Sons","Muse","Mya","Myke Towers","NCT 127","NCT DREAM","NEFFEX","Nadin Amizah","Nancy Sinatra","Nat King Cole","Nate Smith","Natti Natasha","Nayer","Neil Diamond","Neil Sedaka","Nekfeu","Nelly","New Vaudeville Band","Next","Nickelback","Nicki Minaj","Nicki Nicole","Nicky Jam","Nina Simone","Ninho","Nipsey Hussle","Nirvana","Niska","No Doubt","Norah Jones","Normani","OMI","ONE OK ROCK","Oasis","Official HIGE DANdism","Offset","Old Dominion","Oliver Heldens","Olivia Rodrigo","Omah Lay","One Direction","Otis Redding","OutKast","Owl City","P Diddy","P!nk","PLK","PNL","Pamungkas","Passenger","Pat Boone","Patsy Cline","Patti LaBelle","Patti Page","Paul & Paula","Paul Revere & the Raiders","Paul Robeson","Paul Russell","Paul Whiteman","Paula Abdul","Peaches & Herb","Pearl Jam","Pee Wee Hunt","Pee Wee King","Pentatonix","Percy Faith","Percy Sledge","Peso Pluma","Peter Cetera","Peter Gabriel","Peter, Paul & Mary","Pharrell Williams","Pierce The Veil","Pineapple StormTv","Pink Floyd","Pink Sweat$","Piso 21","Pitbull","Plan B","Player","Polo G","Pop Smoke","Portugal. The Man","Pouya","Prince","Prince Royce","Pusha T","Quality Control","Queen","Quinn XCII","R. Kelly","RAF Camora","RAYE","REM","REO Speedwagon","Radiohead","Rag'n'Bone Man","Rage Against The Machine","Rahat Fateh Ali Khan","Rainbow Kitten Surprise","Rammstein","Rauw Alejandro","Ray Charles","Ray Parker Jr","Ray Stevens","Red Foley","Red Hot Chili Peppers","Red Velvet","Regard","Regina Belle","Reik","Rels B","Rema","Ricardo Arjona","Rich The Kid","Rick Astley","Rick Dees & his Cast of Idiots","Rick Ross","Rick Springfield","Ricky Martin","Ricky Nelson","Rihanna","Rita Ora","Ritchie Valens","Rizky Febian","Rob Thomas","Roberta Flack","Robin Schulz","Robin Thicke","Rod Stewart","Rod Wave","Roddy Ricch","Roger Miller","Romeo Santos","Rosemary Clooney","Roxette","Roy Acuff","Roy Orbison","Rudimental","Ruel","Ruth B.","Ryan Lewis","SCH","SEVENTEEN","SWV","Sabaton","Sabrina Carpenter","Sachet Tandon","Sachin-Jigar","Sade","Sam Cooke","Sam Feldt","Sam Hunt","Sam Smith","Sam The Sham & The Pharaohs","Sammy Davis Jr","Sammy Kaye","Santana","Sasha Alex Sloan","Savage Garden","Saweetie","Scorpions","Sean Kingston","Sean Paul","Sebastian Yatra","Sech","Seeb","Sezen Aksu","Sfera Ebbasta","Shaggy","Shania Twain","Shawn Mendes","Sheena Easton","Shinedown","Shubh","Sia","Sid Sriram","Sidhu Moose Wala","Silk","Silver Convention","Simon & Garfunkel","Sinead O'Connor","Sir Mix-a-Lot","Sister Sledge","Ski Mask The Slump God","Skillet","Skrillex","Sleeping At Last","Smokey Robinson","Snoop Dogg","Snow Patrol","Soda Stereo","Sonu Nigam","Sophie Ellis-Bextor","Spencer Davis Group","Spice Girls","Stan Getz","Starland Vocal Band","Stephen Sanchez","Steve Aoki","Steve Lacy","Steve Winwood","Stevie B","Sting","Stormzy","Strawberry Alarm Clock","Stray Kids","Stromae","Sublime","Sum 41","Summer Walker","Supertramp","Survivor","Swedish House Mafia","System Of A Down","T-Pain","T.I.","TAEYEON","TKKG","TLC","TOMORROW X TOGETHER","TOTO","TWICE","Tag Team","Tainy","Tammi Terrell","Tanishk Bagchi","Tate McRae","Taylor Swift","Tears For Fears","Tems","Tennessee Ernie Ford","Terence Trent D'Arby","Teresa Brewer","Terry Jacks","The Ames Brothers","The Animals","The B52s","The Bangles","The Beatles","The Black Eyed Peas","The Black Keys","The Box Tops","The Chainsmokers","The Chiffons","The Chordettes","The Clash","The Coasters","The Commodores","The Cowsills","The Cranberries","The Crew-Cuts","The Cure","The Detroit Spinners","The Diamonds","The Doobie Brothers","The Doors","The Drifters","The Emotions","The Eurythmics","The Fireballs","The Flamingos","The Foundations","The Four Seasons","The Fray","The Game","The Go Gos","The Goo Goo Dolls","The Head And The Heart","The Hollies","The Ink Spots","The Isley Brothers","The Jackson 5","The Kid LAROI","The Killers","The Kingston Trio","The Kooks","The Lemon Pipers","The Living Tombstone","The Lumineers","The Mamas & The Papas","The Marvelettes","The McCoys","The Mills Brothers","The Miracles","The Monkees","The Moody Blues","The National","The Neighbourhood","The Notorious B.I.G.","The O'Jays","The Offspring","The Osmonds","The Partridge Family","The Penguins","The Pet Shop Boys","The Platters","The Righteous Brothers","The Rolling Stones","The Ronettes","The Score","The Script","The Seekers","The Shangri-Las","The Smashing Pumpkins","The Staple Singers","The Strokes","The Supremes","The Temptations","The Turtles","The Vamps","The Verve","The Village People","The Weavers","The White Stripes","The Young Rascals","The Zombies","Thelma Houston","Thomas Rhett","Three Days Grace","Three Dog Night","Three Man Down","Timbaland","Timmy Trumpet","Toby Keith","Tom Jones","Tom Petty and the Heartbreakers","Tommy Dorsey","Tommy Edwards","Tommy James & the Shondells","Tone Loc","Toni Braxton","Topic","Tory Lanez","Tove Lo","Trevor Daniel","Trey Songz","Trippie Redd","Trueno","Tulsi Kumar","Tulus","Twenty One Pilots","Two Feet","Ty Dolla $ign","Tyga","Tyler Hubbard","U2","UB40","UZI","Ufo361","Upchurch","V","Vampire Weekend","Van McCoy","Van Morrison","Vance Joy","Vanessa Carlton","Vanessa Williams","Vera Lynn","Vernon Dalhart","Vicente Fernandez","Vishal-Shekhar","Volbeat","WILLOW","Wale","Wallows","Weezer","Wham!","Whitney Houston","Why Don't We","Wilbert Harrison","Wilson Phillips","Wiz Khalifa","Woody Guthrie","Wyclef Jean","XXXTENTACION","Xavi","YG","YNW Melly","YOASOBI","Yandel","Years & Years","Yeat","Yo Gotti","Young Dolph","Young Miko","Young Thug","YoungBoy Never Broke Again","Yung Gravy","Yuuri","Yuvan Shankar Raja","ZAYN","ZZ Top","Zac Brown Band","Zach Bryan","Zara Larsson","aespa","benny blanco","blink-182","d4vd","deadmau5","girl in red","gnash","iann dior","will.i.am"],oa=["Acid House","Acid Jazz","Acid Rock","Acoustic","Acoustic Blues","Afro-Pop","Afrobeat","Alt-Rock","Alternative","Ambient","American Trad Rock","Americana","Anime","Arena Rock","Art-Rock","Avant-Garde","Avant-Punk","Baladas y Boleros","Barbershop","Baroque","Bebop","Big Band","Black Metal","Blue Note","Bluegrass","Blues","Boogaloo","Bop","Bossa Nova","Bounce","Brazilian Funk","Breakbeat","Britpop","CCM","Cajun","Cantopop","Celtic","Celtic Folk","Chamber Music","Chant","Chanukah","Chicago Blues","Chicago House","Chicano","Children’s Music","Chill","Choral","Christian","Christmas","Classical","Club","College Rock","Conjunto","Cool Jazz","Country","Crunk","Dance","Dancehall","Death Metal","Deep House","Delta Blues","Detroit Techno","Dirty South","Disco","Disney","Dixieland","Doo-wop","Downtempo","Dream Pop","Drill","Drinking Songs","Drone","Drum'n'bass","Dub","Dubstep","EDM","Early Music","East Coast Rap","Easter","Easy Listening","Eclectic","Electric Blues","Electro","Electronic","Electronica","Emo","Enka","Environmental","Ethio-jazz","Experimental","Experimental Rock","Flamenco","Folk","Folk-Rock","Forro","French Pop","Funk","Fusion","Gangsta Rap","Garage","German Folk","German Pop","Glam Rock","Gospel","Goth","Grime","Grindcore","Groove","Grunge","Hair Metal","Halloween","Happy","Hard Bop","Hard Dance","Hard Rock","Hardcore","Hardcore Punk","Hardcore Rap","Hardstyle","Healing","Heavy Metal","High Classical","Hip Hop","Holiday","Honky Tonk","House","IDM","Impressionist","Indie","Industrial","Instrumental","J-Dance","J-Idol","J-Pop","J-Punk","J-Rock","J-Ska","J-Synth","Jackin House","Jam Bands","Japanese Pop","Jazz","Jungle","K-Pop","Karaoke","Kayokyoku","Kids","Kitsch","Klezmer","Krautrock","Latin","Latin Jazz","Latin Rap","Local","Lounge","Lullabies","MPB","Mainstream Jazz","Malay","Mandopop","March","Mariachi","Mawwal","Medieval","Meditation","Metal","Metalcore","Minimal Techno","Minimalism","Modern","Motown","Mugham","Musicals","Musique Concrète","Nature","Neo-Soul","Nerdcore","New Acoustic","New Age","New Mex","New Wave","No Wave","Noise","Nordic","Novelty","OPM","Oi!","Old School Rap","Opera","Orchestral","Original Score","Outlaw Country","Pagode","Party","Piano","Polka","Pop","Pop Film","Pop Latino","Post Dubstep","Power Pop","Praise & Worship","Progressive House","Progressive Rock","Proto-punk","Psych Rock","Psychedelic","Punk","Punk Rock","Qawwali","Quiet Storm","R&B","Ragtime","Rainy Day","Rap","Reggae","Reggaeton","Regional Mexicano","Relaxation","Renaissance","Retro","Rock","Rockabilly","Rocksteady","Romance","Romantic","Roots Reggae","Roots Rock","SKA","Sad","Salsa","Samba","Second Line","Sertanejo","Shaabi","Shoegaze","Sleep","Smooth Jazz","Soft Rock","Soul","Soundtrack","Southern Gospel","Southern Rock","Space Rock","Stage And Screen","Steampunk","Summer","Surf","Swamp Pop","Swing","Synth Pop","Tango","Techno","Teen Pop","Tejano","Tex-Mex","Thanksgiving","Traditional","Trance","Trip Hop","Tropical","Underground Rap","Urban","Urban Cowboy","West Coast Rap","Western Swing","World","Worldbeat","Zydeco"],na=["(Everything I Do) I Do it For You","(Ghost) Riders in the Sky","(I Can't Get No) Satisfaction","(I've Got a Gal In) Kalamazoo","(I've Had) the Time of My Life","(It's No) Sin","(Just Like) Starting Over","(Let Me Be Your) Teddy Bear","(Put Another Nickel In) Music! Music! Music!","(Sexual) Healing","(Sittin' On) the Dock of the Bay","(They Long to Be) Close to You","(You Keep Me) Hangin' On","(You're My) Soul & Inspiration","(Your Love Keeps Lifting Me) Higher & Higher","12th Street Rag","1999","19th Nervous Breakdown","50 Ways to Leave Your Lover","9 to 5","96 Tears","A Boy Named Sue","A Hard Day's Night","A String of Pearls","A Thousand Miles","A Tree in the Meadow","A Whiter Shade of Pale","A Whole New World (Aladdin's Theme)","A Woman in Love","A-Tisket A-Tasket","ABC","Abracadabra","Ac-cent-tchu-ate the Positive","Addicted to Love","After You've Gone","Afternoon Delight","Again","Against All Odds (Take a Look At Me Now)","Ain't Misbehavin'","Ain't No Mountain High Enough","Ain't No Sunshine","Ain't That a Shame","Airplanes","All Along the Watchtower","All I Have to Do is Dream","All I Wanna Do","All My Lovin' (You're Never Gonna Get It)","All Night Long (All Night)","All Out of Love","All Shook Up","All You Need is Love","Alone","Alone Again (Naturally)","Always On My Mind","American Pie","American Woman","Angie","Another Brick in the Wall (part 2)","Another Day in Paradise","Another Night","Another One Bites the Dust","Apologize","April Showers","Aquarius/Let The Sunshine In","Are You Lonesome Tonight?","Arthur's Theme (Best That You Can Do)","As Time Goes By","At Last","At the Hop","Auf Wiederseh'n Sweetheart","Baby Baby","Baby Come Back","Baby Got Back","Baby Love","Baby One More Time","Bad Day","Bad Girls","Bad Moon Rising","Bad Romance","Bad, Bad Leroy Brown","Baker Street","Ball of Confusion (That's What the World is Today)","Ballad of the Green Berets","Ballerina","Band On the Run","Band of Gold","Battle of New Orleans","Be Bop a Lula","Be My Baby","Be My Love","Beat It","Beautiful Day","Beauty & the Beast","Because I Love You (The Postman Song)","Because You Loved Me","Because of You","Before The Next Teardrop Falls","Begin the Beguine","Behind Closed Doors","Being With You","Believe","Ben","Bennie & the Jets","Besame Mucho","Best of My Love","Bette Davis Eyes","Big Bad John","Big Girls Don't Cry","Billie Jean","Bitter Sweet Symphony","Black Or White","Black Velvet","Blaze of Glory","Bleeding Love","Blue Suede Shoes","Blue Tango","Blueberry Hill","Blurred Lines","Body & Soul","Bohemian Rhapsody","Boogie Oogie Oogie","Boogie Woogie Bugle Boy","Boom Boom Pow","Born in the USA","Born to Be Wild","Born to Run","Boulevard of Broken Dreams","Brand New Key","Brandy (You're A Fine Girl)","Breaking Up is Hard to Do","Breathe","Bridge Over Troubled Water","Brother Louie","Brother, Can You Spare a Dime?","Brown Eyed Girl","Brown Sugar","Build Me Up Buttercup","Burn","Buttons & Bows","Bye Bye Love","Bye Bye, Blackbird","Bye, Bye, Bye","Caldonia Boogie (What Makes Your Big Head So Hard)","California Dreamin'","California Girls","Call Me","Call Me Maybe","Can You Feel the Love Tonight","Can't Buy Me Love","Can't Get Enough of Your Love, Babe","Can't Help Falling in Love","Candle in the Wind '97","Candy Man","Car Wash","Careless Whisper","Cars","Cat's in the Cradle","Cathy's Clown","Celebration","Centerfold","Chain of Fools","Chances Are","Change the World","Chapel of Love","Chattanooga Choo Choo","Chattanoogie Shoe-Shine Boy","Check On It","Cheek to Cheek","Cherish","Cherry Pink & Apple Blossom White","Cold, Cold Heart","Colors of the Wind","Come On Eileen","Come On-a My House","Come Together","Coming Up","Cracklin' Rosie","Crazy","Crazy For You","Crazy Little Thing Called Love","Crazy in Love","Creep","Crimson & Clover","Crocodile Rock","Cry","Cry Like a Baby","Crying","Da Doo Ron Ron (When He Walked Me Home)","Dance to the Music","Dancing Queen","Dancing in the Dark","Dancing in the Street","Dardanella","Daydream Believer","December 1963 (Oh What a Night)","Delicado","Dilemma","Disco Duck","Disco Lady","Disturbia","Dizzy","Do That to Me One More Time","Do Wah Diddy Diddy","Do Ya Think I'm Sexy?","Do You Love Me?","Don't Be Cruel","Don't Fence Me In","Don't Go Breaking My Heart","Don't Leave Me This Way","Don't Let the Stars Get in Your Eyes","Don't Let the Sun Go Down On Me","Don't Speak","Don't Stop 'Til You Get Enough","Don't Worry Be Happy","Don't You (Forget About Me)","Don't You Want Me","Doo Wop (That Thing)","Down","Down Hearted Blues","Down Under","Downtown","Dreamlover","Dreams","Drop it Like It's Hot","Drops of Jupiter (Tell Me)","Duke of Earl","E.T.","Earth Angel","Ebony & Ivory","Eight Days a Week","Empire State Of Mind","End of the Road","Endless Love","Escape (The Pina Colada Song)","Eve of Destruction","Every Breath You Take","Every Little Thing She Does is Magic","Everybody Loves Somebody","Everybody Wants to Rule the World","Everyday People","Eye of the Tiger","Faith","Fallin'","Fame","Family Affair","Fantasy","Fast Car","Feel Good Inc","Feel Like Making Love","Fire & Rain","Firework","Flashdance. What a Feeling","Fly Robin Fly","Foolish Games","Footloose","For What It's Worth (Stop, Hey What's That Sound)","Fortunate Son","Frankenstein","Freak Me","Freebird","Frenesi","Funkytown","Gangsta's Paradise","Georgia On My Mind","Georgy Girl","Get Back","Get Down Tonight","Get Off of My Cloud","Ghostbusters","Gimme Some Lovin'","Girls Just Wanna Have Fun","Give Me Everything","Gives You Hell","Glamorous","Glory of Love","Go Your Own Way","God Bless America","God Bless the Child","Gold Digger","Gonna Make You Sweat (Everybody Dance Now)","Good Lovin'","Good Times","Good Vibrations","Goodbye Yellow Brick Road","Goodnight, Irene","Got to Give it Up","Grease","Great Balls of Fire","Greatest Love of All","Green Onions","Green River","Green Tambourine","Grenade","Groove is in the Heart","Groovin'","Gypsies, Tramps & Thieves","Hair","Hang On Sloopy","Hanging by a Moment","Hanky Panky","Happy Days Are Here Again","Happy Together","Harbour Lights","Hard to Say I'm Sorry","Harper Valley PTA","Have You Ever Really Loved a Woman?","He'll Have to Go","He's So Fine","He's a Rebel","Heart of Glass","Heart of Gold","Heartbreak Hotel","Hello Dolly","Hello, I Love You, Won't You Tell Me Your Name?","Help Me, Rhonda","Help!","Here Without You","Here in My Heart","Hero","Hey Baby","Hey Jude","Hey Paula","Hey There","Hey There Delilah","Hey Ya!","Higher Love","Hips don't lie","Hit the Road, Jack","Hold On","Hollaback Girl","Honey","Honky Tonk","Honky Tonk Woman","Horse With No Name","Hot Child In The City","Hot Stuff","Hotel California","Hound Dog","House of the Rising Sun","How Deep is Your Love?","How Do I Live?","How Do You Mend a Broken Heart","How High the Moon","How Much is That Doggy in the Window?","How Will I Know","How You Remind Me","How to Save a Life","Hungry Heart","Hurt So Good","I Believe I Can Fly","I Can Dream, Can't I?","I Can Help","I Can See Clearly Now","I Can't Get Next to You","I Can't Get Started","I Can't Go For That (No Can Do)","I Can't Help Myself (Sugar Pie, Honey Bunch)","I Can't Stop Loving You","I Don't Want to Miss a Thing","I Fall to Pieces","I Feel Fine","I Feel For You","I Feel Love","I Get Around","I Got You (I Feel Good)","I Got You Babe","I Gotta Feeling","I Heard it Through the Grapevine","I Honestly Love You","I Just Called to Say I Love You","I Just Wanna Be Your Everything","I Kissed A Girl","I Love Rock 'n' Roll","I Need You Now","I Only Have Eyes For You","I Shot the Sheriff","I Still Haven't Found What I'm Looking For","I Swear","I Think I Love You","I Walk the Line","I Wanna Dance With Somebody (Who Loves Me)","I Wanna Love You","I Want You Back","I Want to Hold Your Hand","I Want to Know What Love Is","I Went to Your Wedding","I Will Always Love You","I Will Follow Him","I Will Survive","I Write the Songs","I'll Be Missing You","I'll Be There","I'll Make Love to You","I'll Never Smile Again","I'll Take You There","I'll Walk Alone","I'll be seeing you","I'm Looking Over a Four Leaf Clover","I'm So Lonesome I Could Cry","I'm Sorry","I'm Walking Behind You","I'm Your Boogie Man","I'm Yours","I'm a Believer","I've Heard That Song Before","If (They Made Me a King)","If I Didn't Care","If You Don't Know Me By Now","If You Leave Me Now","Imagine","In Da Club","In the End","In the Ghetto","In the Mood","In the Summertime","In the Year 2525 (Exordium & Terminus)","Incense & Peppermints","Indian Reservation (The Lament Of The Cherokee Reservation Indian)","Instant Karma","Iris","Ironic","Irreplaceable","It Had to Be You","It's All in the Game","It's My Party","It's Now Or Never","It's Still Rock 'n' Roll to Me","It's Too Late","Jack & Diane","Jailhouse Rock","Jessie's Girl","Jive Talkin'","Johnny B Goode","Joy to the World","Judy in Disguise (With Glasses)","Jump","Jumpin' Jack Flash","Just Dance","Just My Imagination (Running Away With Me)","Just the Way You Are","Kansas City","Karma Chameleon","Keep On Loving You","Killing Me Softly With His Song","King of the Road","Kiss","Kiss & Say Goodbye","Kiss From a Rose","Kiss Me","Kiss On My List","Kiss You All Over","Knock On Wood","Knock Three Times","Kokomo","Kryptonite","Kung Fu Fighting","La Bamba","Lady","Lady Marmalade (Voulez-Vous Coucher Aver Moi Ce Soir?)","Last Train to Clarksville","Layla","Le Freak","Leader of the Pack","Lean On Me","Leaving, on a Jet Plane","Let Me Call You Sweetheart","Let Me Love You","Let it Be","Let it Snow! Let it Snow! Let it Snow!","Let's Dance","Let's Get it On","Let's Groove","Let's Hear it For the Boy","Let's Stay Together","Light My Fire","Lights","Like a Prayer","Like a Rolling Stone","Like a Virgin","Little Darlin'","Little Things Mean a Lot","Live & Let Die","Livin' La Vida Loca","Livin' On a Prayer","Living For the City","Locked Out Of Heaven","Lola","Lonely Boy","Long Cool Woman in a Black Dress","Long Tall Sally","Look Away","Lookin' Out My Back Door","Lose Yourself","Losing My Religion","Louie Louie","Love Child","Love Hangover","Love In This Club","Love Is Blue (L'Amour Est Bleu)","Love Letters in the Sand","Love Me Do","Love Me Tender","Love Shack","Love Theme From 'A Star is Born' (Evergreen)","Love Train","Love Will Keep Us Together","Love is a Many Splendoured Thing","Love to Love You Baby","Love's Theme","Loving You","Low","Macarena","Mack the Knife","Maggie May","Magic","Magic Carpet Ride","Make Love to Me","Make it With You","Makin' Whoopee","Mama Told Me Not to Come","Man in the Mirror","Manana (Is Soon Enough For Me)","Maneater","Maniac","Maybellene","Me & Bobby McGee","Me & Mrs Jones","Memories Are Made of This","Mercy Mercy Me (The Ecology)","Mickey","Midnight Train to Georgia","Minnie the Moocher","Miss You","Miss You Much","Mister Sandman","Mmmbop","Mona Lisa","Monday Monday","Money For Nothing","Mony Mony","Mood Indigo","Moonlight Cocktail","Moonlight Serenade","More Than Words","More Than a Feeling","Morning Train (Nine to Five)","Mr Big Stuff","Mr Brightside","Mr Tambourine Man","Mrs Brown You've Got a Lovely Daughter","Mrs Robinson","Mule Train","Music","My Blue Heaven","My Boyfriend's Back","My Eyes Adored You","My Girl","My Guy","My Heart Will Go On","My Life","My Love","My Man","My Prayer","My Sharona","My Sweet Lord","Na Na Hey Hey (Kiss Him Goodbye)","Nature Boy","Near You","Need You Now","Need You Tonight","Never Gonna Give You Up","Night & Day","Night Fever","Nights in White Satin","No One","No Scrubs","Nobody Does it Better","Nothin' on You","Nothing Compares 2 U","Nothing's Gonna Stop Us Now","Ode To Billie Joe","Oh Happy Day","Oh My Papa (O Mein Papa)","Oh, Pretty Woman","Ol' Man River","Ole Buttermilk Sky","On Bended Knee","On My Own","On the Atchison, Topeka & the Santa Fe","One","One Bad Apple","One More Try","One O'Clock Jump","One Sweet Day","One of These Nights","One of Us","Only The Lonely (Know The Way I Feel)","Only You (And You Alone)","Open Arms","Over There","Over the Rainbow","Paint it Black","Papa Don't Preach","Papa Was a Rolling Stone","Papa's Got a Brand New Bag","Paper Doll","Paper Planes","Paperback Writer","Party Rock Anthem","Peg o' My Heart","Peggy Sue","Pennies From Heaven","Penny Lane","People","People Got to Be Free","Personality","Philadelphia Freedom","Physical","Piano Man","Pick Up the Pieces","Pistol Packin' Mama","Play That Funky Music","Please Mr Postman","Poker Face","Pon De Replay","Pony Time","Pop Muzik","Prisoner of Love","Private Eyes","Promiscuous","Proud Mary","Purple Haze","Purple Rain","Puttin' on the Ritz","Que sera sera (Whatever will be will be)","Queen of Hearts","Rag Doll","Rag Mop","Rags to Riches","Raindrops Keep Falling On My Head","Rapture","Ray of Light","Reach Out (I'll Be There)","Red Red Wine","Rehab","Respect","Return to Sender","Reunited","Revolution","Rhapsody in Blue","Rhinestone Cowboy","Rich Girl","Riders On the Storm","Right Back Where We Started From","Ring My Bell","Ring of Fire","Rock Around the Clock","Rock With You","Rock Your Baby","Rock the Boat","Rock the Casbah","Roll Over Beethoven","Roll With It","Rolling In The Deep","Rosanna","Roses Are Red","Royals","Ruby Tuesday","Rudolph, the Red-Nosed Reindeer","Rum & Coca-Cola","Runaround Sue","Runaway","Running Scared","Rush Rush","Sailing","Save the Best For Last","Save the Last Dance For Me","Say It Right","Say My Name","Say Say Say","Say You, Say Me","School's Out","Seasons in the Sun","Secret Love","Sentimental Journey","Sexyback","Sh-Boom (Life Could Be a Dream)","Shadow Dancing","Shake Down","Shake You Down","She Drives Me Crazy","She Loves You","She's a Lady","Shining Star","Shop Around","Shout","Silly Love Songs","Since U Been Gone","Sing, Sing, Sing (With A Swing)","Singing The Blues","Single Ladies (Put A Ring On It)","Sir Duke","Sixteen Tons","Sledgehammer","Sleep Walk","Sleepy Lagoon","Slow Poke","Smells Like Teen Spirit","Smoke Gets in Your Eyes","Smoke On the Water","Smoke! Smoke! Smoke! (That Cigarette)","Smooth","So Much in Love","Soldier Boy","Some Enchanted Evening","Some of These Days","Somebody That I Used to Know","Somebody to Love","Someday","Somethin' Stupid","Something","Soul Man","Spanish Harlem","Spill the Wine","Spinning Wheel","Spirit in the Sky","St George & the Dragonette","St Louis Blues","Stagger Lee","Stairway to Heaven","Stand By Me","Stardust","Stars & Stripes Forever","Stay (I Missed You)","Stayin' Alive","Stop! in the Name of Love","Stormy Weather (Keeps Rainin' All the Time)","Straight Up","Strange Fruit","Stranger On the Shore","Strangers in the Night","Strawberry Fields Forever","Streets of Philadelphia","Stronger","Stuck On You","Sugar Shack","Sugar Sugar","Summer in the City","Summertime Blues","Sunday, Monday or Always","Sunshine Superman","Sunshine of Your Love","Superstar","Superstition","Surfin' USA","Suspicious Minds","Swanee","Sweet Caroline (Good Times Never Seemed So Good)","Sweet Child O' Mine","Sweet Dreams (Are Made of This)","Sweet Georgia Brown","Sweet Home Alabama","Sweet Soul Music","Swinging On a Star","T For Texas (Blue Yodel No 1)","TSOP (The Sound of Philadelphia)","Take Me Home, Country Roads","Take My Breath Away","Take On Me","Take The 'A' Train","Take a Bow","Tammy","Tangerine","Tears in Heaven","Tears of a Clown","Temperature","Tennessee Waltz","Tequila","Tha Crossroads","Thank You (Falettinme be Mice Elf Again)","That Lucky Old Sun (Just Rolls Around Heaven All Day)","That Old Black Magic","That'll Be the Day","That's Amore","That's What Friends Are For","That's the Way (I Like It)","That's the Way Love Goes","The Boy is Mine","The Boys of Summer","The Christmas Song (Chestnuts Roasting On An Open Fire)","The End of the World","The First Time Ever I Saw Your Face","The Girl From Ipanema","The Glow-Worm","The Great Pretender","The Gypsy","The Hustle","The Joker","The Last Dance","The Letter","The Loco-Motion","The Long & Winding Road","The Love You Save","The Morning After","The Power of Love","The Prisoner's Song","The Reason","The Rose","The Sign","The Song From Moulin Rouge (Where Is Your Heart)","The Sounds of Silence","The Streak","The Sweet Escape","The Thing","The Tide is High","The Tracks of My Tears","The Twist","The Wanderer","The Way We Were","The Way You Look Tonight","The Way You Move","Theme From 'A Summer Place'","Theme From 'Greatest American Hero' (Believe It Or Not)","Theme From 'Shaft'","There goes my baby","These Boots Are Made For Walking","Third Man Theme","This Diamond Ring","This Guy's in Love With You","This Land is Your Land","This Love","This Ole House","This Used to Be My Playground","Three Coins in the Fountain","Three Times a Lady","Thrift Shop","Thriller","Ticket to Ride","Tie a Yellow Ribbon 'round the Old Oak Tree","Tiger Rag","Tighten Up","Tik-Toc","Till I Waltz Again With You","Till The End of Time","Time After Time","Time of the Season","To Sir, with Love","Tom Dooley","Tonight's the Night (Gonna Be Alright)","Too Close","Too Young","Tossing & Turning","Total Eclipse of the Heart","Touch Me","Toxic","Travellin' Band","Travellin' Man","Truly Madly Deeply","Turn! Turn! Turn! (To Everything There is a Season)","Tutti Frutti","Twist & Shout","Two Hearts","U Can't Touch This","U Got it Bad","Umbrella","Un-Break My Heart","Unbelievable","Unchained Melody","Uncle Albert (Admiral Halsey)","Under the Boardwalk","Under the Bridge","Unforgettable","Up Around the Bend","Up Up & Away","Up Where We Belong","Upside Down","Use Somebody","Vaya Con Dios (may God Be With You)","Venus","Vision of Love","Viva La Vida","Vogue","Volare","Wabash Cannonball","Waiting For a Girl Like You","Wake Me Up Before You Go Go","Wake Up Little Susie","Walk Don't Run","Walk Like a Man","Walk Like an Egyptian","Walk On By","Walk On the Wild Side","Walk This Way","Wannabe","Want Ads","Wanted","War","Waterfalls","Wayward Wind","We Are Family","We Are Young","We Are the Champions","We Are the World","We Belong Together","We Built This City","We Can Work it Out","We Didn't Start the Fire","We Found Love","We Got The Beat","We Will Rock You","We've Only Just Begun","Weak","Wedding Bell Blues","West End Blues","West End Girls","What Goes Around Comes Around","What a Fool Believes","What'd I Say","What's Going On?","What's Love Got to Do With It?","Whatcha Say","Wheel of Fortune","When Doves Cry","When You Wish Upon a Star","When a Man Loves a Woman","Where Did Our Love Go","Where is the Love?","Whip It","Whispering","White Christmas","White Rabbit","Whole Lotta Love","Whole Lotta Shakin' Goin' On","Whoomp! (There it Is)","Why Do Fools Fall in Love?","Why Don't You Believe Me?","Wichita Lineman","Wicked Game","Wild Thing","Wild Wild West","Will It Go Round In Circles","Will You Love Me Tomorrow","Winchester Cathedral","Wind Beneath My Wings","Wipe Out","Wishing Well","With Or Without You","Without Me","Without You","Woman","Won't Get Fooled Again","Wooly Bully","Working My Way Back to You","YMCA","Yakety Yak","Yeah!","Yellow Rose of Texas","Yesterday","You Ain't Seen Nothin' Yet","You Always Hurt the One You Love","You Are the Sunshine of My Life","You Belong With Me","You Belong to Me","You Can't Hurry Love","You Don't Bring Me Flowers","You Don't Have to Be a Star (To Be in My Show)","You Light Up My Life","You Make Me Feel Brand New","You Make Me Feel Like Dancing","You Really Got Me","You Send Me","You Sexy Thing","You Were Meant for Me","You make Me Wanna","You'll Never Know","You're Beautiful","You're So Vain","You're Still the One","You're the One That I Want","You've Got a Friend","You've Lost That Lovin' Feelin'","Your Cheatin' Heart","Your Song"],hr$1={album:aa,artist:ra,genre:oa,song_name:na},ia=hr$1,ta=["activist","artist","author","blogger","business owner","coach","creator","designer","developer","dreamer","educator","engineer","entrepreneur","environmentalist","film lover","filmmaker","foodie","founder","friend","gamer","geek","grad","inventor","leader","model","musician","nerd","parent","patriot","person","philosopher","photographer","public speaker","scientist","singer","streamer","student","teacher","traveler","veteran","writer"],la=["{{person.bio_part}}","{{person.bio_part}}, {{person.bio_part}}","{{person.bio_part}}, {{person.bio_part}}, {{person.bio_part}}","{{person.bio_part}}, {{person.bio_part}}, {{person.bio_part}} {{internet.emoji}}","{{word.noun}} {{person.bio_supporter}}","{{word.noun}} {{person.bio_supporter}}  {{internet.emoji}}","{{word.noun}} {{person.bio_supporter}}, {{person.bio_part}}","{{word.noun}} {{person.bio_supporter}}, {{person.bio_part}} {{internet.emoji}}"],sa=["advocate","devotee","enthusiast","fan","junkie","lover","supporter"],da={generic:["Aaliyah","Aaron","Abagail","Abbey","Abbie","Abbigail","Abby","Abdiel","Abdul","Abdullah","Abe","Abel","Abelardo","Abigail","Abigale","Abigayle","Abner","Abraham","Ada","Adah","Adalberto","Adaline","Adam","Adan","Addie","Addison","Adela","Adelbert","Adele","Adelia","Adeline","Adell","Adella","Adelle","Aditya","Adolf","Adolfo","Adolph","Adolphus","Adonis","Adrain","Adrian","Adriana","Adrianna","Adriel","Adrien","Adrienne","Afton","Aglae","Agnes","Agustin","Agustina","Ahmad","Ahmed","Aida","Aidan","Aiden","Aileen","Aimee","Aisha","Aiyana","Akeem","Al","Alaina","Alan","Alana","Alanis","Alanna","Alayna","Alba","Albert","Alberta","Albertha","Alberto","Albin","Albina","Alda","Alden","Alec","Aleen","Alejandra","Alejandrin","Alek","Alena","Alene","Alessandra","Alessandro","Alessia","Aletha","Alex","Alexa","Alexander","Alexandra","Alexandre","Alexandrea","Alexandria","Alexandrine","Alexandro","Alexane","Alexanne","Alexie","Alexis","Alexys","Alexzander","Alf","Alfonso","Alfonzo","Alford","Alfred","Alfreda","Alfredo","Ali","Alia","Alice","Alicia","Alisa","Alisha","Alison","Alivia","Aliya","Aliyah","Aliza","Alize","Allan","Allen","Allene","Allie","Allison","Ally","Alphonso","Alta","Althea","Alva","Alvah","Alvena","Alvera","Alverta","Alvina","Alvis","Alyce","Alycia","Alysa","Alysha","Alyson","Alysson","Amalia","Amanda","Amani","Amara","Amari","Amaya","Amber","Ambrose","Amelia","Amelie","Amely","America","Americo","Amie","Amina","Amir","Amira","Amiya","Amos","Amparo","Amy","Amya","Ana","Anabel","Anabelle","Anahi","Anais","Anastacio","Anastasia","Anderson","Andre","Andreane","Andreanne","Andres","Andrew","Andy","Angel","Angela","Angelica","Angelina","Angeline","Angelita","Angelo","Angie","Angus","Anibal","Anika","Anissa","Anita","Aniya","Aniyah","Anjali","Anna","Annabel","Annabell","Annabelle","Annalise","Annamae","Annamarie","Anne","Annetta","Annette","Annie","Ansel","Ansley","Anthony","Antoinette","Antone","Antonetta","Antonette","Antonia","Antonietta","Antonina","Antonio","Antwan","Antwon","Anya","April","Ara","Araceli","Aracely","Arch","Archibald","Ardella","Arden","Ardith","Arely","Ari","Ariane","Arianna","Aric","Ariel","Arielle","Arjun","Arlene","Arlie","Arlo","Armand","Armando","Armani","Arnaldo","Arne","Arno","Arnold","Arnoldo","Arnulfo","Aron","Art","Arthur","Arturo","Arvel","Arvid","Arvilla","Aryanna","Asa","Asha","Ashlee","Ashleigh","Ashley","Ashly","Ashlynn","Ashton","Ashtyn","Asia","Assunta","Astrid","Athena","Aubree","Aubrey","Audie","Audra","Audreanne","Audrey","August","Augusta","Augustine","Augustus","Aurelia","Aurelie","Aurelio","Aurore","Austen","Austin","Austyn","Autumn","Ava","Avery","Avis","Axel","Ayana","Ayden","Ayla","Aylin","Baby","Bailee","Bailey","Barbara","Barney","Baron","Barrett","Barry","Bart","Bartholome","Barton","Baylee","Beatrice","Beau","Beaulah","Bell","Bella","Belle","Ben","Benedict","Benjamin","Bennett","Bennie","Benny","Benton","Berenice","Bernadette","Bernadine","Bernard","Bernardo","Berneice","Bernhard","Bernice","Bernie","Berniece","Bernita","Berry","Bert","Berta","Bertha","Bertram","Bertrand","Beryl","Bessie","Beth","Bethany","Bethel","Betsy","Bette","Bettie","Betty","Bettye","Beulah","Beverly","Bianka","Bill","Billie","Billy","Birdie","Blair","Blaise","Blake","Blanca","Blanche","Blaze","Bo","Bobbie","Bobby","Bonita","Bonnie","Boris","Boyd","Brad","Braden","Bradford","Bradley","Bradly","Brady","Braeden","Brain","Brandi","Brando","Brandon","Brandt","Brandy","Brandyn","Brannon","Branson","Brant","Braulio","Braxton","Brayan","Breana","Breanna","Breanne","Brenda","Brendan","Brenden","Brendon","Brenna","Brennan","Brennon","Brent","Bret","Brett","Bria","Brian","Briana","Brianne","Brice","Bridget","Bridgette","Bridie","Brielle","Brigitte","Brionna","Brisa","Britney","Brittany","Brock","Broderick","Brody","Brook","Brooke","Brooklyn","Brooks","Brown","Bruce","Bryana","Bryce","Brycen","Bryon","Buck","Bud","Buddy","Buford","Bulah","Burdette","Burley","Burnice","Buster","Cade","Caden","Caesar","Caitlyn","Cale","Caleb","Caleigh","Cali","Calista","Callie","Camden","Cameron","Camila","Camilla","Camille","Camren","Camron","Camryn","Camylle","Candace","Candelario","Candice","Candida","Candido","Cara","Carey","Carissa","Carlee","Carleton","Carley","Carli","Carlie","Carlo","Carlos","Carlotta","Carmel","Carmela","Carmella","Carmelo","Carmen","Carmine","Carol","Carolanne","Carole","Carolina","Caroline","Carolyn","Carolyne","Carrie","Carroll","Carson","Carter","Cary","Casandra","Casey","Casimer","Casimir","Casper","Cassandra","Cassandre","Cassidy","Cassie","Catalina","Caterina","Catharine","Catherine","Cathrine","Cathryn","Cathy","Cayla","Ceasar","Cecelia","Cecil","Cecile","Cecilia","Cedrick","Celestine","Celestino","Celia","Celine","Cesar","Chad","Chadd","Chadrick","Chaim","Chance","Chandler","Chanel","Chanelle","Charity","Charlene","Charles","Charley","Charlie","Charlotte","Chase","Chasity","Chauncey","Chaya","Chaz","Chelsea","Chelsey","Chelsie","Chesley","Chester","Chet","Cheyanne","Cheyenne","Chloe","Chris","Christ","Christa","Christelle","Christian","Christiana","Christina","Christine","Christop","Christophe","Christopher","Christy","Chyna","Ciara","Cicero","Cielo","Cierra","Cindy","Citlalli","Clair","Claire","Clara","Clarabelle","Clare","Clarissa","Clark","Claud","Claude","Claudia","Claudie","Claudine","Clay","Clemens","Clement","Clementina","Clementine","Clemmie","Cleo","Cleora","Cleta","Cletus","Cleve","Cleveland","Clifford","Clifton","Clint","Clinton","Clotilde","Clovis","Cloyd","Clyde","Coby","Cody","Colby","Cole","Coleman","Colin","Colleen","Collin","Colt","Colten","Colton","Columbus","Concepcion","Conner","Connie","Connor","Conor","Conrad","Constance","Constantin","Consuelo","Cooper","Cora","Coralie","Corbin","Cordelia","Cordell","Cordia","Cordie","Corene","Corine","Cornelius","Cornell","Corrine","Cortez","Cortney","Cory","Coty","Courtney","Coy","Craig","Crawford","Creola","Cristal","Cristian","Cristina","Cristobal","Cristopher","Cruz","Crystal","Crystel","Cullen","Curt","Curtis","Cydney","Cynthia","Cyril","Cyrus","D'angelo","Dagmar","Dahlia","Daija","Daisha","Daisy","Dakota","Dale","Dallas","Dallin","Dalton","Damaris","Dameon","Damian","Damien","Damion","Damon","Dan","Dana","Dandre","Dane","Dangelo","Danial","Daniela","Daniella","Danielle","Danika","Dannie","Danny","Dante","Danyka","Daphne","Daphnee","Daphney","Darby","Daren","Darian","Dariana","Darien","Dario","Darion","Darius","Darlene","Daron","Darrel","Darrell","Darren","Darrick","Darrin","Darrion","Darron","Darryl","Darwin","Daryl","Dashawn","Dasia","Dave","David","Davin","Davion","Davon","Davonte","Dawn","Dawson","Dax","Dayana","Dayna","Dayne","Dayton","Dean","Deangelo","Deanna","Deborah","Declan","Dedric","Dedrick","Dee","Deion","Deja","Dejah","Dejon","Dejuan","Delaney","Delbert","Delfina","Delia","Delilah","Dell","Della","Delmer","Delores","Delpha","Delphia","Delphine","Delta","Demarco","Demarcus","Demario","Demetris","Demetrius","Demond","Dena","Denis","Dennis","Deon","Deondre","Deontae","Deonte","Dereck","Derek","Derick","Deron","Derrick","Deshaun","Deshawn","Desiree","Desmond","Dessie","Destany","Destin","Destinee","Destiney","Destini","Destiny","Devan","Devante","Deven","Devin","Devon","Devonte","Devyn","Dewayne","Dewitt","Dexter","Diamond","Diana","Dianna","Diego","Dillan","Dillon","Dimitri","Dina","Dino","Dion","Dixie","Dock","Dolly","Dolores","Domenic","Domenica","Domenick","Domenico","Domingo","Dominic","Dominique","Don","Donald","Donato","Donavon","Donna","Donnell","Donnie","Donny","Dora","Dorcas","Dorian","Doris","Dorothea","Dorothy","Dorris","Dortha","Dorthy","Doug","Douglas","Dovie","Doyle","Drake","Drew","Duane","Dudley","Dulce","Duncan","Durward","Dustin","Dusty","Dwight","Dylan","Earl","Earlene","Earline","Earnest","Earnestine","Easter","Easton","Ebba","Ebony","Ed","Eda","Edd","Eddie","Eden","Edgar","Edgardo","Edison","Edmond","Edmund","Edna","Eduardo","Edward","Edwardo","Edwin","Edwina","Edyth","Edythe","Effie","Efrain","Efren","Eileen","Einar","Eino","Eladio","Elaina","Elbert","Elda","Eldon","Eldora","Eldred","Eldridge","Eleanora","Eleanore","Eleazar","Electa","Elena","Elenor","Elenora","Eleonore","Elfrieda","Eli","Elian","Eliane","Elias","Eliezer","Elijah","Elinor","Elinore","Elisa","Elisabeth","Elise","Eliseo","Elisha","Elissa","Eliza","Elizabeth","Ella","Ellen","Ellie","Elliot","Elliott","Ellis","Ellsworth","Elmer","Elmira","Elmo","Elmore","Elna","Elnora","Elody","Eloisa","Eloise","Elouise","Eloy","Elroy","Elsa","Else","Elsie","Elta","Elton","Elva","Elvera","Elvie","Elvis","Elwin","Elwyn","Elyse","Elyssa","Elza","Emanuel","Emelia","Emelie","Emely","Emerald","Emerson","Emery","Emie","Emil","Emile","Emilia","Emiliano","Emilie","Emilio","Emily","Emma","Emmalee","Emmanuel","Emmanuelle","Emmet","Emmett","Emmie","Emmitt","Emmy","Emory","Ena","Enid","Enoch","Enola","Enos","Enrico","Enrique","Ephraim","Era","Eriberto","Eric","Erica","Erich","Erick","Ericka","Erik","Erika","Erin","Erling","Erna","Ernest","Ernestina","Ernestine","Ernesto","Ernie","Ervin","Erwin","Eryn","Esmeralda","Esperanza","Esta","Esteban","Estefania","Estel","Estell","Estella","Estelle","Estevan","Esther","Estrella","Etha","Ethan","Ethel","Ethelyn","Ethyl","Ettie","Eudora","Eugene","Eugenia","Eula","Eulah","Eulalia","Euna","Eunice","Eusebio","Eva","Evalyn","Evan","Evangeline","Evans","Eve","Eveline","Evelyn","Everardo","Everett","Everette","Evert","Evie","Ewald","Ewell","Ezekiel","Ezequiel","Ezra","Fabian","Fabiola","Fae","Fannie","Fanny","Fatima","Faustino","Fausto","Favian","Fay","Faye","Federico","Felicia","Felicita","Felicity","Felipa","Felipe","Felix","Felton","Fermin","Fern","Fernando","Ferne","Fidel","Filiberto","Filomena","Finn","Fiona","Flavie","Flavio","Fleta","Fletcher","Flo","Florence","Florencio","Florian","Florida","Florine","Flossie","Floy","Floyd","Ford","Forest","Forrest","Foster","Frances","Francesca","Francesco","Francis","Francisca","Francisco","Franco","Frank","Frankie","Franz","Fred","Freda","Freddie","Freddy","Frederic","Frederick","Frederik","Frederique","Fredrick","Fredy","Freeda","Freeman","Freida","Frida","Frieda","Friedrich","Fritz","Furman","Gabe","Gabriel","Gabriella","Gabrielle","Gaetano","Gage","Gail","Gardner","Garett","Garfield","Garland","Garnet","Garnett","Garret","Garrett","Garrick","Garrison","Garry","Garth","Gaston","Gavin","Gayle","Gene","General","Genesis","Genevieve","Gennaro","Genoveva","Geo","Geoffrey","George","Georgette","Georgiana","Georgianna","Geovanni","Geovanny","Geovany","Gerald","Geraldine","Gerard","Gerardo","Gerda","Gerhard","Germaine","German","Gerry","Gerson","Gertrude","Gia","Gianni","Gideon","Gilbert","Gilberto","Gilda","Giles","Gillian","Gina","Gino","Giovani","Giovanna","Giovanni","Giovanny","Gisselle","Giuseppe","Gladyce","Gladys","Glen","Glenda","Glenna","Glennie","Gloria","Godfrey","Golda","Golden","Gonzalo","Gordon","Grace","Gracie","Graciela","Grady","Graham","Grant","Granville","Grayce","Grayson","Green","Greg","Gregg","Gregoria","Gregorio","Gregory","Greta","Gretchen","Greyson","Griffin","Grover","Guadalupe","Gudrun","Guido","Guillermo","Guiseppe","Gunnar","Gunner","Gus","Gussie","Gust","Gustave","Guy","Gwen","Gwendolyn","Hadley","Hailee","Hailey","Hailie","Hal","Haleigh","Haley","Halie","Halle","Hallie","Hank","Hanna","Hannah","Hans","Hardy","Harley","Harmon","Harmony","Harold","Harrison","Harry","Harvey","Haskell","Hassan","Hassie","Hattie","Haven","Hayden","Haylee","Hayley","Haylie","Hazel","Hazle","Heath","Heather","Heaven","Heber","Hector","Heidi","Helen","Helena","Helene","Helga","Hellen","Helmer","Heloise","Henderson","Henri","Henriette","Henry","Herbert","Herman","Hermann","Hermina","Herminia","Herminio","Hershel","Herta","Hertha","Hester","Hettie","Hilario","Hilbert","Hilda","Hildegard","Hillard","Hillary","Hilma","Hilton","Hipolito","Hiram","Hobart","Holden","Hollie","Hollis","Holly","Hope","Horace","Horacio","Hortense","Hosea","Houston","Howard","Howell","Hoyt","Hubert","Hudson","Hugh","Hulda","Humberto","Hunter","Hyman","Ian","Ibrahim","Icie","Ida","Idell","Idella","Ignacio","Ignatius","Ike","Ila","Ilene","Iliana","Ima","Imani","Imelda","Immanuel","Imogene","Ines","Irma","Irving","Irwin","Isaac","Isabel","Isabell","Isabella","Isabelle","Isac","Isadore","Isai","Isaiah","Isaias","Isidro","Ismael","Isobel","Isom","Israel","Issac","Itzel","Iva","Ivah","Ivory","Ivy","Izabella","Izaiah","Jabari","Jace","Jacey","Jacinthe","Jacinto","Jack","Jackeline","Jackie","Jacklyn","Jackson","Jacky","Jaclyn","Jacquelyn","Jacques","Jacynthe","Jada","Jade","Jaden","Jadon","Jadyn","Jaeden","Jaida","Jaiden","Jailyn","Jaime","Jairo","Jakayla","Jake","Jakob","Jaleel","Jalen","Jalon","Jalyn","Jamaal","Jamal","Jamar","Jamarcus","Jamel","Jameson","Jamey","Jamie","Jamil","Jamir","Jamison","Jammie","Jan","Jana","Janae","Jane","Janelle","Janessa","Janet","Janice","Janick","Janie","Janis","Janiya","Jannie","Jany","Jaquan","Jaquelin","Jaqueline","Jared","Jaren","Jarod","Jaron","Jarred","Jarrell","Jarret","Jarrett","Jarrod","Jarvis","Jasen","Jasmin","Jason","Jasper","Jaunita","Javier","Javon","Javonte","Jay","Jayce","Jaycee","Jayda","Jayde","Jayden","Jaydon","Jaylan","Jaylen","Jaylin","Jaylon","Jayme","Jayne","Jayson","Jazlyn","Jazmin","Jazmyn","Jazmyne","Jean","Jeanette","Jeanie","Jeanne","Jed","Jedediah","Jedidiah","Jeff","Jefferey","Jeffery","Jeffrey","Jeffry","Jena","Jenifer","Jennie","Jennifer","Jennings","Jennyfer","Jensen","Jerad","Jerald","Jeramie","Jeramy","Jerel","Jeremie","Jeremy","Jermain","Jermaine","Jermey","Jerod","Jerome","Jeromy","Jerrell","Jerrod","Jerrold","Jerry","Jess","Jesse","Jessica","Jessie","Jessika","Jessy","Jessyca","Jesus","Jett","Jettie","Jevon","Jewel","Jewell","Jillian","Jimmie","Jimmy","Jo","Joan","Joana","Joanie","Joanne","Joannie","Joanny","Joany","Joaquin","Jocelyn","Jodie","Jody","Joe","Joel","Joelle","Joesph","Joey","Johan","Johann","Johanna","Johathan","John","Johnathan","Johnathon","Johnnie","Johnny","Johnpaul","Johnson","Jolie","Jon","Jonas","Jonatan","Jonathan","Jonathon","Jordan","Jordane","Jordi","Jordon","Jordy","Jordyn","Jorge","Jose","Josefa","Josefina","Joseph","Josephine","Josh","Joshua","Joshuah","Josiah","Josiane","Josianne","Josie","Josue","Jovan","Jovani","Jovanny","Jovany","Joy","Joyce","Juana","Juanita","Judah","Judd","Jude","Judge","Judson","Judy","Jules","Julia","Julian","Juliana","Julianne","Julie","Julien","Juliet","Julio","Julius","June","Junior","Junius","Justen","Justice","Justina","Justine","Juston","Justus","Justyn","Juvenal","Juwan","Kacey","Kaci","Kacie","Kade","Kaden","Kadin","Kaela","Kaelyn","Kaia","Kailee","Kailey","Kailyn","Kaitlin","Kaitlyn","Kale","Kaleb","Kaleigh","Kaley","Kali","Kallie","Kameron","Kamille","Kamren","Kamron","Kamryn","Kane","Kara","Kareem","Karelle","Karen","Kari","Kariane","Karianne","Karina","Karine","Karl","Karlee","Karley","Karli","Karlie","Karolann","Karson","Kasandra","Kasey","Kassandra","Katarina","Katelin","Katelyn","Katelynn","Katharina","Katherine","Katheryn","Kathleen","Kathlyn","Kathryn","Kathryne","Katlyn","Katlynn","Katrina","Katrine","Kattie","Kavon","Kay","Kaya","Kaycee","Kayden","Kayla","Kaylah","Kaylee","Kayleigh","Kayley","Kayli","Kaylie","Kaylin","Keagan","Keanu","Keara","Keaton","Keegan","Keeley","Keely","Keenan","Keira","Keith","Kellen","Kelley","Kelli","Kellie","Kelly","Kelsi","Kelsie","Kelton","Kelvin","Ken","Kendall","Kendra","Kendrick","Kenna","Kennedi","Kennedy","Kenneth","Kennith","Kenny","Kenton","Kenya","Kenyatta","Kenyon","Keon","Keshaun","Keshawn","Keven","Kevin","Kevon","Keyon","Keyshawn","Khalid","Khalil","Kian","Kiana","Kianna","Kiara","Kiarra","Kiel","Kiera","Kieran","Kiley","Kim","Kimberly","King","Kip","Kira","Kirk","Kirsten","Kirstin","Kitty","Kobe","Koby","Kody","Kolby","Kole","Korbin","Korey","Kory","Kraig","Kris","Krista","Kristian","Kristin","Kristina","Kristofer","Kristoffer","Kristopher","Kristy","Krystal","Krystel","Krystina","Kurt","Kurtis","Kyla","Kyle","Kylee","Kyleigh","Kyler","Kylie","Kyra","Lacey","Lacy","Ladarius","Lafayette","Laila","Laisha","Lamar","Lambert","Lamont","Lance","Landen","Lane","Laney","Larissa","Laron","Larry","Larue","Laura","Laurel","Lauren","Laurence","Lauretta","Lauriane","Laurianne","Laurie","Laurine","Laury","Lauryn","Lavada","Lavern","Laverna","Laverne","Lavina","Lavinia","Lavon","Lavonne","Lawrence","Lawson","Layla","Layne","Lazaro","Lea","Leann","Leanna","Leanne","Leatha","Leda","Lee","Leif","Leila","Leilani","Lela","Lelah","Leland","Lelia","Lempi","Lemuel","Lenna","Lennie","Lenny","Lenora","Lenore","Leo","Leola","Leon","Leonard","Leonardo","Leone","Leonel","Leonie","Leonor","Leonora","Leopold","Leopoldo","Leora","Lera","Lesley","Leslie","Lesly","Lessie","Lester","Leta","Letha","Letitia","Levi","Lew","Lewis","Lexi","Lexie","Lexus","Lia","Liam","Liana","Libbie","Libby","Lila","Lilian","Liliana","Liliane","Lilla","Lillian","Lilliana","Lillie","Lilly","Lily","Lilyan","Lina","Lincoln","Linda","Lindsay","Lindsey","Linnea","Linnie","Linwood","Lionel","Lisa","Lisandro","Lisette","Litzy","Liza","Lizeth","Lizzie","Llewellyn","Lloyd","Logan","Lois","Lola","Lolita","Loma","Lon","London","Lonie","Lonnie","Lonny","Lonzo","Lora","Loraine","Loren","Lorena","Lorenz","Lorenza","Lorenzo","Lori","Lorine","Lorna","Lottie","Lou","Louie","Louisa","Lourdes","Louvenia","Lowell","Loy","Loyal","Loyce","Lucas","Luciano","Lucie","Lucienne","Lucile","Lucinda","Lucio","Lucious","Lucius","Lucy","Ludie","Ludwig","Lue","Luella","Luigi","Luis","Luisa","Lukas","Lula","Lulu","Luna","Lupe","Lura","Lurline","Luther","Luz","Lyda","Lydia","Lyla","Lynn","Lyric","Lysanne","Mabel","Mabelle","Mable","Mac","Macey","Maci","Macie","Mack","Mackenzie","Macy","Madaline","Madalyn","Maddison","Madeline","Madelyn","Madelynn","Madge","Madie","Madilyn","Madisen","Madison","Madisyn","Madonna","Madyson","Mae","Maegan","Maeve","Mafalda","Magali","Magdalen","Magdalena","Maggie","Magnolia","Magnus","Maia","Maida","Maiya","Major","Makayla","Makenna","Makenzie","Malachi","Malcolm","Malika","Malinda","Mallie","Mallory","Malvina","Mandy","Manley","Manuel","Manuela","Mara","Marc","Marcel","Marcelina","Marcelino","Marcella","Marcelle","Marcellus","Marcelo","Marcia","Marco","Marcos","Marcus","Margaret","Margarete","Margarett","Margaretta","Margarette","Margarita","Marge","Margie","Margot","Margret","Marguerite","Maria","Mariah","Mariam","Marian","Mariana","Mariane","Marianna","Marianne","Mariano","Maribel","Marie","Mariela","Marielle","Marietta","Marilie","Marilou","Marilyne","Marina","Mario","Marion","Marisa","Marisol","Maritza","Marjolaine","Marjorie","Marjory","Mark","Markus","Marlee","Marlen","Marlene","Marley","Marlin","Marlon","Marques","Marquis","Marquise","Marshall","Marta","Martin","Martina","Martine","Marty","Marvin","Mary","Maryam","Maryjane","Maryse","Mason","Mateo","Mathew","Mathias","Mathilde","Matilda","Matilde","Matt","Matteo","Mattie","Maud","Maude","Maudie","Maureen","Maurice","Mauricio","Maurine","Maverick","Mavis","Max","Maxie","Maxime","Maximilian","Maximillia","Maximillian","Maximo","Maximus","Maxine","Maxwell","May","Maya","Maybell","Maybelle","Maye","Maymie","Maynard","Mayra","Mazie","Mckayla","Mckenna","Mckenzie","Meagan","Meaghan","Meda","Megane","Meggie","Meghan","Mekhi","Melany","Melba","Melisa","Melissa","Mellie","Melody","Melvin","Melvina","Melyna","Melyssa","Mercedes","Meredith","Merl","Merle","Merlin","Merritt","Mertie","Mervin","Meta","Mia","Micaela","Micah","Michael","Michaela","Michale","Micheal","Michel","Michele","Michelle","Miguel","Mikayla","Mike","Mikel","Milan","Miles","Milford","Miller","Millie","Milo","Milton","Mina","Minerva","Minnie","Miracle","Mireille","Mireya","Misael","Missouri","Misty","Mitchel","Mitchell","Mittie","Modesta","Modesto","Mohamed","Mohammad","Mohammed","Moises","Mollie","Molly","Mona","Monica","Monique","Monroe","Monserrat","Monserrate","Montana","Monte","Monty","Morgan","Moriah","Morris","Mortimer","Morton","Mose","Moses","Moshe","Mossie","Mozell","Mozelle","Muhammad","Muriel","Murl","Murphy","Murray","Mustafa","Mya","Myah","Mylene","Myles","Myra","Myriam","Myrl","Myrna","Myron","Myrtice","Myrtie","Myrtis","Myrtle","Nadia","Nakia","Name","Nannie","Naomi","Naomie","Napoleon","Narciso","Nash","Nasir","Nat","Natalia","Natalie","Natasha","Nathan","Nathanael","Nathanial","Nathaniel","Nathen","Nayeli","Neal","Ned","Nedra","Neha","Neil","Nelda","Nella","Nelle","Nellie","Nels","Nelson","Neoma","Nestor","Nettie","Neva","Newell","Newton","Nia","Nicholas","Nicholaus","Nichole","Nick","Nicklaus","Nickolas","Nico","Nicola","Nicolas","Nicole","Nicolette","Nigel","Nikita","Nikki","Nikko","Niko","Nikolas","Nils","Nina","Noah","Noble","Noe","Noel","Noelia","Noemi","Noemie","Noemy","Nola","Nolan","Nona","Nora","Norbert","Norberto","Norene","Norma","Norris","Norval","Norwood","Nova","Novella","Nya","Nyah","Nyasia","Obie","Oceane","Ocie","Octavia","Oda","Odell","Odessa","Odie","Ofelia","Okey","Ola","Olaf","Ole","Olen","Oleta","Olga","Olin","Oliver","Ollie","Oma","Omari","Omer","Ona","Onie","Opal","Ophelia","Ora","Oral","Oran","Oren","Orie","Orin","Orion","Orland","Orlando","Orlo","Orpha","Orrin","Orval","Orville","Osbaldo","Osborne","Oscar","Osvaldo","Oswald","Oswaldo","Otha","Otho","Otilia","Otis","Ottilie","Ottis","Otto","Ova","Owen","Ozella","Pablo","Paige","Palma","Pamela","Pansy","Paolo","Paris","Parker","Pascale","Pasquale","Pat","Patience","Patricia","Patrick","Patsy","Pattie","Paul","Paula","Pauline","Paxton","Payton","Pearl","Pearlie","Pearline","Pedro","Peggie","Penelope","Percival","Percy","Perry","Pete","Peter","Petra","Peyton","Philip","Phoebe","Phyllis","Pierce","Pierre","Pietro","Pink","Pinkie","Piper","Polly","Porter","Precious","Presley","Preston","Price","Prince","Princess","Priscilla","Providenci","Prudence","Queen","Queenie","Quentin","Quincy","Quinn","Quinten","Quinton","Rachael","Rachel","Rachelle","Rae","Raegan","Rafael","Rafaela","Raheem","Rahsaan","Rahul","Raina","Raleigh","Ralph","Ramiro","Ramon","Ramona","Randal","Randall","Randi","Randy","Ransom","Raoul","Raphael","Raphaelle","Raquel","Rashad","Rashawn","Rasheed","Raul","Raven","Ray","Raymond","Raymundo","Reagan","Reanna","Reba","Rebeca","Rebecca","Rebeka","Rebekah","Reece","Reed","Reese","Regan","Reggie","Reginald","Reid","Reilly","Reina","Reinhold","Remington","Rene","Renee","Ressie","Reta","Retha","Retta","Reuben","Reva","Rex","Rey","Reyes","Reymundo","Reyna","Reynold","Rhea","Rhett","Rhianna","Rhiannon","Rhoda","Ricardo","Richard","Richie","Richmond","Rick","Rickey","Rickie","Ricky","Rico","Rigoberto","Riley","Rita","River","Robb","Robbie","Robert","Roberta","Roberto","Robin","Robyn","Rocio","Rocky","Rod","Roderick","Rodger","Rodolfo","Rodrick","Rodrigo","Roel","Rogelio","Roger","Rogers","Rolando","Rollin","Roma","Romaine","Roman","Ron","Ronaldo","Ronny","Roosevelt","Rory","Rosa","Rosalee","Rosalia","Rosalind","Rosalinda","Rosalyn","Rosamond","Rosanna","Rosario","Roscoe","Rose","Rosella","Roselyn","Rosemarie","Rosemary","Rosendo","Rosetta","Rosie","Rosina","Roslyn","Ross","Rossie","Rowan","Rowena","Rowland","Roxane","Roxanne","Roy","Royal","Royce","Rozella","Ruben","Rubie","Ruby","Rubye","Rudolph","Rudy","Rupert","Russ","Russel","Russell","Rusty","Ruth","Ruthe","Ruthie","Ryan","Ryann","Ryder","Rylan","Rylee","Ryleigh","Ryley","Sabina","Sabrina","Sabryna","Sadie","Sadye","Sage","Saige","Sallie","Sally","Salma","Salvador","Salvatore","Sam","Samanta","Samantha","Samara","Samir","Sammie","Sammy","Samson","Sandra","Sandrine","Sandy","Sanford","Santa","Santiago","Santina","Santino","Santos","Sarah","Sarai","Sarina","Sasha","Saul","Savanah","Savanna","Savannah","Savion","Scarlett","Schuyler","Scot","Scottie","Scotty","Seamus","Sean","Sebastian","Sedrick","Selena","Selina","Selmer","Serena","Serenity","Seth","Shad","Shaina","Shakira","Shana","Shane","Shanel","Shanelle","Shania","Shanie","Shaniya","Shanna","Shannon","Shanny","Shanon","Shany","Sharon","Shaun","Shawn","Shawna","Shaylee","Shayna","Shayne","Shea","Sheila","Sheldon","Shemar","Sheridan","Sherman","Sherwood","Shirley","Shyann","Shyanne","Sibyl","Sid","Sidney","Sienna","Sierra","Sigmund","Sigrid","Sigurd","Silas","Sim","Simeon","Simone","Sincere","Sister","Skye","Skyla","Skylar","Sofia","Soledad","Solon","Sonia","Sonny","Sonya","Sophia","Sophie","Spencer","Stacey","Stacy","Stan","Stanford","Stanley","Stanton","Stefan","Stefanie","Stella","Stephan","Stephania","Stephanie","Stephany","Stephen","Stephon","Sterling","Steve","Stevie","Stewart","Stone","Stuart","Summer","Sunny","Susan","Susana","Susanna","Susie","Suzanne","Sven","Syble","Sydnee","Sydney","Sydni","Sydnie","Sylvan","Sylvester","Sylvia","Tabitha","Tad","Talia","Talon","Tamara","Tamia","Tania","Tanner","Tanya","Tara","Taryn","Tate","Tatum","Tatyana","Taurean","Tavares","Taya","Taylor","Teagan","Ted","Telly","Terence","Teresa","Terrance","Terrell","Terrence","Terrill","Terry","Tess","Tessie","Tevin","Thad","Thaddeus","Thalia","Thea","Thelma","Theo","Theodora","Theodore","Theresa","Therese","Theresia","Theron","Thomas","Thora","Thurman","Tia","Tiana","Tianna","Tiara","Tierra","Tiffany","Tillman","Timmothy","Timmy","Timothy","Tina","Tito","Titus","Tobin","Toby","Tod","Tom","Tomas","Tomasa","Tommie","Toney","Toni","Tony","Torey","Torrance","Torrey","Toy","Trace","Tracey","Tracy","Travis","Travon","Tre","Tremaine","Tremayne","Trent","Trenton","Tressa","Tressie","Treva","Trever","Trevion","Trevor","Trey","Trinity","Trisha","Tristian","Tristin","Triston","Troy","Trudie","Trycia","Trystan","Turner","Twila","Tyler","Tyra","Tyree","Tyreek","Tyrel","Tyrell","Tyrese","Tyrique","Tyshawn","Tyson","Ubaldo","Ulices","Ulises","Una","Unique","Urban","Uriah","Uriel","Ursula","Vada","Valentin","Valentina","Valentine","Valerie","Vallie","Van","Vance","Vanessa","Vaughn","Veda","Velda","Vella","Velma","Velva","Vena","Verda","Verdie","Vergie","Verla","Verlie","Vern","Verna","Verner","Vernice","Vernie","Vernon","Verona","Veronica","Vesta","Vicenta","Vicente","Vickie","Vicky","Victor","Victoria","Vida","Vidal","Vilma","Vince","Vincent","Vincenza","Vincenzo","Vinnie","Viola","Violet","Violette","Virgie","Virgil","Virginia","Virginie","Vita","Vito","Viva","Vivian","Viviane","Vivianne","Vivien","Vivienne","Vladimir","Wade","Waino","Waldo","Walker","Wallace","Walter","Walton","Wanda","Ward","Warren","Watson","Wava","Waylon","Wayne","Webster","Weldon","Wellington","Wendell","Wendy","Werner","Westley","Weston","Whitney","Wilber","Wilbert","Wilburn","Wiley","Wilford","Wilfred","Wilfredo","Wilfrid","Wilhelm","Wilhelmine","Will","Willa","Willard","William","Willie","Willis","Willow","Willy","Wilma","Wilmer","Wilson","Wilton","Winfield","Winifred","Winnifred","Winona","Winston","Woodrow","Wyatt","Wyman","Xander","Xavier","Xzavier","Yadira","Yasmeen","Yasmin","Yasmine","Yazmin","Yesenia","Yessenia","Yolanda","Yoshiko","Yvette","Yvonne","Zachariah","Zachary","Zachery","Zack","Zackary","Zackery","Zakary","Zander","Zane","Zaria","Zechariah","Zelda","Zella","Zelma","Zena","Zetta","Zion","Zita","Zoe","Zoey","Zoie","Zoila","Zola","Zora","Zula"],female:["Ada","Adrienne","Agnes","Alberta","Alexandra","Alexis","Alice","Alicia","Alison","Allison","Alma","Alyssa","Amanda","Amber","Amelia","Amy","Ana","Andrea","Angel","Angela","Angelica","Angelina","Angie","Anita","Ann","Anna","Anne","Annette","Annie","Antoinette","Antonia","April","Arlene","Ashley","Audrey","Barbara","Beatrice","Becky","Belinda","Bernadette","Bernice","Bertha","Bessie","Beth","Bethany","Betsy","Betty","Beulah","Beverly","Billie","Blanca","Blanche","Bobbie","Bonnie","Brandi","Brandy","Brenda","Bridget","Brittany","Brooke","Camille","Candace","Candice","Carla","Carmen","Carol","Carole","Caroline","Carolyn","Carrie","Casey","Cassandra","Catherine","Cathy","Cecelia","Cecilia","Celia","Charlene","Charlotte","Chelsea","Cheryl","Christie","Christina","Christine","Christy","Cindy","Claire","Clara","Claudia","Colleen","Connie","Constance","Cora","Courtney","Cristina","Crystal","Cynthia","Daisy","Dana","Danielle","Darla","Darlene","Dawn","Deanna","Debbie","Deborah","Debra","Delia","Della","Delores","Denise","Desiree","Diana","Diane","Dianna","Dianne","Dixie","Dolores","Donna","Dora","Doreen","Doris","Dorothy","Ebony","Edith","Edna","Eileen","Elaine","Eleanor","Elena","Elisa","Elizabeth","Ella","Ellen","Eloise","Elsa","Elsie","Elvira","Emily","Emma","Erica","Erika","Erin","Erma","Ernestine","Essie","Estelle","Esther","Ethel","Eula","Eunice","Eva","Evelyn","Faith","Fannie","Faye","Felicia","Flora","Florence","Frances","Francis","Freda","Gail","Gayle","Geneva","Genevieve","Georgia","Geraldine","Gertrude","Gina","Ginger","Gladys","Glenda","Gloria","Grace","Gretchen","Guadalupe","Gwen","Gwendolyn","Hannah","Harriet","Hattie","Hazel","Heather","Heidi","Helen","Henrietta","Hilda","Holly","Hope","Ida","Inez","Irene","Iris","Irma","Isabel","Jackie","Jacqueline","Jacquelyn","Jaime","Jamie","Jan","Jana","Jane","Janet","Janice","Janie","Janis","Jasmine","Jean","Jeanette","Jeanne","Jeannette","Jeannie","Jenna","Jennie","Jennifer","Jenny","Jessica","Jessie","Jill","Jo","Joan","Joann","Joanna","Joanne","Jodi","Jody","Johanna","Johnnie","Josefina","Josephine","Joy","Joyce","Juana","Juanita","Judith","Judy","Julia","Julie","June","Kara","Karen","Kari","Karla","Kate","Katherine","Kathleen","Kathryn","Kathy","Katie","Katrina","Kay","Kayla","Kelley","Kelli","Kellie","Kelly","Kendra","Kerry","Kim","Kimberly","Krista","Kristen","Kristi","Kristie","Kristin","Kristina","Kristine","Kristy","Krystal","Lana","Latoya","Laura","Lauren","Laurie","Laverne","Leah","Lee","Leigh","Lela","Lena","Leona","Leslie","Leticia","Lila","Lillian","Lillie","Linda","Lindsay","Lindsey","Lisa","Lois","Lola","Lora","Lorena","Lorene","Loretta","Lori","Lorraine","Louise","Lucia","Lucille","Lucy","Lula","Luz","Lydia","Lynda","Lynette","Lynn","Lynne","Mabel","Mable","Madeline","Mae","Maggie","Mamie","Mandy","Marcella","Marcia","Margaret","Margarita","Margie","Marguerite","Maria","Marian","Marianne","Marie","Marilyn","Marion","Marjorie","Marlene","Marsha","Marta","Martha","Mary","Maryann","Mattie","Maureen","Maxine","May","Megan","Meghan","Melanie","Melba","Melinda","Melissa","Melody","Mercedes","Meredith","Michele","Michelle","Mildred","Mindy","Minnie","Miranda","Miriam","Misty","Molly","Mona","Monica","Monique","Muriel","Myra","Myrtle","Nadine","Nancy","Naomi","Natalie","Natasha","Nellie","Nettie","Nichole","Nicole","Nina","Nora","Norma","Olga","Olive","Olivia","Ollie","Opal","Ora","Pam","Pamela","Pat","Patricia","Patsy","Patti","Patty","Paula","Paulette","Pauline","Pearl","Peggy","Penny","Phyllis","Priscilla","Rachael","Rachel","Ramona","Raquel","Rebecca","Regina","Renee","Rhonda","Rita","Roberta","Robin","Robyn","Rochelle","Rosa","Rosalie","Rose","Rosemarie","Rosemary","Rosie","Roxanne","Ruby","Ruth","Sabrina","Sadie","Sally","Samantha","Sandra","Sandy","Sara","Sarah","Shannon","Shari","Sharon","Shawna","Sheila","Shelia","Shelley","Shelly","Sheri","Sherri","Sherry","Sheryl","Shirley","Silvia","Sonia","Sonja","Sonya","Sophia","Sophie","Stacey","Stacy","Stella","Stephanie","Sue","Susan","Susie","Suzanne","Sylvia","Tabitha","Tamara","Tami","Tammy","Tanya","Tara","Tasha","Teresa","Teri","Terri","Terry","Thelma","Theresa","Tiffany","Tina","Toni","Tonya","Tracey","Traci","Tracy","Tricia","Valerie","Vanessa","Velma","Vera","Verna","Veronica","Vicki","Vickie","Vicky","Victoria","Viola","Violet","Virginia","Vivian","Wanda","Wendy","Whitney","Willie","Wilma","Winifred","Yolanda","Yvette","Yvonne"],male:["Aaron","Abel","Abraham","Adam","Adrian","Al","Alan","Albert","Alberto","Alejandro","Alex","Alexander","Alfonso","Alfred","Alfredo","Allan","Allen","Alonzo","Alton","Alvin","Amos","Andre","Andres","Andrew","Andy","Angel","Angelo","Anthony","Antonio","Archie","Armando","Arnold","Arthur","Arturo","Aubrey","Austin","Barry","Ben","Benjamin","Bennie","Benny","Bernard","Bert","Bill","Billy","Blake","Bob","Bobby","Boyd","Brad","Bradford","Bradley","Brandon","Brendan","Brent","Brett","Brian","Bruce","Bryan","Bryant","Byron","Caleb","Calvin","Cameron","Carl","Carlos","Carlton","Carroll","Cary","Casey","Cecil","Cedric","Cesar","Chad","Charles","Charlie","Chester","Chris","Christian","Christopher","Clarence","Clark","Claude","Clay","Clayton","Clifford","Clifton","Clint","Clinton","Clyde","Cody","Colin","Conrad","Corey","Cornelius","Cory","Courtney","Craig","Curtis","Dale","Dallas","Damon","Dan","Dana","Daniel","Danny","Darin","Darnell","Darrel","Darrell","Darren","Darrin","Darryl","Daryl","Dave","David","Dean","Delbert","Dennis","Derek","Derrick","Devin","Dewey","Dexter","Domingo","Dominic","Dominick","Don","Donald","Donnie","Doug","Douglas","Doyle","Drew","Duane","Dustin","Dwayne","Dwight","Earl","Earnest","Ed","Eddie","Edgar","Edmond","Edmund","Eduardo","Edward","Edwin","Elbert","Elias","Elijah","Ellis","Elmer","Emanuel","Emilio","Emmett","Enrique","Eric","Erick","Erik","Ernest","Ernesto","Ervin","Eugene","Evan","Everett","Felipe","Felix","Fernando","Floyd","Forrest","Francis","Francisco","Frank","Frankie","Franklin","Fred","Freddie","Frederick","Fredrick","Gabriel","Garrett","Garry","Gary","Gene","Geoffrey","George","Gerald","Gerard","Gerardo","Gilbert","Gilberto","Glen","Glenn","Gordon","Grady","Grant","Greg","Gregg","Gregory","Guadalupe","Guillermo","Gustavo","Guy","Harold","Harry","Harvey","Hector","Henry","Herbert","Herman","Homer","Horace","Howard","Hubert","Hugh","Hugo","Ian","Ignacio","Ira","Irvin","Irving","Isaac","Ismael","Israel","Ivan","Jack","Jackie","Jacob","Jaime","Jake","James","Jamie","Jan","Jared","Jason","Javier","Jay","Jean","Jeff","Jeffery","Jeffrey","Jerald","Jeremiah","Jeremy","Jermaine","Jerome","Jerry","Jesse","Jessie","Jesus","Jim","Jimmie","Jimmy","Jody","Joe","Joel","Joey","John","Johnathan","Johnnie","Johnny","Jon","Jonathan","Jonathon","Jordan","Jorge","Jose","Joseph","Josh","Joshua","Juan","Julian","Julio","Julius","Justin","Karl","Keith","Kelly","Kelvin","Ken","Kenneth","Kenny","Kent","Kerry","Kevin","Kim","Kirk","Kristopher","Kurt","Kyle","Lamar","Lance","Larry","Laurence","Lawrence","Lee","Leland","Leo","Leon","Leonard","Leroy","Leslie","Lester","Levi","Lewis","Lionel","Lloyd","Lonnie","Loren","Lorenzo","Louis","Lowell","Lucas","Luis","Luke","Luther","Lyle","Lynn","Mack","Malcolm","Manuel","Marc","Marco","Marcos","Marcus","Mario","Marion","Mark","Marlon","Marshall","Martin","Marty","Marvin","Mathew","Matt","Matthew","Maurice","Max","Melvin","Merle","Michael","Micheal","Miguel","Mike","Milton","Mitchell","Morris","Moses","Myron","Nathan","Nathaniel","Neal","Neil","Nelson","Nicholas","Nick","Nicolas","Noah","Noel","Norman","Oliver","Omar","Orlando","Orville","Oscar","Otis","Owen","Pablo","Pat","Patrick","Paul","Pedro","Percy","Perry","Pete","Peter","Phil","Philip","Phillip","Preston","Rafael","Ralph","Ramiro","Ramon","Randal","Randall","Randolph","Randy","Raul","Ray","Raymond","Reginald","Rene","Rex","Ricardo","Richard","Rick","Rickey","Ricky","Robert","Roberto","Robin","Roderick","Rodney","Rodolfo","Rogelio","Roger","Roland","Rolando","Roman","Ron","Ronald","Ronnie","Roosevelt","Ross","Roy","Ruben","Rudolph","Rudy","Rufus","Russell","Ryan","Salvador","Salvatore","Sam","Sammy","Samuel","Santiago","Santos","Saul","Scott","Sean","Sergio","Seth","Shane","Shannon","Shaun","Shawn","Sheldon","Sherman","Sidney","Simon","Spencer","Stanley","Stephen","Steve","Steven","Stewart","Stuart","Sylvester","Taylor","Ted","Terence","Terrance","Terrell","Terrence","Terry","Theodore","Thomas","Tim","Timmy","Timothy","Toby","Todd","Tom","Tomas","Tommie","Tommy","Tony","Tracy","Travis","Trevor","Troy","Tyler","Tyrone","Van","Vernon","Victor","Vincent","Virgil","Wade","Wallace","Walter","Warren","Wayne","Wendell","Wesley","Wilbert","Wilbur","Wilfred","Willard","William","Willie","Willis","Wilson","Winston","Wm","Woodrow","Zachary"]},ua=["Agender","Androgyne","Androgynous","Bigender","Cis female","Cis male","Cis man","Cis woman","Cis","Cisgender female","Cisgender male","Cisgender man","Cisgender woman","Cisgender","Demi-boy","Demi-girl","Demi-man","Demi-woman","Demiflux","Demigender","F2M","FTM","Female to male trans man","Female to male transgender man","Female to male transsexual man","Female to male","Gender fluid","Gender neutral","Gender nonconforming","Gender questioning","Gender variant","Genderflux","Genderqueer","Hermaphrodite","Intersex man","Intersex person","Intersex woman","Intersex","M2F","MTF","Male to female trans woman","Male to female transgender woman","Male to female transsexual woman","Male to female","Man","Multigender","Neither","Neutrois","Non-binary","Omnigender","Other","Pangender","Polygender","T* man","T* woman","Trans female","Trans male","Trans man","Trans person","Trans woman","Trans","Transsexual female","Transsexual male","Transsexual man","Transsexual person","Transsexual woman","Transsexual","Transgender female","Transgender person","Transmasculine","Trigender","Two* person","Two-spirit person","Two-spirit","Woman","Xenogender"],ca=["Solutions","Program","Brand","Security","Research","Marketing","Directives","Implementation","Integration","Functionality","Response","Paradigm","Tactics","Identity","Markets","Group","Division","Applications","Optimization","Operations","Infrastructure","Intranet","Communications","Web","Branding","Quality","Assurance","Mobility","Accounts","Data","Creative","Configuration","Accountability","Interactions","Factors","Usability","Metrics"],ma=["Lead","Senior","Direct","Corporate","Dynamic","Future","Product","National","Regional","District","Central","Global","Customer","Investor","International","Legacy","Forward","Internal","Human","Chief","Principal"],ha=["{{person.jobDescriptor}} {{person.jobArea}} {{person.jobType}}"],ya=["Supervisor","Associate","Executive","Liaison","Officer","Manager","Engineer","Specialist","Director","Coordinator","Administrator","Architect","Analyst","Designer","Planner","Orchestrator","Technician","Developer","Producer","Consultant","Assistant","Facilitator","Agent","Representative","Strategist"],pa={generic:["Abbott","Abernathy","Abshire","Adams","Altenwerth","Anderson","Ankunding","Armstrong","Auer","Aufderhar","Bahringer","Bailey","Balistreri","Barrows","Bartell","Bartoletti","Barton","Bashirian","Batz","Bauch","Baumbach","Bayer","Beahan","Beatty","Bechtelar","Becker","Bednar","Beer","Beier","Berge","Bergnaum","Bergstrom","Bernhard","Bernier","Bins","Blanda","Blick","Block","Bode","Boehm","Bogan","Bogisich","Borer","Bosco","Botsford","Boyer","Boyle","Bradtke","Brakus","Braun","Breitenberg","Brekke","Brown","Bruen","Buckridge","Carroll","Carter","Cartwright","Casper","Cassin","Champlin","Christiansen","Cole","Collier","Collins","Conn","Connelly","Conroy","Considine","Corkery","Cormier","Corwin","Cremin","Crist","Crona","Cronin","Crooks","Cruickshank","Cummerata","Cummings","D'Amore","Dach","Daniel","Dare","Daugherty","Davis","Deckow","Denesik","Dibbert","Dickens","Dicki","Dickinson","Dietrich","Donnelly","Dooley","Douglas","Doyle","DuBuque","Durgan","Ebert","Effertz","Emard","Emmerich","Erdman","Ernser","Fadel","Fahey","Farrell","Fay","Feeney","Feest","Feil","Ferry","Fisher","Flatley","Frami","Franecki","Franey","Friesen","Fritsch","Funk","Gerhold","Gerlach","Gibson","Gislason","Gleason","Gleichner","Glover","Goldner","Goodwin","Gorczany","Gottlieb","Goyette","Grady","Graham","Grant","Green","Greenfelder","Greenholt","Grimes","Gulgowski","Gusikowski","Gutkowski","Gutmann","Haag","Hackett","Hagenes","Hahn","Haley","Halvorson","Hamill","Hammes","Hand","Hane","Hansen","Harber","Harris","Hartmann","Harvey","Hauck","Hayes","Heaney","Heathcote","Hegmann","Heidenreich","Heller","Herman","Hermann","Hermiston","Herzog","Hessel","Hettinger","Hickle","Hilll","Hills","Hilpert","Hintz","Hirthe","Hodkiewicz","Hoeger","Homenick","Hoppe","Howe","Howell","Hudson","Huel","Huels","Hyatt","Jacobi","Jacobs","Jacobson","Jakubowski","Jaskolski","Jast","Jenkins","Jerde","Johns","Johnson","Johnston","Jones","Kassulke","Kautzer","Keebler","Keeling","Kemmer","Kerluke","Kertzmann","Kessler","Kiehn","Kihn","Kilback","King","Kirlin","Klein","Kling","Klocko","Koch","Koelpin","Koepp","Kohler","Konopelski","Koss","Kovacek","Kozey","Krajcik","Kreiger","Kris","Kshlerin","Kub","Kuhic","Kuhlman","Kuhn","Kulas","Kunde","Kunze","Kuphal","Kutch","Kuvalis","Labadie","Lakin","Lang","Langosh","Langworth","Larkin","Larson","Leannon","Lebsack","Ledner","Leffler","Legros","Lehner","Lemke","Lesch","Leuschke","Lind","Lindgren","Littel","Little","Lockman","Lowe","Lubowitz","Lueilwitz","Luettgen","Lynch","MacGyver","Macejkovic","Maggio","Mann","Mante","Marks","Marquardt","Marvin","Mayer","Mayert","McClure","McCullough","McDermott","McGlynn","McKenzie","McLaughlin","Medhurst","Mertz","Metz","Miller","Mills","Mitchell","Moen","Mohr","Monahan","Moore","Morar","Morissette","Mosciski","Mraz","Mueller","Muller","Murazik","Murphy","Murray","Nader","Nicolas","Nienow","Nikolaus","Nitzsche","Nolan","O'Connell","O'Conner","O'Hara","O'Keefe","O'Kon","O'Reilly","Oberbrunner","Okuneva","Olson","Ondricka","Orn","Ortiz","Osinski","Pacocha","Padberg","Pagac","Parisian","Parker","Paucek","Pfannerstill","Pfeffer","Pollich","Pouros","Powlowski","Predovic","Price","Prohaska","Prosacco","Purdy","Quigley","Quitzon","Rath","Ratke","Rau","Raynor","Reichel","Reichert","Reilly","Reinger","Rempel","Renner","Reynolds","Rice","Rippin","Ritchie","Robel","Roberts","Rodriguez","Rogahn","Rohan","Rolfson","Romaguera","Roob","Rosenbaum","Rowe","Ruecker","Runolfsdottir","Runolfsson","Runte","Russel","Rutherford","Ryan","Sanford","Satterfield","Sauer","Sawayn","Schaden","Schaefer","Schamberger","Schiller","Schimmel","Schinner","Schmeler","Schmidt","Schmitt","Schneider","Schoen","Schowalter","Schroeder","Schulist","Schultz","Schumm","Schuppe","Schuster","Senger","Shanahan","Shields","Simonis","Sipes","Skiles","Smith","Smitham","Spencer","Spinka","Sporer","Stamm","Stanton","Stark","Stehr","Steuber","Stiedemann","Stokes","Stoltenberg","Stracke","Streich","Stroman","Strosin","Swaniawski","Swift","Terry","Thiel","Thompson","Tillman","Torp","Torphy","Towne","Toy","Trantow","Tremblay","Treutel","Tromp","Turcotte","Turner","Ullrich","Upton","Vandervort","Veum","Volkman","Von","VonRueden","Waelchi","Walker","Walsh","Walter","Ward","Waters","Watsica","Weber","Wehner","Weimann","Weissnat","Welch","West","White","Wiegand","Wilderman","Wilkinson","Will","Williamson","Willms","Windler","Wintheiser","Wisoky","Wisozk","Witting","Wiza","Wolf","Wolff","Wuckert","Wunsch","Wyman","Yost","Yundt","Zboncak","Zemlak","Ziemann","Zieme","Zulauf"]},ga={generic:[{value:"{{person.last_name.generic}}",weight:95},{value:"{{person.last_name.generic}}-{{person.last_name.generic}}",weight:5}]},ba={generic:["Addison","Alex","Anderson","Angel","Arden","August","Austin","Avery","Bailey","Billie","Blake","Bowie","Brooklyn","Cameron","Charlie","Corey","Dakota","Drew","Elliott","Ellis","Emerson","Finley","Gray","Greer","Harper","Hayden","Jaden","James","Jamie","Jordan","Jules","Kai","Kendall","Kennedy","Kyle","Leslie","Logan","London","Marlowe","Micah","Nico","Noah","North","Parker","Phoenix","Quinn","Reagan","Reese","Reign","Riley","River","Robin","Rory","Rowan","Ryan","Sage","Sasha","Sawyer","Shawn","Shiloh","Skyler","Taylor"],female:["Abigail","Adele","Alex","Alice","Alisha","Amber","Amelia","Amora","Anaïs","Angelou","Anika","Anise","Annabel","Anne","Aphrodite","Aretha","Arya","Ashton","Aster","Audrey","Avery","Bailee","Bay","Belle","Beth","Billie","Blair","Blaise","Blake","Blanche","Blue","Bree","Brielle","Brienne","Brooke","Caleen","Candice","Caprice","Carelyn","Caylen","Celine","Cerise","Cia","Claire","Claudia","Clementine","Coral","Coraline","Dahlia","Dakota","Dawn","Della","Demi","Denise","Denver","Devine","Devon","Diana","Dylan","Ebony","Eden","Eleanor","Elein","Elizabeth","Ellen","Elodie","Eloise","Ember","Emma","Erin","Eyre","Faith","Farrah","Fawn","Fayre","Fern","France","Francis","Frida","Genisis","Georgia","Grace","Gwen","Harley","Harper","Hazel","Helen","Hippolyta","Holly","Hope","Imani","Iowa","Ireland","Irene","Iris","Isa","Isla","Ivy","Jade","Jane","Jazz","Jean","Jess","Jett","Jo","Joan","Jolie","Jordan","Josie","Journey","Joy","Jules","Julien","Juliet","Juniper","Justice","Kali","Karma","Kat","Kate","Kennedy","Keva","Kylie","Lake","Lane","Lark","Layla","Lee","Leigh","Leona","Lexi","London","Lou","Louise","Love","Luna","Lux","Lynn","Lyric","Maddie","Mae","Marie","Matilda","Maude","Maybel","Meadow","Medusa","Mercy","Michelle","Mirabel","Monroe","Morgan","Nalia","Naomi","Nova","Olive","Paige","Parker","Pax","Pearl","Penelope","Phoenix","Quinn","Rae","Rain","Raven","Ray","Raye","Rebel","Reese","Reeve","Regan","Riley","River","Robin","Rory","Rose","Royal","Ruth","Rylie","Sage","Sam","Saturn","Scout","Serena","Sky","Skylar","Sofia","Sophia","Storm","Sue","Suzanne","Sydney","Taylen","Taylor","Teagan","Tempest","Tenley","Thea","Trinity","Valerie","Venus","Vera","Violet","Willow","Winter","Xena","Zaylee","Zion","Zoe"],male:["Ace","Aiden","Alexander","Ander","Anthony","Asher","August","Aziel","Bear","Beckham","Benjamin","Buddy","Calvin","Carter","Charles","Christopher","Clyde","Cooper","Daniel","David","Dior","Dylan","Elijah","Ellis","Emerson","Ethan","Ezra","Fletcher","Flynn","Gabriel","Grayson","Gus","Hank","Harrison","Hendrix","Henry","Houston","Hudson","Hugh","Isaac","Jack","Jackson","Jacob","Jakobe","James","Jaxon","Jaxtyn","Jayden","John","Joseph","Josiah","Jude","Julian","Karsyn","Kenji","Kobe","Kylo","Lennon","Leo","Levi","Liam","Lincoln","Logan","Louis","Lucas","Lucky","Luke","Mason","Mateo","Matthew","Maverick","Michael","Monroe","Nixon","Ocean","Oliver","Otis","Otto","Owen","Ozzy","Parker","Rocky","Samuel","Sebastian","Sonny","Teddy","Theo","Theodore","Thomas","Truett","Walter","Warren","Watson","William","Wison","Wyatt","Ziggy","Zyair"]},Ca=[{value:"{{person.firstName}} {{person.lastName}}",weight:49},{value:"{{person.prefix}} {{person.firstName}} {{person.lastName}}",weight:7},{value:"{{person.firstName}} {{person.lastName}} {{person.suffix}}",weight:7},{value:"{{person.prefix}} {{person.firstName}} {{person.lastName}} {{person.suffix}}",weight:1}],Sa={generic:["Dr.","Miss","Mr.","Mrs.","Ms."],female:["Dr.","Miss","Mrs.","Ms."],male:["Dr.","Mr."]},ka=["female","male"],fa=["Jr.","Sr.","I","II","III","IV","V","MD","DDS","PhD","DVM"],va=["Aquarius","Pisces","Aries","Taurus","Gemini","Cancer","Leo","Virgo","Libra","Scorpio","Sagittarius","Capricorn"],yr$1={bio_part:ta,bio_pattern:la,bio_supporter:sa,first_name:da,gender:ua,job_area:ca,job_descriptor:ma,job_title_pattern:ha,job_type:ya,last_name:pa,last_name_pattern:ga,middle_name:ba,name:Ca,prefix:Sa,sex:ka,suffix:fa,western_zodiac_sign:va},Aa=yr$1,Ba=["!##-!##-####","(!##) !##-####","1-!##-!##-####","!##.!##.####","!##-!##-#### x###","(!##) !##-#### x###","1-!##-!##-#### x###","!##.!##.#### x###","!##-!##-#### x####","(!##) !##-#### x####","1-!##-!##-#### x####","!##.!##.#### x####","!##-!##-#### x#####","(!##) !##-#### x#####","1-!##-!##-#### x#####","!##.!##.#### x#####"],Ta=["+1!##!######"],Ma=["(!##) !##-####"],pr$1={human:Ba,international:Ta,national:Ma},wa=pr$1,gr$1={format:wa},La=gr$1,Da=[{symbol:"H",name:"Hydrogen",atomicNumber:1},{symbol:"He",name:"Helium",atomicNumber:2},{symbol:"Li",name:"Lithium",atomicNumber:3},{symbol:"Be",name:"Beryllium",atomicNumber:4},{symbol:"B",name:"Boron",atomicNumber:5},{symbol:"C",name:"Carbon",atomicNumber:6},{symbol:"N",name:"Nitrogen",atomicNumber:7},{symbol:"O",name:"Oxygen",atomicNumber:8},{symbol:"F",name:"Fluorine",atomicNumber:9},{symbol:"Ne",name:"Neon",atomicNumber:10},{symbol:"Na",name:"Sodium",atomicNumber:11},{symbol:"Mg",name:"Magnesium",atomicNumber:12},{symbol:"Al",name:"Aluminium",atomicNumber:13},{symbol:"Si",name:"Silicon",atomicNumber:14},{symbol:"P",name:"Phosphorus",atomicNumber:15},{symbol:"S",name:"Sulfur",atomicNumber:16},{symbol:"Cl",name:"Chlorine",atomicNumber:17},{symbol:"Ar",name:"Argon",atomicNumber:18},{symbol:"K",name:"Potassium",atomicNumber:19},{symbol:"Ca",name:"Calcium",atomicNumber:20},{symbol:"Sc",name:"Scandium",atomicNumber:21},{symbol:"Ti",name:"Titanium",atomicNumber:22},{symbol:"V",name:"Vanadium",atomicNumber:23},{symbol:"Cr",name:"Chromium",atomicNumber:24},{symbol:"Mn",name:"Manganese",atomicNumber:25},{symbol:"Fe",name:"Iron",atomicNumber:26},{symbol:"Co",name:"Cobalt",atomicNumber:27},{symbol:"Ni",name:"Nickel",atomicNumber:28},{symbol:"Cu",name:"Copper",atomicNumber:29},{symbol:"Zn",name:"Zinc",atomicNumber:30},{symbol:"Ga",name:"Gallium",atomicNumber:31},{symbol:"Ge",name:"Germanium",atomicNumber:32},{symbol:"As",name:"Arsenic",atomicNumber:33},{symbol:"Se",name:"Selenium",atomicNumber:34},{symbol:"Br",name:"Bromine",atomicNumber:35},{symbol:"Kr",name:"Krypton",atomicNumber:36},{symbol:"Rb",name:"Rubidium",atomicNumber:37},{symbol:"Sr",name:"Strontium",atomicNumber:38},{symbol:"Y",name:"Yttrium",atomicNumber:39},{symbol:"Zr",name:"Zirconium",atomicNumber:40},{symbol:"Nb",name:"Niobium",atomicNumber:41},{symbol:"Mo",name:"Molybdenum",atomicNumber:42},{symbol:"Tc",name:"Technetium",atomicNumber:43},{symbol:"Ru",name:"Ruthenium",atomicNumber:44},{symbol:"Rh",name:"Rhodium",atomicNumber:45},{symbol:"Pd",name:"Palladium",atomicNumber:46},{symbol:"Ag",name:"Silver",atomicNumber:47},{symbol:"Cd",name:"Cadmium",atomicNumber:48},{symbol:"In",name:"Indium",atomicNumber:49},{symbol:"Sn",name:"Tin",atomicNumber:50},{symbol:"Sb",name:"Antimony",atomicNumber:51},{symbol:"Te",name:"Tellurium",atomicNumber:52},{symbol:"I",name:"Iodine",atomicNumber:53},{symbol:"Xe",name:"Xenon",atomicNumber:54},{symbol:"Cs",name:"Caesium",atomicNumber:55},{symbol:"Ba",name:"Barium",atomicNumber:56},{symbol:"La",name:"Lanthanum",atomicNumber:57},{symbol:"Ce",name:"Cerium",atomicNumber:58},{symbol:"Pr",name:"Praseodymium",atomicNumber:59},{symbol:"Nd",name:"Neodymium",atomicNumber:60},{symbol:"Pm",name:"Promethium",atomicNumber:61},{symbol:"Sm",name:"Samarium",atomicNumber:62},{symbol:"Eu",name:"Europium",atomicNumber:63},{symbol:"Gd",name:"Gadolinium",atomicNumber:64},{symbol:"Tb",name:"Terbium",atomicNumber:65},{symbol:"Dy",name:"Dysprosium",atomicNumber:66},{symbol:"Ho",name:"Holmium",atomicNumber:67},{symbol:"Er",name:"Erbium",atomicNumber:68},{symbol:"Tm",name:"Thulium",atomicNumber:69},{symbol:"Yb",name:"Ytterbium",atomicNumber:70},{symbol:"Lu",name:"Lutetium",atomicNumber:71},{symbol:"Hf",name:"Hafnium",atomicNumber:72},{symbol:"Ta",name:"Tantalum",atomicNumber:73},{symbol:"W",name:"Tungsten",atomicNumber:74},{symbol:"Re",name:"Rhenium",atomicNumber:75},{symbol:"Os",name:"Osmium",atomicNumber:76},{symbol:"Ir",name:"Iridium",atomicNumber:77},{symbol:"Pt",name:"Platinum",atomicNumber:78},{symbol:"Au",name:"Gold",atomicNumber:79},{symbol:"Hg",name:"Mercury",atomicNumber:80},{symbol:"Tl",name:"Thallium",atomicNumber:81},{symbol:"Pb",name:"Lead",atomicNumber:82},{symbol:"Bi",name:"Bismuth",atomicNumber:83},{symbol:"Po",name:"Polonium",atomicNumber:84},{symbol:"At",name:"Astatine",atomicNumber:85},{symbol:"Rn",name:"Radon",atomicNumber:86},{symbol:"Fr",name:"Francium",atomicNumber:87},{symbol:"Ra",name:"Radium",atomicNumber:88},{symbol:"Ac",name:"Actinium",atomicNumber:89},{symbol:"Th",name:"Thorium",atomicNumber:90},{symbol:"Pa",name:"Protactinium",atomicNumber:91},{symbol:"U",name:"Uranium",atomicNumber:92},{symbol:"Np",name:"Neptunium",atomicNumber:93},{symbol:"Pu",name:"Plutonium",atomicNumber:94},{symbol:"Am",name:"Americium",atomicNumber:95},{symbol:"Cm",name:"Curium",atomicNumber:96},{symbol:"Bk",name:"Berkelium",atomicNumber:97},{symbol:"Cf",name:"Californium",atomicNumber:98},{symbol:"Es",name:"Einsteinium",atomicNumber:99},{symbol:"Fm",name:"Fermium",atomicNumber:100},{symbol:"Md",name:"Mendelevium",atomicNumber:101},{symbol:"No",name:"Nobelium",atomicNumber:102},{symbol:"Lr",name:"Lawrencium",atomicNumber:103},{symbol:"Rf",name:"Rutherfordium",atomicNumber:104},{symbol:"Db",name:"Dubnium",atomicNumber:105},{symbol:"Sg",name:"Seaborgium",atomicNumber:106},{symbol:"Bh",name:"Bohrium",atomicNumber:107},{symbol:"Hs",name:"Hassium",atomicNumber:108},{symbol:"Mt",name:"Meitnerium",atomicNumber:109},{symbol:"Ds",name:"Darmstadtium",atomicNumber:110},{symbol:"Rg",name:"Roentgenium",atomicNumber:111},{symbol:"Cn",name:"Copernicium",atomicNumber:112},{symbol:"Nh",name:"Nihonium",atomicNumber:113},{symbol:"Fl",name:"Flerovium",atomicNumber:114},{symbol:"Mc",name:"Moscovium",atomicNumber:115},{symbol:"Lv",name:"Livermorium",atomicNumber:116},{symbol:"Ts",name:"Tennessine",atomicNumber:117},{symbol:"Og",name:"Oganesson",atomicNumber:118}],Ra=[{name:"meter",symbol:"m"},{name:"second",symbol:"s"},{name:"mole",symbol:"mol"},{name:"ampere",symbol:"A"},{name:"kelvin",symbol:"K"},{name:"candela",symbol:"cd"},{name:"kilogram",symbol:"kg"},{name:"radian",symbol:"rad"},{name:"hertz",symbol:"Hz"},{name:"newton",symbol:"N"},{name:"pascal",symbol:"Pa"},{name:"joule",symbol:"J"},{name:"watt",symbol:"W"},{name:"coulomb",symbol:"C"},{name:"volt",symbol:"V"},{name:"ohm",symbol:"Ω"},{name:"tesla",symbol:"T"},{name:"degree Celsius",symbol:"°C"},{name:"lumen",symbol:"lm"},{name:"becquerel",symbol:"Bq"},{name:"gray",symbol:"Gy"},{name:"sievert",symbol:"Sv"},{name:"steradian",symbol:"sr"},{name:"farad",symbol:"F"},{name:"siemens",symbol:"S"},{name:"weber",symbol:"Wb"},{name:"henry",symbol:"H"},{name:"lux",symbol:"lx"},{name:"katal",symbol:"kat"}],br$1={chemical_element:Da,unit:Ra},Pa=br$1,Ha=["ants","bats","bears","bees","birds","buffalo","cats","chickens","cattle","dogs","dolphins","ducks","elephants","fishes","foxes","frogs","geese","goats","horses","kangaroos","lions","monkeys","owls","oxen","penguins","people","pigs","rabbits","sheep","tigers","whales","wolves","zebras","banshees","crows","black cats","chimeras","ghosts","conspirators","dragons","dwarves","elves","enchanters","exorcists","sons","foes","giants","gnomes","goblins","gooses","griffins","lycanthropes","nemesis","ogres","oracles","prophets","sorcerors","spiders","spirits","vampires","warlocks","vixens","werewolves","witches","worshipers","zombies","druids"],Wa=["{{location.state}} {{team.creature}}"],Cr$1={creature:Ha,name:Wa},Ga=Cr$1,Fa=["Adventure Road Bicycle","BMX Bicycle","City Bicycle","Cruiser Bicycle","Cyclocross Bicycle","Dual-Sport Bicycle","Fitness Bicycle","Flat-Foot Comfort Bicycle","Folding Bicycle","Hybrid Bicycle","Mountain Bicycle","Recumbent Bicycle","Road Bicycle","Tandem Bicycle","Touring Bicycle","Track/Fixed-Gear Bicycle","Triathlon/Time Trial Bicycle","Tricycle"],Na=["Diesel","Electric","Gasoline","Hybrid"],Ea=["Aston Martin","Audi","BMW","BYD","Bentley","Bugatti","Cadillac","Chevrolet","Chrysler","Citroën","Dodge","Ferrari","Fiat","Ford","Honda","Hyundai","Jaguar","Jeep","Kia","Lamborghini","Land Rover","MG","Mahindra & Mahindra","Maruti","Maserati","Mazda","Mercedes Benz","Mini","Mitsubishi","NIO","Nissan","Peugeot","Polestar","Porsche","Renault","Rivian","Rolls Royce","Skoda","Smart","Subaru","Suzuki","Tata","Tesla","Toyota","Vauxhall","Volkswagen","Volvo"],Ja=["1","2","911","A4","A8","ATS","Accord","Alpine","Altima","Aventador","Beetle","CTS","CX-9","Camaro","Camry","Challenger","Charger","Civic","Colorado","Corvette","Countach","Cruze","Durango","El Camino","Element","Escalade","Expedition","Explorer","F-150","Fiesta","Focus","Fortwo","Golf","Grand Caravan","Grand Cherokee","Impala","Jetta","Land Cruiser","LeBaron","Malibu","Mercielago","Model 3","Model S","Model T","Model X","Model Y","Mustang","PT Cruiser","Prius","Ranchero","Roadster","Sentra","Silverado","Spyder","Taurus","V90","Volt","Wrangler","XC90","XTS"],Ia=["Cargo Van","Convertible","Coupe","Crew Cab Pickup","Extended Cab Pickup","Hatchback","Minivan","Passenger Van","SUV","Sedan","Wagon"],Sr$1={bicycle_type:Fa,fuel:Na,manufacturer:Ea,model:Ja,type:Ia},Ka=Sr$1,Oa=["abandoned","able","acceptable","acclaimed","accomplished","accurate","aching","acidic","actual","admired","adolescent","advanced","affectionate","afraid","aged","aggravating","aggressive","agile","agitated","agreeable","ajar","alarmed","alert","alienated","alive","all","altruistic","amazing","ambitious","ample","amused","angelic","anguished","animated","annual","another","antique","any","apprehensive","appropriate","apt","arid","artistic","ashamed","assured","astonishing","athletic","austere","authentic","authorized","avaricious","average","aware","awesome","awful","babyish","back","bad","baggy","bare","basic","beloved","beneficial","best","better","big","biodegradable","bitter","black","black-and-white","blank","blaring","bleak","blind","blond","blue","blushing","bogus","boiling","bony","boring","bossy","both","bouncy","bowed","brave","breakable","bright","brilliant","brisk","broken","brown","bruised","bulky","burdensome","burly","bustling","busy","buttery","buzzing","calculating","candid","carefree","careless","caring","cautious","cavernous","celebrated","charming","cheap","cheerful","chilly","chubby","circular","classic","clean","clear","clear-cut","close","closed","cloudy","clueless","clumsy","cluttered","coarse","colorful","colorless","colossal","comfortable","common","compassionate","competent","complete","complicated","concerned","concrete","confused","considerate","content","cool","cooperative","coordinated","corny","corrupt","courageous","courteous","crafty","crazy","creamy","creative","criminal","critical","crooked","crowded","cruel","crushing","cuddly","cultivated","cumbersome","curly","cute","damaged","damp","dapper","dark","darling","dazzling","dead","deadly","deafening","dearest","decent","decisive","deep","defenseless","defensive","deficient","definite","definitive","delectable","delicious","delirious","dense","dental","dependable","dependent","descriptive","deserted","determined","devoted","different","difficult","digital","diligent","dim","direct","dirty","discrete","disloyal","dismal","distant","distinct","distorted","doting","downright","drab","dramatic","dreary","dual","dull","dutiful","each","early","earnest","easy","ecstatic","edible","educated","elastic","elderly","electric","elegant","elementary","elliptical","eminent","emotional","empty","enchanted","enchanting","energetic","enlightened","enraged","entire","equatorial","essential","esteemed","ethical","everlasting","every","evil","exalted","excellent","excitable","excited","exhausted","exotic","expensive","experienced","expert","extra-large","extroverted","failing","faint","fair","fake","familiar","fantastic","far","far-flung","far-off","faraway","fat","fatal","fatherly","favorable","favorite","fearless","feline","filthy","fine","finished","firm","first","firsthand","fixed","flashy","flawed","flawless","flickering","flimsy","flowery","fluffy","flustered","focused","fond","foolhardy","foolish","forceful","formal","forsaken","fortunate","fragrant","frail","frank","free","french","frequent","friendly","frightened","frilly","frivolous","frizzy","front","frozen","frugal","fruitful","functional","funny","fussy","fuzzy","gaseous","general","gentle","genuine","gifted","gigantic","giving","glaring","glass","gleaming","glittering","gloomy","glorious","glossy","glum","golden","good","good-natured","gorgeous","graceful","gracious","grandiose","granular","grave","gray","great","greedy","grim","grimy","gripping","grizzled","grouchy","grounded","growing","grown","grubby","gruesome","grumpy","guilty","gullible","gummy","hairy","handsome","handy","happy","happy-go-lucky","hard-to-find","harmful","hasty","hateful","haunting","heartfelt","heavenly","heavy","hefty","helpful","helpless","hidden","hoarse","hollow","homely","honorable","honored","hopeful","hospitable","hot","huge","humble","humiliating","hungry","hurtful","husky","icy","ideal","idealistic","idolized","ignorant","ill","ill-fated","illiterate","illustrious","imaginary","imaginative","immaculate","immediate","immense","impartial","impassioned","impeccable","impish","impolite","important","impossible","impractical","impressionable","impressive","improbable","impure","inborn","incomparable","incomplete","inconsequential","indelible","indolent","inexperienced","infamous","infatuated","inferior","infinite","informal","innocent","insecure","insidious","insignificant","insistent","instructive","intelligent","intent","interesting","internal","international","intrepid","ironclad","irresponsible","jagged","jam-packed","jaunty","jealous","jittery","joyful","joyous","jubilant","judicious","juicy","jumbo","junior","juvenile","kaleidoscopic","key","knotty","knowledgeable","known","kooky","kosher","lanky","last","lasting","late","lavish","lawful","lazy","leading","lean","left","legal","light","lighthearted","likable","likely","limited","limp","limping","linear","lined","liquid","little","live","lively","livid","lone","lonely","long","long-term","lost","lovable","lovely","low","lucky","lumbering","lumpy","lustrous","mad","made-up","magnificent","majestic","major","male","mammoth","married","marvelous","massive","mature","meager","mealy","mean","measly","meaty","mediocre","medium","memorable","menacing","merry","messy","metallic","mild","milky","mindless","minor","minty","miserable","miserly","misguided","mixed","moist","monstrous","monthly","monumental","moral","motionless","muddy","muffled","multicolored","mundane","murky","mushy","musty","muted","mysterious","narrow","natural","naughty","nautical","near","neat","necessary","needy","negative","neglected","negligible","neighboring","nervous","new","next","nice","nifty","nimble","nippy","nocturnal","normal","noted","noteworthy","noxious","numb","nutritious","obedient","oblong","obvious","odd","oddball","official","oily","old","old-fashioned","only","optimal","optimistic","orange","orderly","ordinary","ornate","ornery","other","our","outgoing","outlandish","outlying","outrageous","outstanding","oval","overcooked","overdue","palatable","pale","paltry","parallel","parched","partial","passionate","pastel","peaceful","peppery","perfumed","perky","personal","pertinent","pessimistic","petty","phony","physical","pink","pitiful","plain","pleasant","pleased","pleasing","plump","pointed","pointless","polished","polite","political","poor","portly","posh","possible","potable","powerful","powerless","practical","precious","present","prestigious","pretty","pricey","prickly","primary","prime","private","probable","productive","profitable","profuse","proper","proud","prudent","punctual","puny","pure","purple","pushy","putrid","puzzled","qualified","quarrelsome","quarterly","queasy","querulous","questionable","quick","quick-witted","quiet","quintessential","quixotic","radiant","ragged","rapid","rare","raw","realistic","reasonable","recent","reckless","rectangular","red","reflecting","regal","regular","remarkable","remorseful","repentant","respectful","responsible","rewarding","rich","right","rigid","ripe","roasted","robust","rosy","rotating","rotten","rough","round","rowdy","royal","rubbery","ruddy","rundown","runny","rural","rusty","sad","salty","same","sandy","sarcastic","sardonic","scaly","scared","scary","scented","scientific","scornful","scratchy","second","second-hand","secondary","secret","self-assured","self-reliant","selfish","sentimental","separate","serene","serpentine","severe","shabby","shadowy","shady","shallow","shameful","shameless","shimmering","shiny","shocked","shoddy","short","short-term","showy","shrill","shy","sick","silent","silky","silver","similar","simple","simplistic","sinful","sizzling","skeletal","sleepy","slight","slimy","slow","slushy","small","smart","smoggy","smooth","smug","snappy","snarling","sneaky","sniveling","snoopy","sociable","soft","soggy","somber","some","sophisticated","sore","sorrowful","soulful","soupy","sour","spanish","sparkling","sparse","specific","speedy","spherical","spiffy","spirited","spiteful","splendid","spotless","square","squeaky","squiggly","stable","staid","stained","stale","standard","stark","steel","steep","sticky","stiff","stingy","stormy","straight","strange","strict","strident","striking","strong","stunning","stupendous","sturdy","stylish","subdued","submissive","substantial","subtle","suburban","sudden","sugary","sunny","super","superb","superficial","superior","supportive","sure-footed","surprised","svelte","sweet","swift","talkative","tall","tame","tangible","tasty","tattered","taut","tedious","teeming","tempting","tender","tense","tepid","terrible","that","these","thick","thin","thorny","thorough","those","thrifty","tidy","tight","timely","tinted","tiny","tired","torn","total","tough","tragic","trained","triangular","tricky","trim","trivial","troubled","true","trusting","trustworthy","trusty","turbulent","twin","ugly","ultimate","unaware","uncomfortable","uncommon","unconscious","understated","uneven","unfinished","unfit","unfortunate","unhappy","unhealthy","uniform","unimportant","unique","unkempt","unknown","unlawful","unlined","unlucky","unpleasant","unrealistic","unripe","unruly","unselfish","unsightly","unsteady","unsung","untidy","untimely","untried","untrue","unused","unusual","unwelcome","unwieldy","unwilling","unwritten","upbeat","upright","upset","urban","usable","useless","utilized","utter","vague","vain","valuable","variable","vast","velvety","vengeful","vibrant","victorious","violent","vivacious","vivid","voluminous","warlike","warm","warmhearted","warped","wasteful","waterlogged","watery","wavy","wealthy","weary","webbed","wee","weekly","weighty","weird","well-documented","well-groomed","well-lit","well-made","well-off","well-to-do","well-worn","which","whimsical","whirlwind","whispered","white","whole","whopping","wicked","wide","wide-eyed","wiggly","willing","wilted","winding","windy","winged","wise","witty","wobbly","woeful","wonderful","wordy","worldly","worse","worst","worthless","worthwhile","worthy","wrathful","wretched","writhing","wrong","wry","yearly","yellow","yellowish","young","youthful","yummy","zany","zealous","zesty"],xa=["abnormally","absentmindedly","accidentally","acidly","actually","adventurously","afterwards","almost","always","angrily","annually","anxiously","arrogantly","awkwardly","badly","bashfully","beautifully","bitterly","bleakly","blindly","blissfully","boastfully","boldly","bravely","briefly","brightly","briskly","broadly","busily","calmly","carefully","carelessly","cautiously","certainly","cheerfully","clearly","cleverly","closely","coaxingly","colorfully","commonly","continually","coolly","correctly","courageously","crossly","cruelly","curiously","daily","daintily","dearly","deceivingly","deeply","defiantly","deliberately","delightfully","diligently","dimly","doubtfully","dreamily","easily","elegantly","energetically","enormously","enthusiastically","equally","especially","even","evenly","eventually","exactly","excitedly","extremely","fairly","faithfully","famously","far","fast","fatally","ferociously","fervently","fiercely","fondly","foolishly","fortunately","frankly","frantically","freely","frenetically","frightfully","fully","furiously","generally","generously","gently","gladly","gleefully","gracefully","gratefully","greatly","greedily","happily","hastily","healthily","heavily","helpfully","helplessly","highly","honestly","hopelessly","hourly","hungrily","immediately","innocently","inquisitively","instantly","intensely","intently","interestingly","inwardly","irritably","jaggedly","jealously","joshingly","jovially","joyfully","joyously","jubilantly","judgementally","justly","keenly","kiddingly","kindheartedly","kindly","kissingly","knavishly","knottily","knowingly","knowledgeably","kookily","lazily","less","lightly","likely","limply","lively","loftily","longingly","loosely","loudly","lovingly","loyally","madly","majestically","meaningfully","mechanically","merrily","miserably","mockingly","monthly","more","mortally","mostly","mysteriously","naturally","nearly","neatly","needily","nervously","never","nicely","noisily","not","obediently","obnoxiously","oddly","offensively","officially","often","only","openly","optimistically","overconfidently","owlishly","painfully","partially","patiently","perfectly","physically","playfully","politely","poorly","positively","potentially","powerfully","promptly","properly","punctually","quaintly","quarrelsomely","queasily","questionably","questioningly","quicker","quickly","quietly","quirkily","quizzically","rapidly","rarely","readily","really","reassuringly","recklessly","regularly","reluctantly","repeatedly","reproachfully","restfully","righteously","rightfully","rigidly","roughly","rudely","sadly","safely","scarcely","scarily","searchingly","sedately","seemingly","seldom","selfishly","separately","seriously","shakily","sharply","sheepishly","shrilly","shyly","silently","sleepily","slowly","smoothly","softly","solemnly","solidly","sometimes","soon","speedily","stealthily","sternly","strictly","successfully","suddenly","surprisingly","suspiciously","sweetly","swiftly","sympathetically","tenderly","tensely","terribly","thankfully","thoroughly","thoughtfully","tightly","tomorrow","too","tremendously","triumphantly","truly","truthfully","ultimately","unabashedly","unaccountably","unbearably","unethically","unexpectedly","unfortunately","unimpressively","unnaturally","unnecessarily","upbeat","upliftingly","upright","upside-down","upward","upwardly","urgently","usefully","uselessly","usually","utterly","vacantly","vaguely","vainly","valiantly","vastly","verbally","very","viciously","victoriously","violently","vivaciously","voluntarily","warmly","weakly","wearily","well","wetly","wholly","wildly","willfully","wisely","woefully","wonderfully","worriedly","wrongly","yawningly","yearly","yearningly","yesterday","yieldingly","youthfully"],za=["after","although","and","as","because","before","but","consequently","even","finally","for","furthermore","hence","how","however","if","inasmuch","incidentally","indeed","instead","lest","likewise","meanwhile","nor","now","once","or","provided","since","so","supposing","than","that","though","till","unless","until","what","when","whenever","where","whereas","wherever","whether","which","while","who","whoever","whose","why","yet"],Va=["yuck","oh","phooey","blah","boo","whoa","yowza","huzzah","boohoo","fooey","geez","pfft","ew","ah","yum","brr","hm","yahoo","aha","woot","drat","gah","meh","psst","aw","ugh","yippee","eek","gee","bah","gadzooks","duh","ha","mmm","ouch","phew","ack","uh-huh","gosh","hmph","pish","zowie","er","ick","oof","um"],Ya=["CD","SUV","abacus","academics","accelerator","accompanist","account","accountability","acquaintance","ad","adaptation","address","adrenalin","adult","advancement","advertisement","adviser","affect","affiliate","aftermath","agreement","airbus","aircraft","airline","airmail","airman","airport","alb","alert","allegation","alliance","alligator","allocation","almighty","amendment","amnesty","analogy","angle","annual","antelope","anticodon","apparatus","appliance","approach","apricot","arcade","archaeology","armchair","armoire","asset","assist","atrium","attraction","availability","avalanche","awareness","babushka","backbone","backburn","bakeware","bandwidth","bar","barge","baritone","barracks","baseboard","basket","bathhouse","bathrobe","battle","begonia","behest","bell","bench","bend","beret","best-seller","bid","bidet","bin","birdbath","birdcage","birth","blight","blossom","blowgun","bob","bog","bonfire","bonnet","bookcase","bookend","boulevard","bourgeoisie","bowler","bowling","boyfriend","brace","bracelet","bran","breastplate","brief","brochure","brook","brush","bug","bump","bungalow","cafe","cake","calculus","cannon","cantaloupe","cap","cappelletti","captain","caption","carboxyl","cardboard","carnival","case","casement","cash","casket","cassava","castanet","catalyst","cauliflower","cellar","celsius","cemetery","ceramic","ceramics","certification","chainstay","chairperson","challenge","championship","chap","chapel","character","characterization","charlatan","charm","chasuble","cheese","cheetah","chiffonier","chops","chow","cinder","cinema","circumference","citizen","clamp","clavicle","cleaner","climb","co-producer","coal","coast","cod","coil","coin","coliseum","collaboration","collectivization","colon","colonialism","comestible","commercial","commodity","community","comparison","completion","complication","compromise","concentration","configuration","confusion","conservation","conservative","consistency","contractor","contrail","convection","conversation","cook","coordination","cop-out","cope","cork","cornet","corporation","corral","cosset","costume","couch","council","councilman","countess","courtroom","cow","creator","creature","crest","cricket","crocodile","cross-contamination","cruelty","cuckoo","curl","custody","custom","cutlet","cutover","cycle","daddy","dandelion","dash","daughter","dead","decision","deck","declaration","decongestant","decryption","deduction","deed","deer","defendant","density","department","dependency","deployment","depot","derby","descendant","descent","design","designation","desk","detective","devastation","developing","developmental","devil","diagram","digestive","digit","dime","director","disadvantage","disappointment","disclosure","disconnection","discourse","dish","disk","disposer","distinction","diver","diversity","dividend","divine","doing","doorpost","doubter","draft","draw","dream","dredger","dress","drive","drug","duffel","dulcimer","dusk","duster","dwell","e-mail","earth","ecliptic","ectoderm","edge","editor","effector","eggplant","electronics","elevation","elevator","elver","embarrassment","embossing","emergent","encouragement","entry","epic","equal","essence","eternity","ethyl","euphonium","event","exasperation","excess","executor","exhaust","expansion","expense","experience","exploration","extension","extent","exterior","eyebrow","eyeliner","farm","farmer","fat","fax","feather","fedora","fellow","fen","fencing","ferret","festival","fibre","filter","final","finding","finer","finger","fireplace","fisherman","fishery","fit","flame","flat","fledgling","flight","flint","flood","flu","fog","fold","folklore","follower","following","foodstuffs","footrest","forage","forager","forgery","fork","formamide","formation","formula","fort","fowl","fraudster","freckle","freezing","freight","fuel","fun","fund","fundraising","futon","gallery","galoshes","gastropod","gazebo","gerbil","ghost","giant","gift","giggle","glider","gloom","goat","godfather","godparent","going","goodwill","governance","government","gown","gradient","graffiti","grandpa","grandson","granny","grass","gray","gripper","grouper","guacamole","guard","guidance","guide","gym","gymnast","habit","haircut","halt","hamburger","hammock","handful","handle","handover","harp","haversack","hawk","heartache","heartbeat","heating","hello","help","hepatitis","heroine","hexagon","hierarchy","hippodrome","honesty","hoof","hope","horde","hornet","horst","hose","hospitalization","hovel","hovercraft","hubris","humidity","humor","hundred","hunger","hunt","husband","hutch","hydrant","hydrocarbon","hydrolyse","hydrolyze","hyena","hygienic","hyphenation","ice-cream","icebreaker","igloo","ignorance","illusion","impact","import","importance","impostor","in-joke","incandescence","independence","individual","information","injunction","innovation","insolence","inspection","instance","institute","instruction","instructor","integer","intellect","intent","interchange","interior","intervention","interviewer","invite","iridescence","issue","jacket","jazz","jellyfish","jet","jogging","joy","juggernaut","jump","jungle","junior","jury","kettledrum","kick","kielbasa","kinase","king","kiss","kit","knickers","knight","knitting","knuckle","label","labourer","lace","lady","lamp","language","larva","lashes","laughter","lava","lawmaker","lay","leading","league","legend","legging","legislature","lender","license","lid","lieu","lifestyle","lift","linseed","litter","loaf","lobster","longboat","lotion","lounge","louse","lox","loyalty","luck","lyre","maestro","mainstream","maintainer","majority","makeover","making","mallard","management","manner","mantua","marathon","march","marimba","marketplace","marksman","markup","marten","massage","masterpiece","mathematics","meadow","meal","meander","meatloaf","mechanic","median","membership","mentor","merit","metabolite","metal","middle","midwife","milestone","millet","minion","minister","minor","minority","mixture","mobility","molasses","mom","moment","monasticism","monocle","monster","morbidity","morning","mortise","mountain","mouser","mousse","mozzarella","muscat","mythology","napkin","necklace","nectarine","negotiation","nephew","nerve","netsuke","newsletter","newsprint","newsstand","nightlife","noon","nougat","nucleotidase","nudge","numeracy","numeric","nun","obedience","obesity","object","obligation","ocelot","octave","offset","oil","omelet","onset","opera","operating","optimal","orchid","order","ostrich","other","outlaw","outrun","outset","overcoat","overheard","overload","ownership","pacemaker","packaging","paintwork","palate","pants","pantyhose","papa","parade","parsnip","partridge","passport","pasta","patroller","pear","pearl","pecan","pendant","peninsula","pension","peony","pepper","perfection","permafrost","perp","petal","petticoat","pharmacopoeia","phrase","pick","piglet","pigpen","pigsty","pile","pillbox","pillow","pilot","pine","pinstripe","place","plain","planula","plastic","platter","platypus","pleasure","pliers","plugin","plumber","pneumonia","pocket-watch","poetry","polarisation","polyester","pomelo","pop","poppy","popularity","populist","porter","possession","postbox","precedent","premeditation","premier","premise","premium","pressure","presume","priesthood","printer","privilege","procurement","produce","programme","prohibition","promise","pronoun","providence","provider","provision","publication","publicity","pulse","punctuation","pupil","puppet","puritan","quart","quinoa","quit","railway","range","rationale","ravioli","rawhide","reach","reasoning","reboot","receptor","recommendation","reconsideration","recovery","redesign","relative","release","remark","reorganisation","repeat","replacement","reporter","representation","republican","request","requirement","reservation","resolve","resource","responsibility","restaurant","retention","retrospectivity","reward","ribbon","rim","riser","roadway","role","rosemary","roundabout","rubric","ruin","rule","runway","rust","safe","sailor","saloon","sand","sandbar","sanity","sarong","sauerkraut","saw","scaffold","scale","scarification","scenario","schedule","schnitzel","scholarship","scorn","scorpion","scout","scrap","scratch","seafood","seagull","seal","season","secrecy","secret","section","sediment","self-confidence","sermon","sesame","settler","shadowbox","shark","shipper","shore","shoulder","sideboard","siege","sightseeing","signature","silk","simple","singing","skean","skeleton","skyline","skyscraper","slide","slime","slipper","smog","smoke","sock","soliloquy","solution","solvency","someplace","sonar","sonata","sonnet","soup","soybean","space","spear","spirit","spork","sport","spring","sprinkles","squid","stall","starboard","statue","status","stay","steak","steeple","step","step-mother","sticker","stir-fry","stitcher","stock","stool","story","strait","stranger","strategy","straw","stump","subexpression","submitter","subsidy","substitution","suitcase","summary","summer","sunbeam","sundae","supplier","surface","sushi","suspension","sustenance","swanling","swath","sweatshop","swim","swine","swing","switch","switchboard","swordfish","synergy","t-shirt","tabletop","tackle","tail","tapioca","taro","tarragon","taxicab","teammate","technician","technologist","tectonics","tenant","tenement","tennis","tentacle","teriyaki","term","testimonial","testing","thigh","thongs","thorn","thread","thunderbolt","thyme","tinderbox","toaster","tomatillo","tomb","tomography","tool","tooth","toothbrush","toothpick","topsail","traditionalism","traffic","translation","transom","transparency","trash","travel","tray","trench","tribe","tributary","trick","trolley","tuba","tuber","tune-up","turret","tusk","tuxedo","typeface","typewriter","unblinking","underneath","underpants","understanding","unibody","unique","unit","utilization","valentine","validity","valley","valuable","vanadyl","vein","velocity","venom","version","verve","vestment","veto","viability","vibraphone","vibration","vicinity","video","violin","vision","vista","vol","volleyball","wafer","waist","wallaby","warming","wasabi","waterspout","wear","wedding","whack","whale","wheel","widow","wilderness","willow","window","wombat","word","worth","wriggler","yak","yarmulke","yeast","yin","yogurt","zebra","zen"],ja=["a","abaft","aboard","about","above","absent","across","afore","after","against","along","alongside","amid","amidst","among","amongst","an","anenst","anti","apropos","apud","around","as","aside","astride","at","athwart","atop","barring","before","behind","below","beneath","beside","besides","between","beyond","but","by","circa","concerning","considering","despite","down","during","except","excepting","excluding","failing","following","for","forenenst","from","given","in","including","inside","into","lest","like","mid","midst","minus","modulo","near","next","notwithstanding","of","off","on","onto","opposite","out","outside","over","pace","past","per","plus","pro","qua","regarding","round","sans","save","since","than","the","through","throughout","till","times","to","toward","towards","under","underneath","unlike","until","unto","up","upon","versus","via","vice","with","within","without","worth"],qa=["abnegate","abscond","abseil","absolve","accentuate","accept","access","accessorise","accompany","account","accredit","achieve","acknowledge","acquire","adjourn","adjudge","admonish","adumbrate","advocate","afford","airbrush","ameliorate","amend","amount","anaesthetise","analyse","anesthetize","anneal","annex","antagonize","ape","apologise","apostrophize","appertain","appreciate","appropriate","approximate","arbitrate","archive","arraign","arrange","ascertain","ascribe","assail","atomize","attend","attest","attribute","augment","avow","axe","baa","banish","bank","baptise","battle","beard","beep","behold","belabor","bemuse","besmirch","bestride","better","bewail","bicycle","bide","bind","biodegrade","blacken","blaspheme","bleach","blend","blink","bliss","bloom","bludgeon","bobble","boggle","bolster","book","boom","bootleg","border","bore","boss","braid","brand","brandish","break","breed","broadcast","broadside","brood","browse","buck","burgeon","bus","butter","buzzing","camouflage","cannibalise","canter","cap","capitalise","capitalize","capsize","card","carouse","carp","carpool","catalog","catalyze","catch","categorise","cease","celebrate","censor","certify","char","charter","chase","chatter","chime","chip","christen","chromakey","chunder","chunter","cinch","circle","circulate","circumnavigate","clamor","clamour","claw","cleave","clinch","clinking","clone","clonk","coagulate","coexist","coincide","collaborate","colligate","colorize","colour","comb","come","commandeer","commemorate","communicate","compete","conceal","conceptualize","conclude","concrete","condense","cone","confide","confirm","confiscate","confound","confute","congregate","conjecture","connect","consign","construe","contradict","contrast","contravene","controvert","convalesce","converse","convince","convoke","coop","cop","corner","covenant","cow","crackle","cram","crank","creak","creaking","cripple","croon","cross","crumble","crystallize","culminate","culture","curry","curse","customise","cycle","dally","dampen","darn","debit","debut","decide","decode","decouple","decriminalize","deduce","deduct","deflate","deflect","deform","defrag","degenerate","degrease","delete","delight","deliquesce","demob","demobilise","democratize","demonstrate","denitrify","deny","depart","depend","deplore","deploy","deprave","depute","dereference","describe","desecrate","deselect","destock","detain","develop","devise","dial","dicker","digitize","dilate","disapprove","disarm","disbar","discontinue","disgorge","dishearten","dishonor","disinherit","dislocate","dispense","display","dispose","disrespect","dissemble","ditch","divert","dock","doodle","downchange","downshift","dowse","draft","drag","drain","dramatize","drowse","drum","dwell","economise","edge","efface","egg","eke","electrify","embalm","embed","embody","emboss","emerge","emphasise","emphasize","emulsify","encode","endow","enfold","engage","engender","enhance","enlist","enrage","enrich","enroll","entice","entomb","entrench","entwine","equate","essay","etch","eulogise","even","evince","exacerbate","exaggerate","exalt","exempt","exonerate","expatiate","explode","expostulate","extract","extricate","eyeglasses","fabricate","facilitate","factorise","factorize","fail","fall","familiarize","fashion","father","fathom","fax","federate","feminize","fence","fess","fictionalize","fiddle","fidget","fill","flash","fleck","flight","floodlight","floss","fluctuate","fluff","fly","focalise","foot","forearm","forecast","foretell","forgather","forgo","fork","form","forswear","founder","fraternise","fray","frizz","fumigate","function","furlough","fuss","gad","gallivant","galvanize","gape","garage","garrote","gasp","gestate","give","glimmer","glisten","gloat","gloss","glow","gnash","gnaw","goose","govern","grade","graduate","graft","grok","guest","guilt","gulp","gum","gurn","gust","gut","guzzle","ham","harangue","harvest","hassle","haul","haze","headline","hearten","heighten","highlight","hoick","hold","hole","hollow","holster","home","homeschool","hoot","horn","horse","hotfoot","house","hover","howl","huddle","huff","hunger","hunt","husk","hype","hypothesise","hypothesize","idle","ignite","imagineer","impact","impanel","implode","incinerate","incline","inculcate","industrialize","ingratiate","inhibit","inject","innovate","inscribe","insert","insist","inspect","institute","institutionalize","intend","intermarry","intermesh","intermix","internalise","internalize","internationalize","intrigue","inure","inveigle","inventory","investigate","irk","iterate","jaywalk","jell","jeopardise","jiggle","jive","joint","jot","jut","keel","knife","knit","know","kowtow","lack","lampoon","large","leap","lecture","legitimize","lend","libel","liberalize","license","ligate","list","lobotomise","lock","log","loose","low","lowball","machine","magnetize","major","make","malfunction","manage","manipulate","maroon","masculinize","mash","mask","masquerade","massage","masticate","materialise","matter","maul","memorise","merge","mesh","metabolise","microblog","microchip","micromanage","militate","mill","minister","minor","misappropriate","miscalculate","misfire","misjudge","miskey","mismatch","mispronounce","misread","misreport","misspend","mob","mobilise","mobilize","moisten","mooch","moor","moralise","mortar","mosh","mothball","motivate","motor","mould","mount","muddy","mummify","mutate","mystify","nab","narrate","narrowcast","nasalise","nauseate","navigate","neaten","neck","neglect","norm","notarize","object","obscure","observe","obsess","obstruct","obtrude","offend","offset","option","orchestrate","orient","orientate","outbid","outdo","outfit","outflank","outfox","outnumber","outrank","outrun","outsource","overburden","overcharge","overcook","overdub","overfeed","overload","overplay","overproduce","overreact","override","overspend","overstay","overtrain","overvalue","overwork","own","oxidise","oxidize","oxygenate","pace","pack","pale","pant","paralyse","parody","part","pause","pave","penalise","persecute","personalise","perspire","pertain","peter","pike","pillory","pinion","pip","pity","pivot","pixellate","plagiarise","plait","plan","please","pluck","ponder","popularize","portray","prance","preclude","preheat","prejudge","preregister","presell","preside","pretend","print","prioritize","probate","probe","proceed","procrastinate","profane","progress","proliferate","proofread","propound","proselytise","provision","pry","publicize","puff","pull","pulp","pulverize","purse","put","putrefy","quadruple","quaff","quantify","quarrel","quash","quaver","question","quiet","quintuple","quip","quit","rag","rally","ramp","randomize","rationalise","rationalize","ravage","ravel","react","readies","readjust","readmit","ready","reapply","rear","reassemble","rebel","reboot","reborn","rebound","rebuff","rebuild","rebuke","recede","reckon","reclassify","recompense","reconstitute","record","recount","redact","redevelop","redound","redraw","redress","reel","refer","reference","refine","reflate","refute","regulate","reiterate","rejigger","rejoin","rekindle","relaunch","relieve","remand","remark","reopen","reorient","replicate","repossess","represent","reprimand","reproach","reprove","repurpose","requite","reschedule","resort","respray","restructure","retool","retract","revere","revitalise","revoke","reword","rewrite","ride","ridge","rim","ring","rise","rival","roger","rosin","rot","rout","row","rue","rule","safeguard","sashay","sate","satirise","satirize","satisfy","saturate","savour","scale","scamper","scar","scare","scarper","scent","schematise","scheme","schlep","scoff","scoop","scope","scotch","scowl","scrabble","scram","scramble","scrape","screw","scruple","scrutinise","scuffle","scuttle","search","secularize","see","segregate","sell","sense","sensitize","sequester","serenade","serialize","serve","service","settle","sew","shaft","sham","shampoo","shanghai","shear","sheathe","shell","shinny","shirk","shoot","shoulder","shout","shovel","showboat","shred","shrill","shudder","shush","sidetrack","sign","silt","sin","singe","sit","sizzle","skateboard","ski","slake","slap","slather","sleet","slink","slip","slope","slump","smarten","smuggle","snack","sneak","sniff","snoop","snow","snowplow","snuggle","soap","solace","solder","solicit","source","spark","spattering","spectacles","spectate","spellcheck","spew","spice","spirit","splash","splay","split","splosh","splurge","spook","square","squirm","stabilise","stable","stack","stage","stake","starch","state","statement","stiffen","stigmatize","sting","stint","stoop","store","storyboard","stratify","structure","stuff","stunt","substantiate","subtract","suckle","suffice","suffocate","summarise","sun","sunbathe","sunder","sup","surge","surprise","swat","swathe","sway","swear","swelter","swerve","swill","swing","symbolise","synthesise","syringe","table","tabulate","tag","tame","tank","tankful","tarry","task","taxicab","team","telescope","tenant","terraform","terrorise","testify","think","throbbing","thump","tighten","toady","toe","tough","tousle","traduce","train","transcend","transplant","trash","treasure","treble","trek","trial","tromp","trouser","trust","tune","tut","twine","twist","typify","unbalance","uncork","uncover","underachieve","undergo","underplay","unearth","unfreeze","unfurl","unlearn","unscramble","unzip","uproot","upsell","usher","vacation","vamoose","vanish","vary","veg","venture","verify","vet","veto","volunteer","vulgarise","waft","wallop","waltz","warp","wash","waver","weary","weatherize","wedge","weep","weight","welcome","westernise","westernize","while","whine","whisper","whistle","whitewash","whup","wilt","wing","wire","wisecrack","wolf","wound","wring","writ","yak","yawn","yearn","yuppify"],kr={adjective:Oa,adverb:xa,conjunction:za,interjection:Va,noun:Ya,preposition:ja,verb:qa},Ua=kr,fr$1={airline:o,animal:k,app:B$1,book:P$1,cell_phone:W$1,color:F,commerce:I$1,company:U$1,database:_$1,date:$$1,finance:ce$1,food:ve$1,hacker:Le$1,internet:He$1,location:Qe$1,lorem:$e$1,metadata:ea,music:ia,person:Aa,phone_number:La,science:Pa,team:Ga,vehicle:Ka,word:Ua},ys=fr$1,m=class extends Error{};function Ne(en){let rn=Object.getPrototypeOf(en);do{for(let an of Object.getOwnPropertyNames(rn))typeof en[an]=="function"&&an!=="constructor"&&(en[an]=en[an].bind(en));rn=Object.getPrototypeOf(rn)}while(rn!==Object.prototype)}var x=class{constructor(en){this.faker=en,Ne(this)}},p=class extends x{constructor(en){super(en),this.faker=en}},De=(en=>(en.Narrowbody="narrowbody",en.Regional="regional",en.Widebody="widebody",en))(De||{}),xr=["0","1","2","3","4","5","6","7","8","9"],Ar=["0","O","1","I","L"],Er={regional:20,narrowbody:35,widebody:60},wr={regional:["A","B","C","D"],narrowbody:["A","B","C","D","E","F"],widebody:["A","B","C","D","E","F","G","H","J","K"]},G=class extends p{airport(){return this.faker.helpers.arrayElement(this.faker.definitions.airline.airport)}airline(){return this.faker.helpers.arrayElement(this.faker.definitions.airline.airline)}airplane(){return this.faker.helpers.arrayElement(this.faker.definitions.airline.airplane)}recordLocator(en={}){let{allowNumerics:rn=!1,allowVisuallySimilarCharacters:an=!1}=en,nn=[];return rn||nn.push(...xr),an||nn.push(...Ar),this.faker.string.alphanumeric({length:6,casing:"upper",exclude:nn})}seat(en={}){let{aircraftType:rn="narrowbody"}=en,an=Er[rn],nn=wr[rn],tn=this.faker.number.int({min:1,max:an}),un=this.faker.helpers.arrayElement(nn);return`${tn}${un}`}aircraftType(){return this.faker.helpers.enumValue(De)}flightNumber(en={}){let{length:rn={min:1,max:4},addLeadingZeros:an=!1}=en,nn=this.faker.string.numeric({length:rn,allowLeadingZeros:!1});return an?nn.padStart(4,"0"):nn}},Re=(en=>(en.SRGB="sRGB",en.DisplayP3="display-p3",en.REC2020="rec2020",en.A98RGB="a98-rgb",en.ProphotoRGB="prophoto-rgb",en))(Re||{}),Le=(en=>(en.RGB="rgb",en.RGBA="rgba",en.HSL="hsl",en.HSLA="hsla",en.HWB="hwb",en.CMYK="cmyk",en.LAB="lab",en.LCH="lch",en.COLOR="color",en))(Le||{});function Sr(en,rn){let{prefix:an,casing:nn}=rn;switch(nn){case"upper":{en=en.toUpperCase();break}case"lower":{en=en.toLowerCase();break}}return an&&(en=an+en),en}function Pe(en){return en.map(rn=>{if(rn%1!==0){let an=new ArrayBuffer(4);new DataView(an).setFloat32(0,rn);let nn=new Uint8Array(an);return Pe([...nn]).replaceAll(" ","")}return(rn>>>0).toString(2).padStart(8,"0")}).join(" ")}function A(en){return Math.round(en*100)}function Mr(en,rn="rgb",an="sRGB"){switch(rn){case"rgba":return`rgba(${en[0]}, ${en[1]}, ${en[2]}, ${en[3]})`;case"color":return`color(${an} ${en[0]} ${en[1]} ${en[2]})`;case"cmyk":return`cmyk(${A(en[0])}%, ${A(en[1])}%, ${A(en[2])}%, ${A(en[3])}%)`;case"hsl":return`hsl(${en[0]}deg ${A(en[1])}% ${A(en[2])}%)`;case"hsla":return`hsl(${en[0]}deg ${A(en[1])}% ${A(en[2])}% / ${A(en[3])})`;case"hwb":return`hwb(${en[0]} ${A(en[1])}% ${A(en[2])}%)`;case"lab":return`lab(${A(en[0])}% ${en[1]} ${en[2]})`;case"lch":return`lch(${A(en[0])}% ${en[1]} ${en[2]})`;case"rgb":return`rgb(${en[0]}, ${en[1]}, ${en[2]})`}}function D(en,rn,an="rgb",nn="sRGB"){switch(rn){case"css":return Mr(en,an,nn);case"binary":return Pe(en);case"decimal":return en}}var O=class extends p{human(){return this.faker.helpers.arrayElement(this.faker.definitions.color.human)}space(){return this.faker.helpers.arrayElement(this.faker.definitions.color.space)}cssSupportedFunction(){return this.faker.helpers.enumValue(Le)}cssSupportedSpace(){return this.faker.helpers.enumValue(Re)}rgb(en={}){let{format:rn="hex",includeAlpha:an=!1,prefix:nn="#",casing:tn="lower"}=en,un,ln="rgb";return rn==="hex"?(un=this.faker.string.hexadecimal({length:an?8:6,prefix:""}),un=Sr(un,{prefix:nn,casing:tn}),un):(un=Array.from({length:3},()=>this.faker.number.int(255)),an&&(un.push(this.faker.number.float({multipleOf:.01})),ln="rgba"),D(un,rn,ln))}cmyk(en={}){let{format:rn="decimal"}=en,an=Array.from({length:4},()=>this.faker.number.float({multipleOf:.01}));return D(an,rn,"cmyk")}hsl(en={}){let{format:rn="decimal",includeAlpha:an=!1}=en,nn=[this.faker.number.int(360)];for(let tn=0;tn<(en?.includeAlpha?3:2);tn++)nn.push(this.faker.number.float({multipleOf:.01}));return D(nn,rn,an?"hsla":"hsl")}hwb(en={}){let{format:rn="decimal"}=en,an=[this.faker.number.int(360)];for(let nn=0;nn<2;nn++)an.push(this.faker.number.float({multipleOf:.01}));return D(an,rn,"hwb")}lab(en={}){let{format:rn="decimal"}=en,an=[this.faker.number.float({multipleOf:1e-6})];for(let nn=0;nn<2;nn++)an.push(this.faker.number.float({min:-100,max:100,multipleOf:1e-4}));return D(an,rn,"lab")}lch(en={}){let{format:rn="decimal"}=en,an=[this.faker.number.float({multipleOf:1e-6})];for(let nn=0;nn<2;nn++)an.push(this.faker.number.float({max:230,multipleOf:.1}));return D(an,rn,"lch")}colorByCSSColorSpace(en={}){let{format:rn="decimal",space:an="sRGB"}=en,nn=Array.from({length:3},()=>this.faker.number.float({multipleOf:1e-4}));return D(nn,rn,"color",an)}},de=(en=>(en.Legacy="legacy",en.Segwit="segwit",en.Bech32="bech32",en.Taproot="taproot",en))(de||{}),Be=(en=>(en.Mainnet="mainnet",en.Testnet="testnet",en))(Be||{}),ve={legacy:{prefix:{mainnet:"1",testnet:"m"},length:{min:26,max:34},casing:"mixed",exclude:"0OIl"},segwit:{prefix:{mainnet:"3",testnet:"2"},length:{min:26,max:34},casing:"mixed",exclude:"0OIl"},bech32:{prefix:{mainnet:"bc1",testnet:"tb1"},length:{min:42,max:42},casing:"lower",exclude:"1bBiIoO"},taproot:{prefix:{mainnet:"bc1p",testnet:"tb1p"},length:{min:62,max:62},casing:"lower",exclude:"1bBiIoO"}},ge=typeof Buffer>"u"||!$e("base64")?en=>{let rn=new TextEncoder().encode(en),an=Array.from(rn,nn=>String.fromCodePoint(nn)).join("");return btoa(an)}:en=>Buffer.from(en).toString("base64"),ye=typeof Buffer>"u"||!$e("base64url")?en=>ge(en).replaceAll("+","-").replaceAll("/","_").replaceAll(/=+$/g,""):en=>Buffer.from(en).toString("base64url");function $e(en){try{return typeof Buffer.from("test").toString(en)=="string"}catch{return!1}}function w(en){let{deprecated:rn,since:an,until:nn,proposed:tn}=en,un=`[@faker-js/faker]: ${rn} is deprecated`;an&&(un+=` since v${an}`),nn&&(un+=` and will be removed in v${nn}`),tn&&(un+=`. Please use ${tn} instead`),console.warn(`${un}.`)}var Tr=Object.fromEntries([["А","A"],["а","a"],["Б","B"],["б","b"],["В","V"],["в","v"],["Г","G"],["г","g"],["Д","D"],["д","d"],["ъе","ye"],["Ъе","Ye"],["ъЕ","yE"],["ЪЕ","YE"],["Е","E"],["е","e"],["Ё","Yo"],["ё","yo"],["Ж","Zh"],["ж","zh"],["З","Z"],["з","z"],["И","I"],["и","i"],["ый","iy"],["Ый","Iy"],["ЫЙ","IY"],["ыЙ","iY"],["Й","Y"],["й","y"],["К","K"],["к","k"],["Л","L"],["л","l"],["М","M"],["м","m"],["Н","N"],["н","n"],["О","O"],["о","o"],["П","P"],["п","p"],["Р","R"],["р","r"],["С","S"],["с","s"],["Т","T"],["т","t"],["У","U"],["у","u"],["Ф","F"],["ф","f"],["Х","Kh"],["х","kh"],["Ц","Ts"],["ц","ts"],["Ч","Ch"],["ч","ch"],["Ш","Sh"],["ш","sh"],["Щ","Sch"],["щ","sch"],["Ъ",""],["ъ",""],["Ы","Y"],["ы","y"],["Ь",""],["ь",""],["Э","E"],["э","e"],["Ю","Yu"],["ю","yu"],["Я","Ya"],["я","ya"]]),Cr=Object.fromEntries([["α","a"],["β","v"],["γ","g"],["δ","d"],["ε","e"],["ζ","z"],["η","i"],["θ","th"],["ι","i"],["κ","k"],["λ","l"],["μ","m"],["ν","n"],["ξ","ks"],["ο","o"],["π","p"],["ρ","r"],["σ","s"],["τ","t"],["υ","y"],["φ","f"],["χ","x"],["ψ","ps"],["ω","o"],["ά","a"],["έ","e"],["ί","i"],["ό","o"],["ύ","y"],["ή","i"],["ώ","o"],["ς","s"],["ϊ","i"],["ΰ","y"],["ϋ","y"],["ΐ","i"],["Α","A"],["Β","B"],["Γ","G"],["Δ","D"],["Ε","E"],["Ζ","Z"],["Η","I"],["Θ","TH"],["Ι","I"],["Κ","K"],["Λ","L"],["Μ","M"],["Ν","N"],["Ξ","KS"],["Ο","O"],["Π","P"],["Ρ","R"],["Σ","S"],["Τ","T"],["Υ","Y"],["Φ","F"],["Χ","X"],["Ψ","PS"],["Ω","O"],["Ά","A"],["Έ","E"],["Ί","I"],["Ό","O"],["Ύ","Y"],["Ή","I"],["Ώ","O"],["Ϊ","I"],["Ϋ","Y"]]),Nr=Object.fromEntries([["ء","e"],["آ","a"],["أ","a"],["ؤ","w"],["إ","i"],["ئ","y"],["ا","a"],["ب","b"],["ة","t"],["ت","t"],["ث","th"],["ج","j"],["ح","h"],["خ","kh"],["د","d"],["ذ","dh"],["ر","r"],["ز","z"],["س","s"],["ش","sh"],["ص","s"],["ض","d"],["ط","t"],["ظ","z"],["ع","e"],["غ","gh"],["ـ","_"],["ف","f"],["ق","q"],["ك","k"],["ل","l"],["م","m"],["ن","n"],["ه","h"],["و","w"],["ى","a"],["ي","y"],["َ‎","a"],["ُ","u"],["ِ‎","i"]]),Dr=Object.fromEntries([["ա","a"],["Ա","A"],["բ","b"],["Բ","B"],["գ","g"],["Գ","G"],["դ","d"],["Դ","D"],["ե","ye"],["Ե","Ye"],["զ","z"],["Զ","Z"],["է","e"],["Է","E"],["ը","y"],["Ը","Y"],["թ","t"],["Թ","T"],["ժ","zh"],["Ժ","Zh"],["ի","i"],["Ի","I"],["լ","l"],["Լ","L"],["խ","kh"],["Խ","Kh"],["ծ","ts"],["Ծ","Ts"],["կ","k"],["Կ","K"],["հ","h"],["Հ","H"],["ձ","dz"],["Ձ","Dz"],["ղ","gh"],["Ղ","Gh"],["ճ","tch"],["Ճ","Tch"],["մ","m"],["Մ","M"],["յ","y"],["Յ","Y"],["ն","n"],["Ն","N"],["շ","sh"],["Շ","Sh"],["ո","vo"],["Ո","Vo"],["չ","ch"],["Չ","Ch"],["պ","p"],["Պ","P"],["ջ","j"],["Ջ","J"],["ռ","r"],["Ռ","R"],["ս","s"],["Ս","S"],["վ","v"],["Վ","V"],["տ","t"],["Տ","T"],["ր","r"],["Ր","R"],["ց","c"],["Ց","C"],["ու","u"],["ՈՒ","U"],["Ու","U"],["փ","p"],["Փ","P"],["ք","q"],["Ք","Q"],["օ","o"],["Օ","O"],["ֆ","f"],["Ֆ","F"],["և","yev"]]),Rr=Object.fromEntries([["چ","ch"],["ک","k"],["گ","g"],["پ","p"],["ژ","zh"],["ی","y"]]),Lr=Object.fromEntries([["א","a"],["ב","b"],["ג","g"],["ד","d"],["ה","h"],["ו","v"],["ז","z"],["ח","ch"],["ט","t"],["י","y"],["כ","k"],["ך","kh"],["ל","l"],["ם","m"],["מ","m"],["ן","n"],["נ","n"],["ס","s"],["ע","a"],["פ","f"],["ף","ph"],["צ","ts"],["ץ","ts"],["ק","k"],["ר","r"],["ש","sh"],["ת","t"],["ו","v"]]),ke={...Tr,...Cr,...Nr,...Rr,...Dr,...Lr},Pr=(en=>(en.Any="any",en.Loopback="loopback",en.PrivateA="private-a",en.PrivateB="private-b",en.PrivateC="private-c",en.TestNet1="test-net-1",en.TestNet2="test-net-2",en.TestNet3="test-net-3",en.LinkLocal="link-local",en.Multicast="multicast",en))(Pr||{}),Br={any:"0.0.0.0/0",loopback:"127.0.0.0/8","private-a":"10.0.0.0/8","private-b":"172.16.0.0/12","private-c":"192.168.0.0/16","test-net-1":"192.0.2.0/24","test-net-2":"198.51.100.0/24","test-net-3":"203.0.113.0/24","link-local":"169.254.0.0/16",multicast:"224.0.0.0/4"};function Ie(en){return/^[a-z][a-z-]*[a-z]$/i.exec(en)!==null}function _e(en,rn){let an=en.helpers.slugify(rn);if(Ie(an))return an;let nn=en.helpers.slugify(en.lorem.word());return Ie(nn)?nn:en.string.alpha({casing:"lower",length:en.number.int({min:4,max:8})})}function xe(en,rn){return Math.floor((en.number.int(256)+rn)/2).toString(16).padStart(2,"0")}var U=class extends p{email(en={}){let{firstName:rn,lastName:an,provider:nn=this.faker.helpers.arrayElement(this.faker.definitions.internet.free_email),allowSpecialCharacters:tn=!1}=en,un=this.username({firstName:rn,lastName:an});if(un=un.replaceAll(/[^A-Za-z0-9._+-]+/g,""),un=un.substring(0,50),tn){let ln=[..."._-"],dn=[...".!#$%&'*+-/=?^_`{|}~"];un=un.replace(this.faker.helpers.arrayElement(ln),this.faker.helpers.arrayElement(dn))}return un=un.replaceAll(/\.{2,}/g,"."),un=un.replace(/^\./,""),un=un.replace(/\.$/,""),`${un}@${nn}`}exampleEmail(en={}){let{firstName:rn,lastName:an,allowSpecialCharacters:nn=!1}=en,tn=this.faker.helpers.arrayElement(this.faker.definitions.internet.example_email);return this.email({firstName:rn,lastName:an,provider:tn,allowSpecialCharacters:nn})}userName(en={}){return w({deprecated:"faker.internet.userName()",proposed:"faker.internet.username()",since:"9.1.0",until:"10.0.0"}),this.username(en)}username(en={}){let{firstName:rn=this.faker.person.firstName(),lastName:an=this.faker.person.lastName(),lastName:nn}=en,tn=this.faker.helpers.arrayElement([".","_"]),un=this.faker.number.int(99),ln=[()=>`${rn}${tn}${an}${un}`,()=>`${rn}${tn}${an}`];nn||ln.push(()=>`${rn}${un}`);let dn=this.faker.helpers.arrayElement(ln)();return dn=dn.normalize("NFKD").replaceAll(/[\u0300-\u036F]/g,""),dn=[...dn].map(hn=>{if(ke[hn])return ke[hn];let cn=hn.codePointAt(0)??Number.NaN;return cn<128?hn:cn.toString(36)}).join(""),dn=dn.toString().replaceAll("'",""),dn=dn.replaceAll(" ",""),dn}displayName(en={}){let{firstName:rn=this.faker.person.firstName(),lastName:an=this.faker.person.lastName()}=en,nn=this.faker.helpers.arrayElement([".","_"]),tn=this.faker.number.int(99),un=[()=>`${rn}${tn}`,()=>`${rn}${nn}${an}`,()=>`${rn}${nn}${an}${tn}`],ln=this.faker.helpers.arrayElement(un)();return ln=ln.toString().replaceAll("'",""),ln=ln.replaceAll(" ",""),ln}protocol(){let en=["http","https"];return this.faker.helpers.arrayElement(en)}httpMethod(){let en=["GET","POST","PUT","DELETE","PATCH"];return this.faker.helpers.arrayElement(en)}httpStatusCode(en={}){let{types:rn=Object.keys(this.faker.definitions.internet.http_status_code)}=en,an=this.faker.helpers.arrayElement(rn);return this.faker.helpers.arrayElement(this.faker.definitions.internet.http_status_code[an])}url(en={}){let{appendSlash:rn=this.faker.datatype.boolean(),protocol:an="https"}=en;return`${an}://${this.domainName()}${rn?"/":""}`}domainName(){return`${this.domainWord()}.${this.domainSuffix()}`}domainSuffix(){return this.faker.helpers.arrayElement(this.faker.definitions.internet.domain_suffix)}domainWord(){let en=_e(this.faker,this.faker.word.adjective()),rn=_e(this.faker,this.faker.word.noun());return`${en}-${rn}`.toLowerCase()}ip(){return this.faker.datatype.boolean()?this.ipv4():this.ipv6()}ipv4(en={}){let{network:rn="any",cidrBlock:an=Br[rn]}=en;if(!/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2}$/.test(an))throw new m(`Invalid CIDR block provided: ${an}. Must be in the format x.x.x.x/y.`);let[nn,tn]=an.split("/"),un=4294967295>>>Number.parseInt(tn),[ln,dn,hn,cn]=nn.split(".").map(Number),Fn=(ln<<24|dn<<16|hn<<8|cn)&~un,yn=this.faker.number.int(un),gn=Fn|yn;return[gn>>>24&255,gn>>>16&255,gn>>>8&255,gn&255].join(".")}ipv6(){return Array.from({length:8},()=>this.faker.string.hexadecimal({length:4,casing:"lower",prefix:""})).join(":")}port(){return this.faker.number.int(65535)}userAgent(){return this.faker.helpers.fake(this.faker.definitions.internet.user_agent_pattern)}color(en={}){w({deprecated:"faker.internet.color()",proposed:"faker.color.rgb()",since:"9.6.0",until:"10.0.0"});let{redBase:rn=0,greenBase:an=0,blueBase:nn=0}=en,tn=xe(this.faker,rn),un=xe(this.faker,an),ln=xe(this.faker,nn);return`#${tn}${un}${ln}`}mac(en={}){typeof en=="string"&&(en={separator:en});let{separator:rn=":"}=en,an,nn="";for([":","-",""].includes(rn)||(rn=":"),an=0;an<12;an++)nn+=this.faker.number.hex(15),an%2===1&&an!==11&&(nn+=rn);return nn}password(en={}){let rn=/[aeiouAEIOU]$/,an=/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/,nn=(hn,cn,Fn,yn)=>{if(yn.length>=hn)return yn;cn&&(Fn=an.test(yn)?rn:an);let gn=this.faker.number.int(94)+33,bn=String.fromCodePoint(gn);return cn&&(bn=bn.toLowerCase()),Fn.test(bn)?nn(hn,cn,Fn,yn+bn):nn(hn,cn,Fn,yn)},{length:tn=15,memorable:un=!1,pattern:ln=/\w/,prefix:dn=""}=en;return nn(tn,un,ln,dn)}emoji(en={}){let{types:rn=Object.keys(this.faker.definitions.internet.emoji)}=en,an=this.faker.helpers.arrayElement(rn);return this.faker.helpers.arrayElement(this.faker.definitions.internet.emoji[an])}jwtAlgorithm(){return this.faker.helpers.arrayElement(this.faker.definitions.internet.jwt_algorithm)}jwt(en={}){let{refDate:rn=this.faker.defaultRefDate()}=en,an=this.faker.date.recent({refDate:rn}),{header:nn={alg:this.jwtAlgorithm(),typ:"JWT"},payload:tn={iat:Math.round(an.valueOf()/1e3),exp:Math.round(this.faker.date.soon({refDate:an}).valueOf()/1e3),nbf:Math.round(this.faker.date.anytime({refDate:rn}).valueOf()/1e3),iss:this.faker.company.name(),sub:this.faker.string.uuid(),aud:this.faker.string.uuid(),jti:this.faker.string.uuid()}}=en,un=ye(JSON.stringify(nn)),ln=ye(JSON.stringify(tn)),dn=this.faker.string.alphanumeric(64);return`${un}.${ln}.${dn}`}},Fe=(en=>(en.Female="female",en.Male="male",en))(Fe||{});function R(en,rn,an){let{generic:nn,female:tn,male:un}=an;switch(rn){case"female":return tn??nn;case"male":return un??nn;default:return nn??en.helpers.arrayElement([tn,un])??[]}}var K=class extends p{firstName(en){return this.faker.helpers.arrayElement(R(this.faker,en,this.faker.definitions.person.first_name))}lastName(en){if(this.faker.rawDefinitions.person?.last_name_pattern!=null){let rn=this.faker.helpers.weightedArrayElement(R(this.faker,en,this.faker.rawDefinitions.person.last_name_pattern));return this.faker.helpers.fake(rn)}return this.faker.helpers.arrayElement(R(this.faker,en,this.faker.definitions.person.last_name))}middleName(en){return this.faker.helpers.arrayElement(R(this.faker,en,this.faker.definitions.person.middle_name))}fullName(en={}){let{sex:rn=this.faker.helpers.arrayElement(["female","male"]),firstName:an=this.firstName(rn),lastName:nn=this.lastName(rn)}=en,tn=this.faker.helpers.weightedArrayElement(this.faker.definitions.person.name);return this.faker.helpers.mustache(tn,{"person.prefix":()=>this.prefix(rn),"person.firstName":()=>an,"person.middleName":()=>this.middleName(rn),"person.lastName":()=>nn,"person.suffix":()=>this.suffix()})}gender(){return this.faker.helpers.arrayElement(this.faker.definitions.person.gender)}sex(){return this.faker.helpers.arrayElement(this.faker.definitions.person.sex)}sexType(){return this.faker.helpers.enumValue(Fe)}bio(){let{bio_pattern:en}=this.faker.definitions.person;return this.faker.helpers.fake(en)}prefix(en){return this.faker.helpers.arrayElement(R(this.faker,en,this.faker.definitions.person.prefix))}suffix(){return this.faker.helpers.arrayElement(this.faker.definitions.person.suffix)}jobTitle(){return this.faker.helpers.fake(this.faker.definitions.person.job_title_pattern)}jobDescriptor(){return this.faker.helpers.arrayElement(this.faker.definitions.person.job_descriptor)}jobArea(){return this.faker.helpers.arrayElement(this.faker.definitions.person.job_area)}jobType(){return this.faker.helpers.arrayElement(this.faker.definitions.person.job_type)}zodiacSign(){return this.faker.helpers.arrayElement(this.faker.definitions.person.western_zodiac_sign)}},vr=23283064365386963e-26,$r=1/9007199254740992,{imul:Ee,trunc:we}=Math;function Ge(en){return typeof en=="number"?Oe(en):Ir(en)}function Oe(en){let rn=Array.from({length:624});rn[0]=en;for(let an=1;an!==624;++an){let nn=rn[an-1]^rn[an-1]>>>30;rn[an]=we(Ee(1812433253,nn)+an)}return rn}function Ir(en){let rn=Oe(19650218),an=1,nn=0;for(let tn=Math.max(624,en.length);tn!==0;--tn){let un=rn[an-1]^rn[an-1]>>>30;rn[an]=we((rn[an]^Ee(un,1664525))+en[nn]+nn),an++,nn++,an>=624&&(rn[0]=rn[623],an=1),nn>=en.length&&(nn=0)}for(let tn=623;tn!==0;tn--)rn[an]=we((rn[an]^Ee(rn[an-1]^rn[an-1]>>>30,1566083941))-an),an++,an>=624&&(rn[0]=rn[623],an=1);return rn[0]=2147483648,rn}function Ae(en){for(let an=0;an!==227;++an){let nn=(en[an]&2147483648)+(en[an+1]&2147483647);en[an]=en[an+397]^nn>>>1^-(nn&1)&2567483615}for(let an=227;an!==623;++an){let nn=(en[an]&2147483648)+(en[an+1]&2147483647);en[an]=en[an+397-624]^nn>>>1^-(nn&1)&2567483615}let rn=(en[623]&2147483648)+(en[0]&2147483647);return en[623]=en[396]^rn>>>1^-(rn&1)&2567483615,en}var L=class{constructor(en=Math.random()*Number.MAX_SAFE_INTEGER,rn=Ae(Ge(en)),an=0){this.states=rn,this.index=an}nextU32(){let en=this.states[this.index];return en^=this.states[this.index]>>>11,en^=en<<7&2636928640,en^=en<<15&4022730752,en^=en>>>18,++this.index>=624&&(this.states=Ae(this.states),this.index=0),en>>>0}nextF32(){return this.nextU32()*vr}nextU53(){let en=this.nextU32()>>>5,rn=this.nextU32()>>>6;return en*67108864+rn}nextF53(){return this.nextU53()*$r}seed(en){this.states=Ae(Ge(en)),this.index=0}};function P(){return Math.ceil(Math.random()*Number.MAX_SAFE_INTEGER)}function Ue(en=P()){let rn=new L(en);return{next(){return rn.nextF53()},seed(an){rn.seed(an)}}}var j=class extends x{boolean(en={}){typeof en=="number"&&(en={probability:en});let{probability:rn=.5}=en;return rn<=0?!1:rn>=1?!0:this.faker.number.float()<rn}};function S(en,rn="refDate"){let an=new Date(en);if(Number.isNaN(an.valueOf()))throw new m(`Invalid ${rn} date: ${en.toString()}`);return an}var H=()=>{throw new m("You cannot edit the locale data on the faker instance")};function Ke(en){let rn={};return new Proxy(en,{has(){return!0},get(an,nn){return typeof nn=="symbol"||nn==="nodeType"?an[nn]:nn in rn?rn[nn]:rn[nn]=_r(nn,an[nn])},set:H,deleteProperty:H})}function V(en,...rn){if(en===null)throw new m(`The locale data for '${rn.join(".")}' aren't applicable to this locale.
  If you think this is a bug, please report it at: https://github.com/faker-js/faker`);if(en===void 0)throw new m(`The locale data for '${rn.join(".")}' are missing in this locale.
  If this is a custom Faker instance, please make sure all required locales are used e.g. '[de_AT, de, en, base]'.
  Please contribute the missing data to the project or use a locale/Faker instance that has these data.
  For more information see https://fakerjs.dev/guide/localization.html`)}function _r(en,rn={}){return new Proxy(rn,{has(an,nn){return an[nn]!=null},get(an,nn){let tn=an[nn];return typeof nn=="symbol"||nn==="nodeType"||V(tn,en,nn.toString()),tn},set:H,deleteProperty:H})}var B=class extends x{anytime(en={}){let{refDate:rn=this.faker.defaultRefDate()}=en,an=S(rn).getTime();return this.between({from:an-1e3*60*60*24*365,to:an+1e3*60*60*24*365})}past(en={}){let{years:rn=1,refDate:an=this.faker.defaultRefDate()}=en;if(rn<=0)throw new m("Years must be greater than 0.");let nn=S(an).getTime();return this.between({from:nn-rn*365*24*3600*1e3,to:nn-1e3})}future(en={}){let{years:rn=1,refDate:an=this.faker.defaultRefDate()}=en;if(rn<=0)throw new m("Years must be greater than 0.");let nn=S(an).getTime();return this.between({from:nn+1e3,to:nn+rn*365*24*3600*1e3})}between(en){if(en==null||en.from==null||en.to==null)throw new m("Must pass an options object with `from` and `to` values.");let{from:rn,to:an}=en,nn=S(rn,"from").getTime(),tn=S(an,"to").getTime();if(nn>tn)throw new m("`from` date must be before `to` date.");return new Date(this.faker.number.int({min:nn,max:tn}))}betweens(en){if(en==null||en.from==null||en.to==null)throw new m("Must pass an options object with `from` and `to` values.");let{from:rn,to:an,count:nn=3}=en;return this.faker.helpers.multiple(()=>this.between({from:rn,to:an}),{count:nn}).sort((tn,un)=>tn.getTime()-un.getTime())}recent(en={}){let{days:rn=1,refDate:an=this.faker.defaultRefDate()}=en;if(rn<=0)throw new m("Days must be greater than 0.");let nn=S(an).getTime();return this.between({from:nn-rn*24*3600*1e3,to:nn-1e3})}soon(en={}){let{days:rn=1,refDate:an=this.faker.defaultRefDate()}=en;if(rn<=0)throw new m("Days must be greater than 0.");let nn=S(an).getTime();return this.between({from:nn+1e3,to:nn+rn*24*3600*1e3})}birthdate(en={}){let{mode:rn="age",min:an=18,max:nn=80,refDate:tn=this.faker.defaultRefDate(),mode:un,min:ln,max:dn}=en;if([ln,dn,un].filter(Fn=>Fn!=null).length%3!==0)throw new m("The 'min', 'max', and 'mode' options must be set together.");let hn=S(tn),cn=hn.getUTCFullYear();switch(rn){case"age":{let Fn=new Date(hn).setUTCFullYear(cn-nn-1)+864e5,yn=new Date(hn).setUTCFullYear(cn-an);if(Fn>yn)throw new m(`Max age ${nn} should be greater than or equal to min age ${an}.`);return this.between({from:Fn,to:yn})}case"year":{let Fn=new Date(Date.UTC(0,0,2)).setUTCFullYear(an),yn=new Date(Date.UTC(0,11,30)).setUTCFullYear(nn);if(Fn>yn)throw new m(`Max year ${nn} should be greater than or equal to min year ${an}.`);return this.between({from:Fn,to:yn})}}}},z=class extends B{constructor(en){super(en),this.faker=en}month(en={}){let{abbreviated:rn=!1,context:an=!1}=en,nn=this.faker.definitions.date.month,tn;rn?tn=an&&nn.abbr_context!=null?"abbr_context":"abbr":tn=an&&nn.wide_context!=null?"wide_context":"wide";let un=nn[tn];return V(un,"date.month",tn),this.faker.helpers.arrayElement(un)}weekday(en={}){let{abbreviated:rn=!1,context:an=!1}=en,nn=this.faker.definitions.date.weekday,tn;rn?tn=an&&nn.abbr_context!=null?"abbr_context":"abbr":tn=an&&nn.wide_context!=null?"wide_context":"wide";let un=nn[tn];return V(un,"date.weekday",tn),this.faker.helpers.arrayElement(un)}timeZone(){return this.faker.helpers.arrayElement(this.faker.definitions.date.time_zone)}},Fr=/\.|\(/;function je(en,rn,an=[rn,rn.rawDefinitions]){if(en.length===0)throw new m("Eval expression cannot be empty.");if(an.length===0)throw new m("Eval entrypoints cannot be empty.");let nn=an,tn=en;do{let ln;tn.startsWith("(")?[ln,nn]=Gr(tn,nn,en):[ln,nn]=Ur(tn,nn),tn=tn.substring(ln),nn=nn.filter(dn=>dn!=null).map(dn=>Array.isArray(dn)?rn.helpers.arrayElement(dn):dn)}while(tn.length>0&&nn.length>0);if(nn.length===0)throw new m(`Cannot resolve expression '${en}'`);let un=nn[0];return typeof un=="function"?un():un}function Gr(en,rn,an){let[nn,tn]=Or(en),un=en[nn+1];switch(un){case".":case"(":case void 0:break;default:throw new m(`Expected dot ('.'), open parenthesis ('('), or nothing after function call but got '${un}'`)}return[nn+(un==="."?2:1),rn.map(ln=>typeof ln=="function"?ln(...tn):(console.warn(`[@faker-js/faker]: Invoking expressions which are not functions is deprecated since v9.0 and will be removed in v10.0.
Please remove the parentheses or replace the expression with an actual function.
${an}
${" ".repeat(an.length-en.length)}^`),ln))]}function Or(en){let rn=en.indexOf(")",1);if(rn===-1)throw new m(`Missing closing parenthesis in '${en}'`);for(;rn!==-1;){let nn=en.substring(1,rn);try{return[rn,JSON.parse(`[${nn}]`)]}catch{if(!nn.includes("'")&&!nn.includes('"'))try{return[rn,JSON.parse(`["${nn}"]`)]}catch{}}rn=en.indexOf(")",rn+1)}rn=en.lastIndexOf(")");let an=en.substring(1,rn);return[rn,[an]]}function Ur(en,rn){let an=Fr.exec(en),nn=(an?.[0]??"")===".",tn=an?.index??en.length,un=en.substring(0,tn);if(un.length===0)throw new m(`Expression parts cannot be empty in '${en}'`);let ln=en[tn+1];if(nn&&(ln==null||ln==="."||ln==="("))throw new m(`Found dot without property name in '${en}'`);return[tn+(nn?1:0),rn.map(dn=>Kr(dn,un))]}function Kr(en,rn){switch(typeof en){case"function":{try{en=en()}catch{return}return en?.[rn]}case"object":return en?.[rn];default:return}}function He(en){let rn=jr(en.replace(/L?$/,"0"));return rn===0?0:10-rn}function jr(en){en=en.replaceAll(/[\s-]/g,"");let rn=0,an=!1;for(let nn=en.length-1;nn>=0;nn--){let tn=Number.parseInt(en[nn]);an&&(tn*=2,tn>9&&(tn=tn%10+1)),rn+=tn,an=!an}return rn%10}function Ve(en,rn,an,nn){let tn=1;if(rn)switch(rn){case"?":{tn=en.datatype.boolean()?0:1;break}case"*":{let un=1;for(;en.datatype.boolean();)un*=2;tn=en.number.int({min:0,max:un});break}case"+":{let un=1;for(;en.datatype.boolean();)un*=2;tn=en.number.int({min:1,max:un});break}default:throw new m("Unknown quantifier symbol provided.")}else an!=null&&nn!=null?tn=en.number.int({min:Number.parseInt(an),max:Number.parseInt(nn)}):an!=null&&nn==null&&(tn=Number.parseInt(an));return tn}function Hr(en,rn=""){let an=/(.)\{(\d+),(\d+)\}/,nn=/(.)\{(\d+)\}/,tn=/\[(\d+)-(\d+)\]/,un,ln,dn,hn,cn=an.exec(rn);for(;cn!=null;)un=Number.parseInt(cn[2]),ln=Number.parseInt(cn[3]),un>ln&&(dn=ln,ln=un,un=dn),hn=en.number.int({min:un,max:ln}),rn=rn.slice(0,cn.index)+cn[1].repeat(hn)+rn.slice(cn.index+cn[0].length),cn=an.exec(rn);for(cn=nn.exec(rn);cn!=null;)hn=Number.parseInt(cn[2]),rn=rn.slice(0,cn.index)+cn[1].repeat(hn)+rn.slice(cn.index+cn[0].length),cn=nn.exec(rn);for(cn=tn.exec(rn);cn!=null;)un=Number.parseInt(cn[1]),ln=Number.parseInt(cn[2]),un>ln&&(dn=ln,ln=un,un=dn),rn=rn.slice(0,cn.index)+en.number.int({min:un,max:ln}).toString()+rn.slice(cn.index+cn[0].length),cn=tn.exec(rn);return rn}function Se(en,rn="",an="#"){let nn="";for(let tn=0;tn<rn.length;tn++)rn.charAt(tn)===an?nn+=en.number.int(9):rn.charAt(tn)==="!"?nn+=en.number.int({min:2,max:9}):nn+=rn.charAt(tn);return nn}var v=class extends x{slugify(en=""){return en.normalize("NFKD").replaceAll(/[\u0300-\u036F]/g,"").replaceAll(" ","-").replaceAll(/[^\w.-]+/g,"")}replaceSymbols(en=""){let rn=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],an="";for(let nn=0;nn<en.length;nn++)en.charAt(nn)==="#"?an+=this.faker.number.int(9):en.charAt(nn)==="?"?an+=this.arrayElement(rn):en.charAt(nn)==="*"?an+=this.faker.datatype.boolean()?this.arrayElement(rn):this.faker.number.int(9):an+=en.charAt(nn);return an}replaceCreditCardSymbols(en="6453-####-####-####-###L",rn="#"){en=Hr(this.faker,en),en=Se(this.faker,en,rn);let an=He(en);return en.replace("L",String(an))}fromRegExp(en){let rn=!1;en instanceof RegExp&&(rn=en.flags.includes("i"),en=en.toString(),en=/\/(.+?)\//.exec(en)?.[1]??"");let an,nn,tn,un=/([.A-Za-z0-9])(?:\{(\d+)(?:,(\d+)|)\}|(\?|\*|\+))(?![^[]*]|[^{]*})/,ln=un.exec(en);for(;ln!=null;){let yn=ln[2],gn=ln[3],bn=ln[4];tn=Ve(this.faker,bn,yn,gn);let pn;ln[1]==="."?pn=this.faker.string.alphanumeric(tn):rn?pn=this.faker.string.fromCharacters([ln[1].toLowerCase(),ln[1].toUpperCase()],tn):pn=ln[1].repeat(tn),en=en.slice(0,ln.index)+pn+en.slice(ln.index+ln[0].length),ln=un.exec(en)}let dn=/(\d-\d|\w-\w|\d|\w|[-!@#$&()`.+,/"])/,hn=/\[(\^|)(-|)(.+?)\](?:\{(\d+)(?:,(\d+)|)\}|(\?|\*|\+)|)/;for(ln=hn.exec(en);ln!=null;){let yn=ln[1]==="^",gn=ln[2]==="-",bn=ln[4],pn=ln[5],fn=ln[6],Cn=[],Sn=ln[3],Gn=dn.exec(Sn);for(gn&&Cn.push(45);Gn!=null;){if(Gn[0].includes("-")){let Mn=Gn[0].split("-").map(Tn=>Tn.codePointAt(0)??Number.NaN);if(an=Mn[0],nn=Mn[1],an>nn)throw new m("Character range provided is out of order.");for(let Tn=an;Tn<=nn;Tn++)if(rn&&Number.isNaN(Number(String.fromCodePoint(Tn)))){let In=String.fromCodePoint(Tn);Cn.push(In.toUpperCase().codePointAt(0)??Number.NaN,In.toLowerCase().codePointAt(0)??Number.NaN)}else Cn.push(Tn)}else rn&&Number.isNaN(Number(Gn[0]))?Cn.push(Gn[0].toUpperCase().codePointAt(0)??Number.NaN,Gn[0].toLowerCase().codePointAt(0)??Number.NaN):Cn.push(Gn[0].codePointAt(0)??Number.NaN);Sn=Sn.substring(Gn[0].length),Gn=dn.exec(Sn)}if(tn=Ve(this.faker,fn,bn,pn),yn){let Mn=-1;for(let Tn=48;Tn<=57;Tn++){if(Mn=Cn.indexOf(Tn),Mn>-1){Cn.splice(Mn,1);continue}Cn.push(Tn)}for(let Tn=65;Tn<=90;Tn++){if(Mn=Cn.indexOf(Tn),Mn>-1){Cn.splice(Mn,1);continue}Cn.push(Tn)}for(let Tn=97;Tn<=122;Tn++){if(Mn=Cn.indexOf(Tn),Mn>-1){Cn.splice(Mn,1);continue}Cn.push(Tn)}}let Jn=this.multiple(()=>String.fromCodePoint(this.arrayElement(Cn)),{count:tn}).join("");en=en.slice(0,ln.index)+Jn+en.slice(ln.index+ln[0].length),ln=hn.exec(en)}let cn=/(.)\{(\d+),(\d+)\}/;for(ln=cn.exec(en);ln!=null;){if(an=Number.parseInt(ln[2]),nn=Number.parseInt(ln[3]),an>nn)throw new m("Numbers out of order in {} quantifier.");tn=this.faker.number.int({min:an,max:nn}),en=en.slice(0,ln.index)+ln[1].repeat(tn)+en.slice(ln.index+ln[0].length),ln=cn.exec(en)}let Fn=/(.)\{(\d+)\}/;for(ln=Fn.exec(en);ln!=null;)tn=Number.parseInt(ln[2]),en=en.slice(0,ln.index)+ln[1].repeat(tn)+en.slice(ln.index+ln[0].length),ln=Fn.exec(en);return en}shuffle(en,rn={}){let{inplace:an=!1}=rn;an||(en=[...en]);for(let nn=en.length-1;nn>0;--nn){let tn=this.faker.number.int(nn);[en[nn],en[tn]]=[en[tn],en[nn]]}return en}uniqueArray(en,rn){if(Array.isArray(en)){let nn=[...new Set(en)];return this.shuffle(nn).splice(0,rn)}let an=new Set;try{if(typeof en=="function"){let nn=1e3*rn,tn=0;for(;an.size<rn&&tn<nn;)an.add(en()),tn++}}catch{}return[...an]}mustache(en,rn){if(en==null)return"";for(let an in rn){let nn=new RegExp(`{{${an}}}`,"g"),tn=rn[an];typeof tn=="string"&&(tn=tn.replaceAll("$","$$$$")),en=en.replace(nn,tn)}return en}maybe(en,rn={}){if(this.faker.datatype.boolean(rn))return en()}objectKey(en){let rn=Object.keys(en);return this.arrayElement(rn)}objectValue(en){let rn=this.faker.helpers.objectKey(en);return en[rn]}objectEntry(en){let rn=this.faker.helpers.objectKey(en);return[rn,en[rn]]}arrayElement(en){if(en.length===0)throw new m("Cannot get value from empty dataset.");let rn=en.length>1?this.faker.number.int({max:en.length-1}):0;return en[rn]}weightedArrayElement(en){if(en.length===0)throw new m("weightedArrayElement expects an array with at least one element");if(!en.every(tn=>tn.weight>0))throw new m("weightedArrayElement expects an array of { weight, value } objects where weight is a positive number");let rn=en.reduce((tn,{weight:un})=>tn+un,0),an=this.faker.number.float({min:0,max:rn}),nn=0;for(let{weight:tn,value:un}of en)if(nn+=tn,an<nn)return un;return en.at(-1).value}arrayElements(en,rn){if(en.length===0)return[];let an=this.rangeToNumber(rn??{min:1,max:en.length});if(an>=en.length)return this.shuffle(en);if(an<=0)return[];let nn=[...en],tn=en.length,un=tn-an,ln,dn;for(;tn-- >un;)dn=this.faker.number.int(tn),ln=nn[dn],nn[dn]=nn[tn],nn[tn]=ln;return nn.slice(un)}enumValue(en){let rn=Object.keys(en).filter(nn=>Number.isNaN(Number(nn))),an=this.arrayElement(rn);return en[an]}rangeToNumber(en){return typeof en=="number"?en:this.faker.number.int(en)}multiple(en,rn={}){let an=this.rangeToNumber(rn.count??3);return an<=0?[]:Array.from({length:an},en)}},W=class extends v{constructor(en){super(en),this.faker=en}fake(en){en=typeof en=="string"?en:this.arrayElement(en);let rn=en.search(/{{[a-z]/),an=en.indexOf("}}",rn);if(rn===-1||an===-1)return en;let nn=en.substring(rn+2,an+2).replace("}}","").replace("{{",""),tn=je(nn,this.faker),un=String(tn),ln=en.substring(0,rn)+un+en.substring(an+2);return this.fake(ln)}},$=class extends x{latitude(en={}){let{max:rn=90,min:an=-90,precision:nn=4}=en;return this.faker.number.float({min:an,max:rn,fractionDigits:nn})}longitude(en={}){let{max:rn=180,min:an=-180,precision:nn=4}=en;return this.faker.number.float({max:rn,min:an,fractionDigits:nn})}nearbyGPSCoordinate(en={}){let{origin:rn,radius:an=10,isMetric:nn=!1}=en;if(rn==null)return[this.latitude(),this.longitude()];let tn=this.faker.number.float({max:2*Math.PI,fractionDigits:5}),un=nn?an:an*1.60934,ln=this.faker.number.float({max:un,fractionDigits:3})*.995,dn=4e4/360,hn=ln/dn,cn=[rn[0]+Math.sin(tn)*hn,rn[1]+Math.cos(tn)*hn];return cn[0]=cn[0]%180,(cn[0]<-90||cn[0]>90)&&(cn[0]=Math.sign(cn[0])*180-cn[0],cn[1]+=180),cn[1]=(cn[1]%360+540)%360-180,[cn[0],cn[1]]}},Y=class extends ${constructor(en){super(en),this.faker=en}zipCode(en={}){typeof en=="string"&&(en={format:en});let{state:rn}=en;if(rn!=null){let nn=this.faker.definitions.location.postcode_by_state[rn];if(nn==null)throw new m(`No zip code definition found for state "${rn}"`);return this.faker.helpers.fake(nn)}let{format:an=this.faker.definitions.location.postcode}=en;return typeof an=="string"&&(an=[an]),an=this.faker.helpers.arrayElement(an),this.faker.helpers.replaceSymbols(an)}city(){return this.faker.helpers.fake(this.faker.definitions.location.city_pattern)}buildingNumber(){return this.faker.helpers.arrayElement(this.faker.definitions.location.building_number).replaceAll(/#+/g,en=>this.faker.string.numeric({length:en.length,allowLeadingZeros:!1}))}street(){return this.faker.helpers.fake(this.faker.definitions.location.street_pattern)}streetAddress(en={}){typeof en=="boolean"&&(en={useFullAddress:en});let{useFullAddress:rn}=en,an=this.faker.definitions.location.street_address[rn?"full":"normal"];return this.faker.helpers.fake(an)}secondaryAddress(){return this.faker.helpers.fake(this.faker.definitions.location.secondary_address).replaceAll(/#+/g,en=>this.faker.string.numeric({length:en.length,allowLeadingZeros:!1}))}county(){return this.faker.helpers.arrayElement(this.faker.definitions.location.county)}country(){return this.faker.helpers.arrayElement(this.faker.definitions.location.country)}continent(){return this.faker.helpers.arrayElement(this.faker.definitions.location.continent)}countryCode(en={}){typeof en=="string"&&(en={variant:en});let{variant:rn="alpha-2"}=en,an=(()=>{switch(rn){case"numeric":return"numeric";case"alpha-3":return"alpha3";case"alpha-2":return"alpha2"}})();return this.faker.helpers.arrayElement(this.faker.definitions.location.country_code)[an]}state(en={}){let{abbreviated:rn=!1}=en,an=rn?this.faker.definitions.location.state_abbr:this.faker.definitions.location.state;return this.faker.helpers.arrayElement(an)}direction(en={}){let{abbreviated:rn=!1}=en;return rn?this.faker.helpers.arrayElement([...this.faker.definitions.location.direction.cardinal_abbr,...this.faker.definitions.location.direction.ordinal_abbr]):this.faker.helpers.arrayElement([...this.faker.definitions.location.direction.cardinal,...this.faker.definitions.location.direction.ordinal])}cardinalDirection(en={}){let{abbreviated:rn=!1}=en;return rn?this.faker.helpers.arrayElement(this.faker.definitions.location.direction.cardinal_abbr):this.faker.helpers.arrayElement(this.faker.definitions.location.direction.cardinal)}ordinalDirection(en={}){let{abbreviated:rn=!1}=en;return rn?this.faker.helpers.arrayElement(this.faker.definitions.location.direction.ordinal_abbr):this.faker.helpers.arrayElement(this.faker.definitions.location.direction.ordinal)}timeZone(){return this.faker.helpers.arrayElement(this.faker.definitions.location.time_zone)}language(){return this.faker.helpers.arrayElement(this.faker.definitions.location.language)}},Z=class extends x{int(en={}){typeof en=="number"&&(en={max:en});let{min:rn=0,max:an=Number.MAX_SAFE_INTEGER,multipleOf:nn=1}=en;if(!Number.isInteger(nn))throw new m("multipleOf should be an integer.");if(nn<=0)throw new m("multipleOf should be greater than 0.");let tn=Math.ceil(rn/nn),un=Math.floor(an/nn);if(tn===un)return tn*nn;if(un<tn)throw an>=rn?new m(`No suitable integer value between ${rn} and ${an} found.`):new m(`Max ${an} should be greater than min ${rn}.`);let ln=this.faker._randomizer.next(),dn=un-tn+1;return Math.floor(ln*dn+tn)*nn}float(en={}){typeof en=="number"&&(en={max:en});let{min:rn=0,max:an=1,fractionDigits:nn,multipleOf:tn,multipleOf:un=nn==null?void 0:10**-nn}=en;if(an<rn)throw new m(`Max ${an} should be greater than min ${rn}.`);if(nn!=null){if(tn!=null)throw new m("multipleOf and fractionDigits cannot be set at the same time.");if(!Number.isInteger(nn))throw new m("fractionDigits should be an integer.");if(nn<0)throw new m("fractionDigits should be greater than or equal to 0.")}if(un!=null){if(un<=0)throw new m("multipleOf should be greater than 0.");let ln=Math.log10(un),dn=un<1&&Number.isInteger(ln)?10**-ln:1/un;return this.int({min:rn*dn,max:an*dn})/dn}return this.faker._randomizer.next()*(an-rn)+rn}binary(en={}){typeof en=="number"&&(en={max:en});let{min:rn=0,max:an=1}=en;return this.int({max:an,min:rn}).toString(2)}octal(en={}){typeof en=="number"&&(en={max:en});let{min:rn=0,max:an=7}=en;return this.int({max:an,min:rn}).toString(8)}hex(en={}){typeof en=="number"&&(en={max:en});let{min:rn=0,max:an=15}=en;return this.int({max:an,min:rn}).toString(16)}bigInt(en={}){(typeof en=="bigint"||typeof en=="number"||typeof en=="string"||typeof en=="boolean")&&(en={max:en});let rn=BigInt(en.min??0),an=BigInt(en.max??rn+BigInt(999999999999999)),nn=BigInt(en.multipleOf??1);if(an<rn)throw new m(`Max ${an} should be larger than min ${rn}.`);if(nn<=BigInt(0))throw new m("multipleOf should be greater than 0.");let tn=rn/nn+(rn%nn>0n?1n:0n),un=an/nn-(an%nn<0n?1n:0n);if(tn===un)return tn*nn;if(un<tn)throw new m(`No suitable bigint value between ${rn} and ${an} found.`);let ln=un-tn+1n,dn=BigInt(this.faker.string.numeric({length:ln.toString(10).length,allowLeadingZeros:!0}))%ln;return(tn+dn)*nn}romanNumeral(en={}){typeof en=="number"&&(en={max:en});let{min:rn=1,max:an=3999}=en;if(rn<1)throw new m(`Min value ${rn} should be 1 or greater.`);if(an>3999)throw new m(`Max value ${an} should be 3999 or less.`);let nn=this.int({min:rn,max:an}),tn=[["M",1e3],["CM",900],["D",500],["CD",400],["C",100],["XC",90],["L",50],["XL",40],["X",10],["IX",9],["V",5],["IV",4],["I",1]],un="";for(let[ln,dn]of tn)un+=ln.repeat(Math.floor(nn/dn)),nn%=dn;return un}},Me="0123456789ABCDEFGHJKMNPQRSTVWXYZ";function ze(en){let rn=en.valueOf(),an="";for(let nn=10;nn>0;nn--){let tn=rn%32;an=Me[tn]+an,rn=(rn-tn)/32}return an}var J=[..."ABCDEFGHIJKLMNOPQRSTUVWXYZ"],X=[..."abcdefghijklmnopqrstuvwxyz"],We=[..."0123456789"],Q=class extends x{fromCharacters(en,rn=1){if(rn=this.faker.helpers.rangeToNumber(rn),rn<=0)return"";if(typeof en=="string"&&(en=[...en]),en.length===0)throw new m("Unable to generate string: No characters to select from.");return this.faker.helpers.multiple(()=>this.faker.helpers.arrayElement(en),{count:rn}).join("")}alpha(en={}){typeof en=="number"&&(en={length:en});let rn=this.faker.helpers.rangeToNumber(en.length??1);if(rn<=0)return"";let{casing:an="mixed"}=en,{exclude:nn=[]}=en;typeof nn=="string"&&(nn=[...nn]);let tn;switch(an){case"upper":{tn=[...J];break}case"lower":{tn=[...X];break}case"mixed":{tn=[...X,...J];break}}return tn=tn.filter(un=>!nn.includes(un)),this.fromCharacters(tn,rn)}alphanumeric(en={}){typeof en=="number"&&(en={length:en});let rn=this.faker.helpers.rangeToNumber(en.length??1);if(rn<=0)return"";let{casing:an="mixed"}=en,{exclude:nn=[]}=en;typeof nn=="string"&&(nn=[...nn]);let tn=[...We];switch(an){case"upper":{tn.push(...J);break}case"lower":{tn.push(...X);break}case"mixed":{tn.push(...X,...J);break}}return tn=tn.filter(un=>!nn.includes(un)),this.fromCharacters(tn,rn)}binary(en={}){let{prefix:rn="0b"}=en,an=rn;return an+=this.fromCharacters(["0","1"],en.length??1),an}octal(en={}){let{prefix:rn="0o"}=en,an=rn;return an+=this.fromCharacters(["0","1","2","3","4","5","6","7"],en.length??1),an}hexadecimal(en={}){let{casing:rn="mixed",prefix:an="0x"}=en,nn=this.faker.helpers.rangeToNumber(en.length??1);if(nn<=0)return an;let tn=this.fromCharacters(["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","A","B","C","D","E","F"],nn);return rn==="upper"?tn=tn.toUpperCase():rn==="lower"&&(tn=tn.toLowerCase()),`${an}${tn}`}numeric(en={}){typeof en=="number"&&(en={length:en});let rn=this.faker.helpers.rangeToNumber(en.length??1);if(rn<=0)return"";let{allowLeadingZeros:an=!0}=en,{exclude:nn=[]}=en;typeof nn=="string"&&(nn=[...nn]);let tn=We.filter(ln=>!nn.includes(ln));if(tn.length===0||tn.length===1&&!an&&tn[0]==="0")throw new m("Unable to generate numeric string, because all possible digits are excluded.");let un="";return!an&&!nn.includes("0")&&(un+=this.faker.helpers.arrayElement(tn.filter(ln=>ln!=="0"))),un+=this.fromCharacters(tn,rn-un.length),un}sample(en=10){en=this.faker.helpers.rangeToNumber(en);let rn={min:33,max:125},an="";for(;an.length<en;)an+=String.fromCodePoint(this.faker.number.int(rn));return an}uuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replaceAll("x",()=>this.faker.number.hex({min:0,max:15})).replaceAll("y",()=>this.faker.number.hex({min:8,max:11}))}ulid(en={}){let{refDate:rn=this.faker.defaultRefDate()}=en,an=S(rn);return ze(an)+this.fromCharacters(Me,16)}nanoid(en=21){if(en=this.faker.helpers.rangeToNumber(en),en<=0)return"";let rn=[{value:()=>this.alphanumeric(1),weight:62},{value:()=>this.faker.helpers.arrayElement(["_","-"]),weight:2}],an="";for(;an.length<en;){let nn=this.faker.helpers.weightedArrayElement(rn);an+=nn()}return an}symbol(en=1){return this.fromCharacters(["!",'"',"#","$","%","&","'","(",")","*","+",",","-",".","/",":",";","<","=",">","?","@","[","\\","]","^","_","`","{","|","}","~"],en)}},I=class{constructor(en={}){Wn(this,"_defaultRefDate",()=>new Date);Wn(this,"_randomizer");Wn(this,"datatype",new j(this));Wn(this,"date",new B(this));Wn(this,"helpers",new v(this));Wn(this,"location",new $(this));Wn(this,"number",new Z(this));Wn(this,"string",new Q(this));let{randomizer:rn,seed:an}=en;rn!=null&&an!=null&&rn.seed(an),this._randomizer=rn??Ue(an)}get defaultRefDate(){return this._defaultRefDate}setDefaultRefDate(en=()=>new Date){typeof en=="function"?this._defaultRefDate=en:this._defaultRefDate=()=>new Date(en)}seed(en=P()){return this._randomizer.seed(en),en}};new I;function Ye(en){let rn={};for(let an of en)for(let nn in an){let tn=an[nn];rn[nn]===void 0?rn[nn]={...tn}:rn[nn]={...tn,...rn[nn]}}return rn}var q=class extends p{dog(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.dog)}cat(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.cat)}snake(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.snake)}bear(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.bear)}lion(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.lion)}cetacean(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.cetacean)}horse(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.horse)}bird(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.bird)}cow(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.cow)}fish(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.fish)}crocodilia(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.crocodilia)}insect(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.insect)}rabbit(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.rabbit)}rodent(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.rodent)}type(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.type)}petName(){return this.faker.helpers.arrayElement(this.faker.definitions.animal.pet_name)}},ee=class extends p{author(){return this.faker.helpers.arrayElement(this.faker.definitions.book.author)}format(){return this.faker.helpers.arrayElement(this.faker.definitions.book.format)}genre(){return this.faker.helpers.arrayElement(this.faker.definitions.book.genre)}publisher(){return this.faker.helpers.arrayElement(this.faker.definitions.book.publisher)}series(){return this.faker.helpers.arrayElement(this.faker.definitions.book.series)}title(){return this.faker.helpers.arrayElement(this.faker.definitions.book.title)}},Vr={0:[[1999999,2],[2279999,3],[2289999,4],[3689999,3],[3699999,4],[6389999,3],[6397999,4],[6399999,7],[6449999,3],[6459999,7],[6479999,3],[6489999,7],[6549999,3],[6559999,4],[6999999,3],[8499999,4],[8999999,5],[9499999,6],[9999999,7]],1:[[99999,3],[299999,2],[349999,3],[399999,4],[499999,3],[699999,2],[999999,4],[3979999,3],[5499999,4],[6499999,5],[6799999,4],[6859999,5],[7139999,4],[7169999,3],[7319999,4],[7399999,7],[7749999,5],[7753999,7],[7763999,5],[7764999,7],[7769999,5],[7782999,7],[7899999,5],[7999999,4],[8004999,5],[8049999,5],[8379999,5],[8384999,7],[8671999,5],[8675999,4],[8697999,5],[9159999,6],[9165059,7],[9168699,6],[9169079,7],[9195999,6],[9196549,7],[9729999,6],[9877999,4],[9911499,6],[9911999,7],[9989899,6],[9999999,7]]},re=class extends p{department(){return this.faker.helpers.arrayElement(this.faker.definitions.commerce.department)}productName(){return`${this.productAdjective()} ${this.productMaterial()} ${this.product()}`}price(en={}){let{dec:rn=2,max:an=1e3,min:nn=1,symbol:tn=""}=en;if(nn<0||an<0)return`${tn}0`;if(nn===an)return`${tn}${nn.toFixed(rn)}`;let un=this.faker.number.float({min:nn,max:an,fractionDigits:rn});if(rn===0)return`${tn}${un.toFixed(rn)}`;let ln=un*10**rn%10,dn=this.faker.helpers.weightedArrayElement([{weight:5,value:9},{weight:3,value:5},{weight:1,value:0},{weight:1,value:this.faker.number.int({min:0,max:9})}]),hn=(1/10)**rn,cn=ln*hn,Fn=dn*hn,yn=un-cn+Fn;return nn<=yn&&yn<=an?`${tn}${yn.toFixed(rn)}`:`${tn}${un.toFixed(rn)}`}productAdjective(){return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.adjective)}productMaterial(){return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.material)}product(){return this.faker.helpers.arrayElement(this.faker.definitions.commerce.product_name.product)}productDescription(){return this.faker.helpers.fake(this.faker.definitions.commerce.product_description)}isbn(en={}){typeof en=="number"&&(en={variant:en});let{variant:rn=13,separator:an="-"}=en,nn="978",[tn,un]=this.faker.helpers.objectEntry(Vr),ln=this.faker.string.numeric(8),dn=Number.parseInt(ln.slice(0,-1)),hn=un.find(([pn])=>dn<=pn)?.[1];if(!hn)throw new m(`Unable to find a registrant length for the group ${tn}`);let cn=ln.slice(0,hn),Fn=ln.slice(hn),yn=[nn,tn,cn,Fn];rn===10&&yn.shift();let gn=yn.join(""),bn=0;for(let pn=0;pn<rn-1;pn++){let fn=rn===10?pn+1:pn%2?3:1;bn+=fn*Number.parseInt(gn[pn])}return bn=rn===10?bn%11:(10-bn%10)%10,yn.push(bn===10?"X":bn.toString()),yn.join(an)}},te=class extends p{name(){return this.faker.helpers.fake(this.faker.definitions.company.name_pattern)}catchPhrase(){return[this.catchPhraseAdjective(),this.catchPhraseDescriptor(),this.catchPhraseNoun()].join(" ")}buzzPhrase(){return[this.buzzVerb(),this.buzzAdjective(),this.buzzNoun()].join(" ")}catchPhraseAdjective(){return this.faker.helpers.arrayElement(this.faker.definitions.company.adjective)}catchPhraseDescriptor(){return this.faker.helpers.arrayElement(this.faker.definitions.company.descriptor)}catchPhraseNoun(){return this.faker.helpers.arrayElement(this.faker.definitions.company.noun)}buzzAdjective(){return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_adjective)}buzzVerb(){return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_verb)}buzzNoun(){return this.faker.helpers.arrayElement(this.faker.definitions.company.buzz_noun)}},ae=class extends p{column(){return this.faker.helpers.arrayElement(this.faker.definitions.database.column)}type(){return this.faker.helpers.arrayElement(this.faker.definitions.database.type)}collation(){return this.faker.helpers.arrayElement(this.faker.definitions.database.collation)}engine(){return this.faker.helpers.arrayElement(this.faker.definitions.database.engine)}mongodbObjectId(){return this.faker.string.hexadecimal({length:24,casing:"lower",prefix:""})}},zr={alpha:["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],formats:[{country:"AL",total:28,bban:[{type:"n",count:8},{type:"c",count:16}],format:"ALkk bbbs sssx cccc cccc cccc cccc"},{country:"AD",total:24,bban:[{type:"n",count:8},{type:"c",count:12}],format:"ADkk bbbb ssss cccc cccc cccc"},{country:"AT",total:20,bban:[{type:"n",count:5},{type:"n",count:11}],format:"ATkk bbbb bccc cccc cccc"},{country:"AZ",total:28,bban:[{type:"a",count:4},{type:"n",count:20}],format:"AZkk bbbb cccc cccc cccc cccc cccc"},{country:"BH",total:22,bban:[{type:"a",count:4},{type:"c",count:14}],format:"BHkk bbbb cccc cccc cccc cc"},{country:"BE",total:16,bban:[{type:"n",count:3},{type:"n",count:9}],format:"BEkk bbbc cccc ccxx"},{country:"BA",total:20,bban:[{type:"n",count:6},{type:"n",count:10}],format:"BAkk bbbs sscc cccc ccxx"},{country:"BR",total:29,bban:[{type:"n",count:13},{type:"n",count:10},{type:"a",count:1},{type:"c",count:1}],format:"BRkk bbbb bbbb ssss sccc cccc ccct n"},{country:"BG",total:22,bban:[{type:"a",count:4},{type:"n",count:6},{type:"c",count:8}],format:"BGkk bbbb ssss ddcc cccc cc"},{country:"CR",total:22,bban:[{type:"n",count:1},{type:"n",count:3},{type:"n",count:14}],format:"CRkk xbbb cccc cccc cccc cc"},{country:"HR",total:21,bban:[{type:"n",count:7},{type:"n",count:10}],format:"HRkk bbbb bbbc cccc cccc c"},{country:"CY",total:28,bban:[{type:"n",count:8},{type:"c",count:16}],format:"CYkk bbbs ssss cccc cccc cccc cccc"},{country:"CZ",total:24,bban:[{type:"n",count:10},{type:"n",count:10}],format:"CZkk bbbb ssss sscc cccc cccc"},{country:"DK",total:18,bban:[{type:"n",count:4},{type:"n",count:10}],format:"DKkk bbbb cccc cccc cc"},{country:"DO",total:28,bban:[{type:"a",count:4},{type:"n",count:20}],format:"DOkk bbbb cccc cccc cccc cccc cccc"},{country:"TL",total:23,bban:[{type:"n",count:3},{type:"n",count:16}],format:"TLkk bbbc cccc cccc cccc cxx"},{country:"EE",total:20,bban:[{type:"n",count:4},{type:"n",count:12}],format:"EEkk bbss cccc cccc cccx"},{country:"FO",total:18,bban:[{type:"n",count:4},{type:"n",count:10}],format:"FOkk bbbb cccc cccc cx"},{country:"FI",total:18,bban:[{type:"n",count:6},{type:"n",count:8}],format:"FIkk bbbb bbcc cccc cx"},{country:"FR",total:27,bban:[{type:"n",count:10},{type:"c",count:11},{type:"n",count:2}],format:"FRkk bbbb bggg ggcc cccc cccc cxx"},{country:"GE",total:22,bban:[{type:"a",count:2},{type:"n",count:16}],format:"GEkk bbcc cccc cccc cccc cc"},{country:"DE",total:22,bban:[{type:"n",count:8},{type:"n",count:10}],format:"DEkk bbbb bbbb cccc cccc cc"},{country:"GI",total:23,bban:[{type:"a",count:4},{type:"c",count:15}],format:"GIkk bbbb cccc cccc cccc ccc"},{country:"GR",total:27,bban:[{type:"n",count:7},{type:"c",count:16}],format:"GRkk bbbs sssc cccc cccc cccc ccc"},{country:"GL",total:18,bban:[{type:"n",count:4},{type:"n",count:10}],format:"GLkk bbbb cccc cccc cc"},{country:"GT",total:28,bban:[{type:"c",count:4},{type:"c",count:4},{type:"c",count:16}],format:"GTkk bbbb mmtt cccc cccc cccc cccc"},{country:"HU",total:28,bban:[{type:"n",count:8},{type:"n",count:16}],format:"HUkk bbbs sssk cccc cccc cccc cccx"},{country:"IS",total:26,bban:[{type:"n",count:6},{type:"n",count:16}],format:"ISkk bbbb sscc cccc iiii iiii ii"},{country:"IE",total:22,bban:[{type:"a",count:4},{type:"n",count:6},{type:"n",count:8}],format:"IEkk aaaa bbbb bbcc cccc cc"},{country:"IL",total:23,bban:[{type:"n",count:6},{type:"n",count:13}],format:"ILkk bbbn nncc cccc cccc ccc"},{country:"IT",total:27,bban:[{type:"a",count:1},{type:"n",count:10},{type:"c",count:12}],format:"ITkk xaaa aabb bbbc cccc cccc ccc"},{country:"JO",total:30,bban:[{type:"a",count:4},{type:"n",count:4},{type:"n",count:18}],format:"JOkk bbbb nnnn cccc cccc cccc cccc cc"},{country:"KZ",total:20,bban:[{type:"n",count:3},{type:"c",count:13}],format:"KZkk bbbc cccc cccc cccc"},{country:"XK",total:20,bban:[{type:"n",count:4},{type:"n",count:12}],format:"XKkk bbbb cccc cccc cccc"},{country:"KW",total:30,bban:[{type:"a",count:4},{type:"c",count:22}],format:"KWkk bbbb cccc cccc cccc cccc cccc cc"},{country:"LV",total:21,bban:[{type:"a",count:4},{type:"c",count:13}],format:"LVkk bbbb cccc cccc cccc c"},{country:"LB",total:28,bban:[{type:"n",count:4},{type:"c",count:20}],format:"LBkk bbbb cccc cccc cccc cccc cccc"},{country:"LI",total:21,bban:[{type:"n",count:5},{type:"c",count:12}],format:"LIkk bbbb bccc cccc cccc c"},{country:"LT",total:20,bban:[{type:"n",count:5},{type:"n",count:11}],format:"LTkk bbbb bccc cccc cccc"},{country:"LU",total:20,bban:[{type:"n",count:3},{type:"c",count:13}],format:"LUkk bbbc cccc cccc cccc"},{country:"MK",total:19,bban:[{type:"n",count:3},{type:"c",count:10},{type:"n",count:2}],format:"MKkk bbbc cccc cccc cxx"},{country:"MT",total:31,bban:[{type:"a",count:4},{type:"n",count:5},{type:"c",count:18}],format:"MTkk bbbb ssss sccc cccc cccc cccc ccc"},{country:"MR",total:27,bban:[{type:"n",count:10},{type:"n",count:13}],format:"MRkk bbbb bsss sscc cccc cccc cxx"},{country:"MU",total:30,bban:[{type:"a",count:4},{type:"n",count:4},{type:"n",count:15},{type:"a",count:3}],format:"MUkk bbbb bbss cccc cccc cccc 000d dd"},{country:"MC",total:27,bban:[{type:"n",count:10},{type:"c",count:11},{type:"n",count:2}],format:"MCkk bbbb bsss sscc cccc cccc cxx"},{country:"MD",total:24,bban:[{type:"c",count:2},{type:"c",count:18}],format:"MDkk bbcc cccc cccc cccc cccc"},{country:"ME",total:22,bban:[{type:"n",count:3},{type:"n",count:15}],format:"MEkk bbbc cccc cccc cccc xx"},{country:"NL",total:18,bban:[{type:"a",count:4},{type:"n",count:10}],format:"NLkk bbbb cccc cccc cc"},{country:"NO",total:15,bban:[{type:"n",count:4},{type:"n",count:7}],format:"NOkk bbbb cccc ccx"},{country:"PK",total:24,bban:[{type:"a",count:4},{type:"n",count:16}],format:"PKkk bbbb cccc cccc cccc cccc"},{country:"PS",total:29,bban:[{type:"a",count:4},{type:"n",count:9},{type:"n",count:12}],format:"PSkk bbbb xxxx xxxx xccc cccc cccc c"},{country:"PL",total:28,bban:[{type:"n",count:8},{type:"n",count:16}],format:"PLkk bbbs sssx cccc cccc cccc cccc"},{country:"PT",total:25,bban:[{type:"n",count:8},{type:"n",count:13}],format:"PTkk bbbb ssss cccc cccc cccx x"},{country:"QA",total:29,bban:[{type:"a",count:4},{type:"c",count:21}],format:"QAkk bbbb cccc cccc cccc cccc cccc c"},{country:"RO",total:24,bban:[{type:"a",count:4},{type:"c",count:16}],format:"ROkk bbbb cccc cccc cccc cccc"},{country:"SM",total:27,bban:[{type:"a",count:1},{type:"n",count:10},{type:"c",count:12}],format:"SMkk xaaa aabb bbbc cccc cccc ccc"},{country:"SA",total:24,bban:[{type:"n",count:2},{type:"c",count:18}],format:"SAkk bbcc cccc cccc cccc cccc"},{country:"RS",total:22,bban:[{type:"n",count:3},{type:"n",count:15}],format:"RSkk bbbc cccc cccc cccc xx"},{country:"SK",total:24,bban:[{type:"n",count:10},{type:"n",count:10}],format:"SKkk bbbb ssss sscc cccc cccc"},{country:"SI",total:19,bban:[{type:"n",count:5},{type:"n",count:10}],format:"SIkk bbss sccc cccc cxx"},{country:"ES",total:24,bban:[{type:"n",count:10},{type:"n",count:10}],format:"ESkk bbbb gggg xxcc cccc cccc"},{country:"SE",total:24,bban:[{type:"n",count:3},{type:"n",count:17}],format:"SEkk bbbc cccc cccc cccc cccc"},{country:"CH",total:21,bban:[{type:"n",count:5},{type:"c",count:12}],format:"CHkk bbbb bccc cccc cccc c"},{country:"TN",total:24,bban:[{type:"n",count:5},{type:"n",count:15}],format:"TNkk bbss sccc cccc cccc cccc"},{country:"TR",total:26,bban:[{type:"n",count:5},{type:"n",count:1},{type:"n",count:16}],format:"TRkk bbbb bxcc cccc cccc cccc cc"},{country:"AE",total:23,bban:[{type:"n",count:3},{type:"n",count:16}],format:"AEkk bbbc cccc cccc cccc ccc"},{country:"GB",total:22,bban:[{type:"a",count:4},{type:"n",count:6},{type:"n",count:8}],format:"GBkk bbbb ssss sscc cccc cc"},{country:"VG",total:24,bban:[{type:"a",count:4},{type:"n",count:16}],format:"VGkk bbbb cccc cccc cccc cccc"}],iso3166:["AD","AE","AF","AG","AI","AL","AM","AO","AQ","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW"],mod97:en=>{let rn=0;for(let an of en)rn=(rn*10+ +an)%97;return rn},pattern10:["01","02","03","04","05","06","07","08","09"],pattern100:["001","002","003","004","005","006","007","008","009"],toDigitString:en=>en.replaceAll(/[A-Z]/gi,rn=>String((rn.toUpperCase().codePointAt(0)??Number.NaN)-55))},M=zr;function Wr(en){let rn="";for(let an=0;an<en.length;an+=4)rn+=`${en.substring(an,an+4)} `;return rn.trimEnd()}var ne=class extends p{accountNumber(en={}){typeof en=="number"&&(en={length:en});let{length:rn=8}=en;return this.faker.string.numeric({length:rn,allowLeadingZeros:!0})}accountName(){return[this.faker.helpers.arrayElement(this.faker.definitions.finance.account_type),"Account"].join(" ")}routingNumber(){let en=this.faker.string.numeric({length:8,allowLeadingZeros:!0}),rn=0;for(let an=0;an<en.length;an+=3)rn+=Number(en[an])*3,rn+=Number(en[an+1])*7,rn+=Number(en[an+2])||0;return`${en}${Math.ceil(rn/10)*10-rn}`}maskedNumber(en={}){w({deprecated:"faker.finance.maskedNumber()",proposed:"faker.finance.iban().replace(/(?<=.{4})\\w(?=.{2})/g, '*') or a similar approach",since:"9.3.0",until:"10.0.0"}),typeof en=="number"&&(en={length:en});let{ellipsis:rn=!0,length:an=4,parens:nn=!0}=en,tn=this.faker.string.numeric({length:an});return rn&&(tn=`...${tn}`),nn&&(tn=`(${tn})`),tn}amount(en={}){let{autoFormat:rn=!1,dec:an=2,max:nn=1e3,min:tn=0,symbol:un=""}=en,ln=this.faker.number.float({max:nn,min:tn,fractionDigits:an}),dn=rn?ln.toLocaleString(void 0,{minimumFractionDigits:an}):ln.toFixed(an);return un+dn}transactionType(){return this.faker.helpers.arrayElement(this.faker.definitions.finance.transaction_type)}currency(){return this.faker.helpers.arrayElement(this.faker.definitions.finance.currency)}currencyCode(){return this.currency().code}currencyName(){return this.currency().name}currencySymbol(){let en;do en=this.currency().symbol;while(en.length===0);return en}currencyNumericCode(){return this.currency().numericCode}bitcoinAddress(en={}){let{type:rn=this.faker.helpers.enumValue(de),network:an="mainnet"}=en,nn=ve[rn],tn=nn.prefix[an],un=this.faker.number.int(nn.length),ln=this.faker.string.alphanumeric({length:un-tn.length,casing:nn.casing,exclude:nn.exclude});return tn+ln}litecoinAddress(){let en=this.faker.number.int({min:26,max:33});return this.faker.string.fromCharacters("LM3")+this.faker.string.fromCharacters("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ",en-1)}creditCardNumber(en={}){typeof en=="string"&&(en={issuer:en});let{issuer:rn=""}=en,an,nn=this.faker.definitions.finance.credit_card,tn=rn.toLowerCase();if(tn in nn)an=this.faker.helpers.arrayElement(nn[tn]);else if(rn.includes("#"))an=rn;else{let un=this.faker.helpers.objectValue(nn);an=this.faker.helpers.arrayElement(un)}return an=an.replaceAll("/",""),this.faker.helpers.replaceCreditCardSymbols(an)}creditCardCVV(){return this.faker.string.numeric({length:3,allowLeadingZeros:!0})}creditCardIssuer(){return this.faker.helpers.objectKey(this.faker.definitions.finance.credit_card)}pin(en={}){typeof en=="number"&&(en={length:en});let{length:rn=4}=en;if(rn<1)throw new m("minimum length is 1");return this.faker.string.numeric({length:rn,allowLeadingZeros:!0})}ethereumAddress(){return this.faker.string.hexadecimal({length:40,casing:"lower"})}iban(en={}){let{countryCode:rn,formatted:an=!1}=en,nn=rn?M.formats.find(hn=>hn.country===rn):this.faker.helpers.arrayElement(M.formats);if(!nn)throw new m(`Country code ${rn} not supported.`);let tn="",un=0;for(let hn of nn.bban){let cn=hn.count;for(un+=hn.count;cn>0;)hn.type==="a"?tn+=this.faker.helpers.arrayElement(M.alpha):hn.type==="c"?this.faker.datatype.boolean(.8)?tn+=this.faker.number.int(9):tn+=this.faker.helpers.arrayElement(M.alpha):cn>=3&&this.faker.datatype.boolean(.3)?this.faker.datatype.boolean()?(tn+=this.faker.helpers.arrayElement(M.pattern100),cn-=2):(tn+=this.faker.helpers.arrayElement(M.pattern10),cn--):tn+=this.faker.number.int(9),cn--;tn=tn.substring(0,un)}let ln=98-M.mod97(M.toDigitString(`${tn}${nn.country}00`));ln<10&&(ln=`0${ln}`);let dn=`${nn.country}${ln}${tn}`;return an?Wr(dn):dn}bic(en={}){let{includeBranchCode:rn=this.faker.datatype.boolean()}=en,an=this.faker.string.alpha({length:4,casing:"upper"}),nn=this.faker.helpers.arrayElement(M.iso3166),tn=this.faker.string.alphanumeric({length:2,casing:"upper"}),un=rn?this.faker.datatype.boolean()?this.faker.string.alphanumeric({length:3,casing:"upper"}):"XXX":"";return`${an}${nn}${tn}${un}`}transactionDescription(){return this.faker.helpers.fake(this.faker.definitions.finance.transaction_description_pattern)}};function Ze(en){return en.split(" ").map(rn=>rn.charAt(0).toUpperCase()+rn.slice(1)).join(" ")}var ie=class extends p{adjective(){return this.faker.helpers.arrayElement(this.faker.definitions.food.adjective)}description(){return this.faker.helpers.fake(this.faker.definitions.food.description_pattern)}dish(){return this.faker.datatype.boolean()?Ze(this.faker.helpers.fake(this.faker.definitions.food.dish_pattern)):Ze(this.faker.helpers.arrayElement(this.faker.definitions.food.dish))}ethnicCategory(){return this.faker.helpers.arrayElement(this.faker.definitions.food.ethnic_category)}fruit(){return this.faker.helpers.arrayElement(this.faker.definitions.food.fruit)}ingredient(){return this.faker.helpers.arrayElement(this.faker.definitions.food.ingredient)}meat(){return this.faker.helpers.arrayElement(this.faker.definitions.food.meat)}spice(){return this.faker.helpers.arrayElement(this.faker.definitions.food.spice)}vegetable(){return this.faker.helpers.arrayElement(this.faker.definitions.food.vegetable)}},Yr=" ",oe=class extends p{branch(){let en=this.faker.hacker.noun().replace(" ","-"),rn=this.faker.hacker.verb().replace(" ","-");return`${en}-${rn}`}commitEntry(en={}){let{merge:rn=this.faker.datatype.boolean({probability:.2}),eol:an="CRLF",refDate:nn}=en,tn=[`commit ${this.faker.git.commitSha()}`];rn&&tn.push(`Merge: ${this.commitSha({length:7})} ${this.commitSha({length:7})}`);let un=this.faker.person.firstName(),ln=this.faker.person.lastName(),dn=this.faker.person.fullName({firstName:un,lastName:ln}),hn=this.faker.internet.username({firstName:un,lastName:ln}),cn=this.faker.helpers.arrayElement([dn,hn]),Fn=this.faker.internet.email({firstName:un,lastName:ln});cn=cn.replaceAll(/^[.,:;"\\']|[<>\n]|[.,:;"\\']$/g,""),tn.push(`Author: ${cn} <${Fn}>`,`Date: ${this.commitDate({refDate:nn})}`,"",`${Yr.repeat(4)}${this.commitMessage()}`,"");let yn=an==="CRLF"?`\r
`:`
`;return tn.join(yn)}commitMessage(){return`${this.faker.hacker.verb()} ${this.faker.hacker.adjective()} ${this.faker.hacker.noun()}`}commitDate(en={}){let{refDate:rn=this.faker.defaultRefDate()}=en,an=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],nn=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],tn=this.faker.date.recent({days:1,refDate:rn}),un=an[tn.getUTCDay()],ln=nn[tn.getUTCMonth()],dn=tn.getUTCDate(),hn=tn.getUTCHours().toString().padStart(2,"0"),cn=tn.getUTCMinutes().toString().padStart(2,"0"),Fn=tn.getUTCSeconds().toString().padStart(2,"0"),yn=tn.getUTCFullYear(),gn=this.faker.number.int({min:-11,max:12}),bn=Math.abs(gn).toString().padStart(2,"0"),pn="00",fn=gn>=0?"+":"-";return`${un} ${ln} ${dn} ${hn}:${cn}:${Fn} ${yn} ${fn}${bn}${pn}`}commitSha(en={}){let{length:rn=40}=en;return this.faker.string.hexadecimal({length:rn,casing:"lower",prefix:""})}},se=class extends p{abbreviation(){return this.faker.helpers.arrayElement(this.faker.definitions.hacker.abbreviation)}adjective(){return this.faker.helpers.arrayElement(this.faker.definitions.hacker.adjective)}noun(){return this.faker.helpers.arrayElement(this.faker.definitions.hacker.noun)}verb(){return this.faker.helpers.arrayElement(this.faker.definitions.hacker.verb)}ingverb(){return this.faker.helpers.arrayElement(this.faker.definitions.hacker.ingverb)}phrase(){let en={abbreviation:this.abbreviation,adjective:this.adjective,ingverb:this.ingverb,noun:this.noun,verb:this.verb},rn=this.faker.helpers.arrayElement(this.faker.definitions.hacker.phrase);return this.faker.helpers.mustache(rn,en)}},ce=class extends p{avatar(){return this.faker.helpers.arrayElement([this.personPortrait,this.avatarGitHub])()}avatarGitHub(){return`https://avatars.githubusercontent.com/u/${this.faker.number.int(1e8)}`}personPortrait(en={}){let{sex:rn=this.faker.person.sexType(),size:an=512}=en;return`https://cdn.jsdelivr.net/gh/faker-js/assets-person-portrait/${rn}/${an}/${this.faker.number.int({min:0,max:99})}.jpg`}avatarLegacy(){return w({deprecated:"faker.image.avatarLegacy()",proposed:"faker.image.avatar() or faker.image.personPortrait()",since:"9.0.2",until:"10.0.0"}),`https://cloudflare-ipfs.com/ipfs/Qmd3W5DuhgHirLHGVixi6V76LhCkZUz6pnFt5AJBiyvHye/avatar/${this.faker.number.int(1249)}.jpg`}url(en={}){let{width:rn=this.faker.number.int({min:1,max:3999}),height:an=this.faker.number.int({min:1,max:3999})}=en;return this.faker.helpers.arrayElement([this.urlLoremFlickr,({width:nn,height:tn})=>this.urlPicsumPhotos({width:nn,height:tn,grayscale:!1,blur:0})])({width:rn,height:an})}urlLoremFlickr(en={}){let{width:rn=this.faker.number.int({min:1,max:3999}),height:an=this.faker.number.int({min:1,max:3999}),category:nn}=en;return`https://loremflickr.com/${rn}/${an}${nn==null?"":`/${nn}`}?lock=${this.faker.number.int()}`}urlPicsumPhotos(en={}){let{width:rn=this.faker.number.int({min:1,max:3999}),height:an=this.faker.number.int({min:1,max:3999}),grayscale:nn=this.faker.datatype.boolean(),blur:tn=this.faker.number.int({max:10})}=en,un=`https://picsum.photos/seed/${this.faker.string.alphanumeric({length:{min:5,max:10}})}/${rn}/${an}`,ln=typeof tn=="number"&&tn>=1&&tn<=10;return(nn||ln)&&(un+="?",nn&&(un+="grayscale"),nn&&ln&&(un+="&"),ln&&(un+=`blur=${tn}`)),un}urlPlaceholder(en={}){w({deprecated:"faker.image.urlPlaceholder()",proposed:"faker.image.url() or faker.image.dataUri()",since:"9.4.0",until:"10.0.0"});let{width:rn=this.faker.number.int({min:1,max:3500}),height:an=this.faker.number.int({min:1,max:3500}),backgroundColor:nn=this.faker.color.rgb({format:"hex",prefix:""}),textColor:tn=this.faker.color.rgb({format:"hex",prefix:""}),format:un=this.faker.helpers.arrayElement(["gif","jpeg","jpg","png","webp"]),text:ln=this.faker.lorem.words()}=en,dn="https://via.placeholder.com";return dn+=`/${rn}`,dn+=`x${an}`,dn+=`/${nn}`,dn+=`/${tn}`,dn+=`.${un}`,dn+=`?text=${encodeURIComponent(ln)}`,dn}dataUri(en={}){let{width:rn=this.faker.number.int({min:1,max:3999}),height:an=this.faker.number.int({min:1,max:3999}),color:nn=this.faker.color.rgb(),type:tn=this.faker.helpers.arrayElement(["svg-uri","svg-base64"])}=en,un=`<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="${rn}" height="${an}"><rect width="100%" height="100%" fill="${nn}"/><text x="${rn/2}" y="${an/2}" font-size="20" alignment-baseline="middle" text-anchor="middle" fill="white">${rn}x${an}</text></svg>`;return tn==="svg-uri"?`data:image/svg+xml;charset=UTF-8,${encodeURIComponent(un)}`:`data:image/svg+xml;base64,${ge(un)}`}};function Je(en,rn,an=nn=>nn){let nn={};for(let tn of en){let un=rn(tn);nn[un]===void 0&&(nn[un]=[]),nn[un].push(an(tn))}return nn}var Te={fail:()=>{throw new m("No words found that match the given length.")},closest:(en,rn)=>{let an=Je(en,dn=>dn.length),nn=Object.keys(an).map(Number),tn=Math.min(...nn),un=Math.max(...nn),ln=Math.min(rn.min-tn,un-rn.max);return en.filter(dn=>dn.length===rn.min-ln||dn.length===rn.max+ln)},shortest:en=>{let rn=Math.min(...en.map(an=>an.length));return en.filter(an=>an.length===rn)},longest:en=>{let rn=Math.max(...en.map(an=>an.length));return en.filter(an=>an.length===rn)},"any-length":en=>[...en]};function T(en){let{wordList:rn,length:an,strategy:nn="any-length"}=en;if(an!=null){let tn=typeof an=="number"?ln=>ln.length===an:ln=>ln.length>=an.min&&ln.length<=an.max,un=rn.filter(tn);return un.length>0?un:typeof an=="number"?Te[nn](rn,{min:an,max:an}):Te[nn](rn,an)}else if(nn==="shortest"||nn==="longest")return Te[nn](rn);return[...rn]}var le=class extends p{word(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.lorem.word}))}words(en=3){return this.faker.helpers.multiple(()=>this.word(),{count:en}).join(" ")}sentence(en={min:3,max:10}){let rn=this.words(en);return`${rn.charAt(0).toUpperCase()+rn.substring(1)}.`}slug(en=3){let rn=this.words(en);return this.faker.helpers.slugify(rn)}sentences(en={min:2,max:6},rn=" "){return this.faker.helpers.multiple(()=>this.sentence(),{count:en}).join(rn)}paragraph(en=3){return this.sentences(en)}paragraphs(en=3,rn=`
`){return this.faker.helpers.multiple(()=>this.paragraph(),{count:en}).join(rn)}text(){let en=["sentence","sentences","paragraph","paragraphs","lines"],rn=this.faker.helpers.arrayElement(en);return this[rn]()}lines(en={min:1,max:5}){return this.sentences(en,`
`)}},me=class extends p{album(){return this.faker.helpers.arrayElement(this.faker.definitions.music.album)}artist(){return this.faker.helpers.arrayElement(this.faker.definitions.music.artist)}genre(){return this.faker.helpers.arrayElement(this.faker.definitions.music.genre)}songName(){return this.faker.helpers.arrayElement(this.faker.definitions.music.song_name)}},ue=class extends p{number(en={}){let{style:rn="human"}=en,an=this.faker.definitions.phone_number.format[rn];if(!an)throw new Error(`No definitions for ${rn} in this locale`);let nn=this.faker.helpers.arrayElement(an);return Se(this.faker,nn)}imei(){return this.faker.helpers.replaceCreditCardSymbols("##-######-######-L","#")}},pe=class extends p{chemicalElement(){return this.faker.helpers.arrayElement(this.faker.definitions.science.chemical_element)}unit(){return this.faker.helpers.arrayElement(this.faker.definitions.science.unit)}},Zr=["video","audio","image","text","application"],Jr=["application/pdf","audio/mpeg","audio/wav","image/png","image/jpeg","image/gif","video/mp4","video/mpeg","text/html"],Xr=["en","wl","ww"],Xe={index:"o",slot:"s",mac:"x",pci:"p"},Qr=["SUN","MON","TUE","WED","THU","FRI","SAT"],he=class extends p{fileName(en={}){let{extensionCount:rn=1}=en,an=this.faker.word.words().toLowerCase().replaceAll(/\W/g,"_"),nn=this.faker.helpers.multiple(()=>this.fileExt(),{count:rn}).join(".");return nn.length===0?an:`${an}.${nn}`}commonFileName(en){return`${this.fileName({extensionCount:0})}.${en||this.commonFileExt()}`}mimeType(){let en=Object.keys(this.faker.definitions.system.mime_type);return this.faker.helpers.arrayElement(en)}commonFileType(){return this.faker.helpers.arrayElement(Zr)}commonFileExt(){return this.fileExt(this.faker.helpers.arrayElement(Jr))}fileType(){let en=this.faker.definitions.system.mime_type,rn=new Set(Object.keys(en).map(an=>an.split("/")[0]));return this.faker.helpers.arrayElement([...rn])}fileExt(en){let rn=this.faker.definitions.system.mime_type;if(typeof en=="string")return this.faker.helpers.arrayElement(rn[en].extensions);let an=new Set(Object.values(rn).flatMap(({extensions:nn})=>nn));return this.faker.helpers.arrayElement([...an])}directoryPath(){let en=this.faker.definitions.system.directory_path;return this.faker.helpers.arrayElement(en)}filePath(){return`${this.directoryPath()}/${this.fileName()}`}semver(){return[this.faker.number.int(9),this.faker.number.int(20),this.faker.number.int(20)].join(".")}networkInterface(en={}){let{interfaceType:rn=this.faker.helpers.arrayElement(Xr),interfaceSchema:an=this.faker.helpers.objectKey(Xe)}=en,nn,tn="";switch(an){case"index":{nn=this.faker.string.numeric();break}case"slot":{nn=`${this.faker.string.numeric()}${this.faker.helpers.maybe(()=>`f${this.faker.string.numeric()}`)??""}${this.faker.helpers.maybe(()=>`d${this.faker.string.numeric()}`)??""}`;break}case"mac":{nn=this.faker.internet.mac("");break}case"pci":{tn=this.faker.helpers.maybe(()=>`P${this.faker.string.numeric()}`)??"",nn=`${this.faker.string.numeric()}s${this.faker.string.numeric()}${this.faker.helpers.maybe(()=>`f${this.faker.string.numeric()}`)??""}${this.faker.helpers.maybe(()=>`d${this.faker.string.numeric()}`)??""}`;break}}return`${tn}${rn}${Xe[an]}${nn}`}cron(en={}){let{includeYear:rn=!1,includeNonStandard:an=!1}=en,nn=[this.faker.number.int(59),"*"],tn=[this.faker.number.int(23),"*"],un=[this.faker.number.int({min:1,max:31}),"*","?"],ln=[this.faker.number.int({min:1,max:12}),"*"],dn=[this.faker.number.int(6),this.faker.helpers.arrayElement(Qr),"*","?"],hn=[this.faker.number.int({min:1970,max:2099}),"*"],cn=this.faker.helpers.arrayElement(nn),Fn=this.faker.helpers.arrayElement(tn),yn=this.faker.helpers.arrayElement(un),gn=this.faker.helpers.arrayElement(ln),bn=this.faker.helpers.arrayElement(dn),pn=this.faker.helpers.arrayElement(hn),fn=`${cn} ${Fn} ${yn} ${gn} ${bn}`;rn&&(fn+=` ${pn}`);let Cn=["@annually","@daily","@hourly","@monthly","@reboot","@weekly","@yearly"];return!an||this.faker.datatype.boolean()?fn:this.faker.helpers.arrayElement(Cn)}},fe=class extends p{vehicle(){return`${this.manufacturer()} ${this.model()}`}manufacturer(){return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.manufacturer)}model(){return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.model)}type(){return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.type)}fuel(){return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.fuel)}vin(){let en=["o","i","q","O","I","Q"];return`${this.faker.string.alphanumeric({length:10,casing:"upper",exclude:en})}${this.faker.string.alpha({length:1,casing:"upper",exclude:en})}${this.faker.string.alphanumeric({length:1,casing:"upper",exclude:en})}${this.faker.string.numeric({length:5,allowLeadingZeros:!0})}`}color(){return this.faker.color.human()}vrm(){return`${this.faker.string.alpha({length:2,casing:"upper"})}${this.faker.string.numeric({length:2,allowLeadingZeros:!0})}${this.faker.string.alpha({length:3,casing:"upper"})}`}bicycle(){return this.faker.helpers.arrayElement(this.faker.definitions.vehicle.bicycle_type)}},be=class extends p{adjective(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.adjective}))}adverb(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.adverb}))}conjunction(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.conjunction}))}interjection(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.interjection}))}noun(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.noun}))}preposition(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.preposition}))}verb(en={}){return typeof en=="number"&&(en={length:en}),this.faker.helpers.arrayElement(T({...en,wordList:this.faker.definitions.word.verb}))}sample(en={}){let rn=this.faker.helpers.shuffle([this.adjective,this.adverb,this.conjunction,this.interjection,this.noun,this.preposition,this.verb]);for(let an of rn)try{return an(en)}catch{continue}throw new m("No matching word data available for the current locale")}words(en={}){typeof en=="number"&&(en={count:en});let{count:rn={min:1,max:3}}=en;return this.faker.helpers.multiple(()=>this.sample(),{count:rn}).join(" ")}},Qe=class extends I{constructor(rn){super({randomizer:rn.randomizer,seed:rn.seed});Wn(this,"rawDefinitions");Wn(this,"definitions");Wn(this,"airline",new G(this));Wn(this,"animal",new q(this));Wn(this,"book",new ee(this));Wn(this,"color",new O(this));Wn(this,"commerce",new re(this));Wn(this,"company",new te(this));Wn(this,"database",new ae(this));Wn(this,"date",new z(this));Wn(this,"finance",new ne(this));Wn(this,"food",new ie(this));Wn(this,"git",new oe(this));Wn(this,"hacker",new se(this));Wn(this,"helpers",new W(this));Wn(this,"image",new ce(this));Wn(this,"internet",new U(this));Wn(this,"location",new Y(this));Wn(this,"lorem",new le(this));Wn(this,"music",new me(this));Wn(this,"person",new K(this));Wn(this,"phone",new ue(this));Wn(this,"science",new pe(this));Wn(this,"system",new he(this));Wn(this,"vehicle",new fe(this));Wn(this,"word",new be(this));let{locale:an}=rn;if(Array.isArray(an)){if(an.length===0)throw new m("The locale option must contain at least one locale definition.");an=Ye(an)}this.rawDefinitions=an,this.definitions=Ke(this.rawDefinitions)}get address(){return w({deprecated:"faker.address",proposed:"faker.location",since:"8.0",until:"10.0"}),this.location}get name(){return w({deprecated:"faker.name",proposed:"faker.person",since:"8.0",until:"10.0"}),this.person}getMetadata(){return this.rawDefinitions.metadata??{}}},qe=["Academy Color Encoding System (ACES)","Adobe RGB","Adobe Wide Gamut RGB","British Standard Colour (BS)","CIE 1931 XYZ","CIELAB","CIELUV","CIEUVW","CMY","CMYK","DCI-P3","Display-P3","Federal Standard 595C","HKS","HSL","HSLA","HSLuv","HSV","HWB","LCh","LMS","Munsell Color System","Natural Color System (NSC)","Pantone Matching System (PMS)","ProPhoto RGB Color Space","RAL","RG","RGBA","RGK","Rec. 2020","Rec. 2100","Rec. 601","Rec. 709","Uniform Color Spaces (UCSs)","YDbDr","YIQ","YPbPr","sRGB","sYCC","scRGB","xvYCC"],qr={space:qe},er=qr,rr=["ascii_bin","ascii_general_ci","cp1250_bin","cp1250_general_ci","utf8_bin","utf8_general_ci","utf8_unicode_ci"],tr=["ARCHIVE","BLACKHOLE","CSV","InnoDB","MEMORY","MyISAM"],ar=["bigint","binary","bit","blob","boolean","date","datetime","decimal","double","enum","float","geometry","int","mediumint","point","real","serial","set","smallint","text","time","timestamp","tinyint","varchar"],et={collation:rr,engine:tr,type:ar},nr=et,_=["Africa/Abidjan","Africa/Accra","Africa/Addis_Ababa","Africa/Algiers","Africa/Asmara","Africa/Bamako","Africa/Bangui","Africa/Banjul","Africa/Bissau","Africa/Blantyre","Africa/Brazzaville","Africa/Bujumbura","Africa/Cairo","Africa/Casablanca","Africa/Ceuta","Africa/Conakry","Africa/Dakar","Africa/Dar_es_Salaam","Africa/Djibouti","Africa/Douala","Africa/El_Aaiun","Africa/Freetown","Africa/Gaborone","Africa/Harare","Africa/Johannesburg","Africa/Juba","Africa/Kampala","Africa/Khartoum","Africa/Kigali","Africa/Kinshasa","Africa/Lagos","Africa/Libreville","Africa/Lome","Africa/Luanda","Africa/Lubumbashi","Africa/Lusaka","Africa/Malabo","Africa/Maputo","Africa/Maseru","Africa/Mbabane","Africa/Mogadishu","Africa/Monrovia","Africa/Nairobi","Africa/Ndjamena","Africa/Niamey","Africa/Nouakchott","Africa/Ouagadougou","Africa/Porto-Novo","Africa/Sao_Tome","Africa/Tripoli","Africa/Tunis","Africa/Windhoek","America/Adak","America/Anchorage","America/Anguilla","America/Antigua","America/Araguaina","America/Argentina/Buenos_Aires","America/Argentina/Catamarca","America/Argentina/Cordoba","America/Argentina/Jujuy","America/Argentina/La_Rioja","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Salta","America/Argentina/San_Juan","America/Argentina/San_Luis","America/Argentina/Tucuman","America/Argentina/Ushuaia","America/Aruba","America/Asuncion","America/Atikokan","America/Bahia","America/Bahia_Banderas","America/Barbados","America/Belem","America/Belize","America/Blanc-Sablon","America/Boa_Vista","America/Bogota","America/Boise","America/Cambridge_Bay","America/Campo_Grande","America/Cancun","America/Caracas","America/Cayenne","America/Cayman","America/Chicago","America/Chihuahua","America/Ciudad_Juarez","America/Costa_Rica","America/Creston","America/Cuiaba","America/Curacao","America/Danmarkshavn","America/Dawson","America/Dawson_Creek","America/Denver","America/Detroit","America/Dominica","America/Edmonton","America/Eirunepe","America/El_Salvador","America/Fort_Nelson","America/Fortaleza","America/Glace_Bay","America/Goose_Bay","America/Grand_Turk","America/Grenada","America/Guadeloupe","America/Guatemala","America/Guayaquil","America/Guyana","America/Halifax","America/Havana","America/Hermosillo","America/Indiana/Indianapolis","America/Indiana/Knox","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Tell_City","America/Indiana/Vevay","America/Indiana/Vincennes","America/Indiana/Winamac","America/Inuvik","America/Iqaluit","America/Jamaica","America/Juneau","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Kralendijk","America/La_Paz","America/Lima","America/Los_Angeles","America/Lower_Princes","America/Maceio","America/Managua","America/Manaus","America/Marigot","America/Martinique","America/Matamoros","America/Mazatlan","America/Menominee","America/Merida","America/Metlakatla","America/Mexico_City","America/Miquelon","America/Moncton","America/Monterrey","America/Montevideo","America/Montserrat","America/Nassau","America/New_York","America/Nome","America/Noronha","America/North_Dakota/Beulah","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/Nuuk","America/Ojinaga","America/Panama","America/Paramaribo","America/Phoenix","America/Port-au-Prince","America/Port_of_Spain","America/Porto_Velho","America/Puerto_Rico","America/Punta_Arenas","America/Rankin_Inlet","America/Recife","America/Regina","America/Resolute","America/Rio_Branco","America/Santarem","America/Santiago","America/Santo_Domingo","America/Sao_Paulo","America/Scoresbysund","America/Sitka","America/St_Barthelemy","America/St_Johns","America/St_Kitts","America/St_Lucia","America/St_Thomas","America/St_Vincent","America/Swift_Current","America/Tegucigalpa","America/Thule","America/Tijuana","America/Toronto","America/Tortola","America/Vancouver","America/Whitehorse","America/Winnipeg","America/Yakutat","America/Yellowknife","Antarctica/Casey","Antarctica/Davis","Antarctica/DumontDUrville","Antarctica/Macquarie","Antarctica/Mawson","Antarctica/McMurdo","Antarctica/Palmer","Antarctica/Rothera","Antarctica/Syowa","Antarctica/Troll","Antarctica/Vostok","Arctic/Longyearbyen","Asia/Aden","Asia/Almaty","Asia/Amman","Asia/Anadyr","Asia/Aqtau","Asia/Aqtobe","Asia/Ashgabat","Asia/Atyrau","Asia/Baghdad","Asia/Bahrain","Asia/Baku","Asia/Bangkok","Asia/Barnaul","Asia/Beirut","Asia/Bishkek","Asia/Brunei","Asia/Chita","Asia/Choibalsan","Asia/Colombo","Asia/Damascus","Asia/Dhaka","Asia/Dili","Asia/Dubai","Asia/Dushanbe","Asia/Famagusta","Asia/Gaza","Asia/Hebron","Asia/Ho_Chi_Minh","Asia/Hong_Kong","Asia/Hovd","Asia/Irkutsk","Asia/Jakarta","Asia/Jayapura","Asia/Jerusalem","Asia/Kabul","Asia/Kamchatka","Asia/Karachi","Asia/Kathmandu","Asia/Khandyga","Asia/Kolkata","Asia/Krasnoyarsk","Asia/Kuala_Lumpur","Asia/Kuching","Asia/Kuwait","Asia/Macau","Asia/Magadan","Asia/Makassar","Asia/Manila","Asia/Muscat","Asia/Nicosia","Asia/Novokuznetsk","Asia/Novosibirsk","Asia/Omsk","Asia/Oral","Asia/Phnom_Penh","Asia/Pontianak","Asia/Pyongyang","Asia/Qatar","Asia/Qostanay","Asia/Qyzylorda","Asia/Riyadh","Asia/Sakhalin","Asia/Samarkand","Asia/Seoul","Asia/Shanghai","Asia/Singapore","Asia/Srednekolymsk","Asia/Taipei","Asia/Tashkent","Asia/Tbilisi","Asia/Tehran","Asia/Thimphu","Asia/Tokyo","Asia/Tomsk","Asia/Ulaanbaatar","Asia/Urumqi","Asia/Ust-Nera","Asia/Vientiane","Asia/Vladivostok","Asia/Yakutsk","Asia/Yangon","Asia/Yekaterinburg","Asia/Yerevan","Atlantic/Azores","Atlantic/Bermuda","Atlantic/Canary","Atlantic/Cape_Verde","Atlantic/Faroe","Atlantic/Madeira","Atlantic/Reykjavik","Atlantic/South_Georgia","Atlantic/St_Helena","Atlantic/Stanley","Australia/Adelaide","Australia/Brisbane","Australia/Broken_Hill","Australia/Darwin","Australia/Eucla","Australia/Hobart","Australia/Lindeman","Australia/Lord_Howe","Australia/Melbourne","Australia/Perth","Australia/Sydney","Europe/Amsterdam","Europe/Andorra","Europe/Astrakhan","Europe/Athens","Europe/Belgrade","Europe/Berlin","Europe/Bratislava","Europe/Brussels","Europe/Bucharest","Europe/Budapest","Europe/Busingen","Europe/Chisinau","Europe/Copenhagen","Europe/Dublin","Europe/Gibraltar","Europe/Guernsey","Europe/Helsinki","Europe/Isle_of_Man","Europe/Istanbul","Europe/Jersey","Europe/Kaliningrad","Europe/Kirov","Europe/Kyiv","Europe/Lisbon","Europe/Ljubljana","Europe/London","Europe/Luxembourg","Europe/Madrid","Europe/Malta","Europe/Mariehamn","Europe/Minsk","Europe/Monaco","Europe/Moscow","Europe/Oslo","Europe/Paris","Europe/Podgorica","Europe/Prague","Europe/Riga","Europe/Rome","Europe/Samara","Europe/San_Marino","Europe/Sarajevo","Europe/Saratov","Europe/Simferopol","Europe/Skopje","Europe/Sofia","Europe/Stockholm","Europe/Tallinn","Europe/Tirane","Europe/Ulyanovsk","Europe/Vaduz","Europe/Vatican","Europe/Vienna","Europe/Vilnius","Europe/Volgograd","Europe/Warsaw","Europe/Zagreb","Europe/Zurich","Indian/Antananarivo","Indian/Chagos","Indian/Christmas","Indian/Cocos","Indian/Comoro","Indian/Kerguelen","Indian/Mahe","Indian/Maldives","Indian/Mauritius","Indian/Mayotte","Indian/Reunion","Pacific/Apia","Pacific/Auckland","Pacific/Bougainville","Pacific/Chatham","Pacific/Chuuk","Pacific/Easter","Pacific/Efate","Pacific/Fakaofo","Pacific/Fiji","Pacific/Funafuti","Pacific/Galapagos","Pacific/Gambier","Pacific/Guadalcanal","Pacific/Guam","Pacific/Honolulu","Pacific/Kanton","Pacific/Kiritimati","Pacific/Kosrae","Pacific/Kwajalein","Pacific/Majuro","Pacific/Marquesas","Pacific/Midway","Pacific/Nauru","Pacific/Niue","Pacific/Norfolk","Pacific/Noumea","Pacific/Pago_Pago","Pacific/Palau","Pacific/Pitcairn","Pacific/Pohnpei","Pacific/Port_Moresby","Pacific/Rarotonga","Pacific/Saipan","Pacific/Tahiti","Pacific/Tarawa","Pacific/Tongatapu","Pacific/Wake","Pacific/Wallis"],rt={time_zone:_},ir=rt,or=["ADP","AGP","AI","API","ASCII","CLI","COM","CSS","DNS","DRAM","EXE","FTP","GB","HDD","HEX","HTTP","IB","IP","JBOD","JSON","OCR","PCI","PNG","RAM","RSS","SAS","SCSI","SDD","SMS","SMTP","SQL","SSD","SSL","TCP","THX","TLS","UDP","USB","UTF8","VGA","XML","XSS"],tt={abbreviation:or},sr=tt,cr={smiley:["☠️","☹️","☺️","❣️","❤️","❤️‍🔥","❤️‍🩹","👁️‍🗨️","👹","👺","👻","👽","👾","👿","💀","💋","💌","💓","💔","💕","💖","💗","💘","💙","💚","💛","💜","💝","💞","💟","💢","💣","💤","💥","💦","💨","💩","💫","💬","💭","💯","🕳️","🖤","🗨️","🗯️","😀","😁","😂","😃","😄","😅","😆","😇","😈","😉","😊","😋","😌","😍","😎","😏","😐","😑","😒","😓","😔","😕","😖","😗","😘","😙","😚","😛","😜","😝","😞","😟","😠","😡","😢","😣","😤","😥","😦","😧","😨","😩","😪","😫","😬","😭","😮","😮‍💨","😯","😰","😱","😲","😳","😴","😵","😵‍💫","😶","😶‍🌫️","😷","😸","😹","😺","😻","😼","😽","😾","😿","🙀","🙁","🙂","🙃","🙄","🙈","🙉","🙊","🤍","🤎","🤐","🤑","🤒","🤓","🤔","🤕","🤖","🤗","🤠","🤡","🤢","🤣","🤤","🤥","🤧","🤨","🤩","🤪","🤫","🤬","🤭","🤮","🤯","🥰","🥱","🥲","🥳","🥴","🥵","🥶","🥸","🥺","🧐","🧡"],body:["☝🏻","☝🏼","☝🏽","☝🏾","☝🏿","☝️","✊","✊🏻","✊🏼","✊🏽","✊🏾","✊🏿","✋","✋🏻","✋🏼","✋🏽","✋🏾","✋🏿","✌🏻","✌🏼","✌🏽","✌🏾","✌🏿","✌️","✍🏻","✍🏼","✍🏽","✍🏾","✍🏿","✍️","👀","👁️","👂","👂🏻","👂🏼","👂🏽","👂🏾","👂🏿","👃","👃🏻","👃🏼","👃🏽","👃🏾","👃🏿","👄","👅","👆","👆🏻","👆🏼","👆🏽","👆🏾","👆🏿","👇","👇🏻","👇🏼","👇🏽","👇🏾","👇🏿","👈","👈🏻","👈🏼","👈🏽","👈🏾","👈🏿","👉","👉🏻","👉🏼","👉🏽","👉🏾","👉🏿","👊","👊🏻","👊🏼","👊🏽","👊🏾","👊🏿","👋","👋🏻","👋🏼","👋🏽","👋🏾","👋🏿","👌","👌🏻","👌🏼","👌🏽","👌🏾","👌🏿","👍","👍🏻","👍🏼","👍🏽","👍🏾","👍🏿","👎","👎🏻","👎🏼","👎🏽","👎🏾","👎🏿","👏","👏🏻","👏🏼","👏🏽","👏🏾","👏🏿","👐","👐🏻","👐🏼","👐🏽","👐🏾","👐🏿","💅","💅🏻","💅🏼","💅🏽","💅🏾","💅🏿","💪","💪🏻","💪🏼","💪🏽","💪🏾","💪🏿","🖐🏻","🖐🏼","🖐🏽","🖐🏾","🖐🏿","🖐️","🖕","🖕🏻","🖕🏼","🖕🏽","🖕🏾","🖕🏿","🖖","🖖🏻","🖖🏼","🖖🏽","🖖🏾","🖖🏿","🙌","🙌🏻","🙌🏼","🙌🏽","🙌🏾","🙌🏿","🙏","🙏🏻","🙏🏼","🙏🏽","🙏🏾","🙏🏿","🤌","🤌🏻","🤌🏼","🤌🏽","🤌🏾","🤌🏿","🤏","🤏🏻","🤏🏼","🤏🏽","🤏🏾","🤏🏿","🤘","🤘🏻","🤘🏼","🤘🏽","🤘🏾","🤘🏿","🤙","🤙🏻","🤙🏼","🤙🏽","🤙🏾","🤙🏿","🤚","🤚🏻","🤚🏼","🤚🏽","🤚🏾","🤚🏿","🤛","🤛🏻","🤛🏼","🤛🏽","🤛🏾","🤛🏿","🤜","🤜🏻","🤜🏼","🤜🏽","🤜🏾","🤜🏿","🤝","🤞","🤞🏻","🤞🏼","🤞🏽","🤞🏾","🤞🏿","🤟","🤟🏻","🤟🏼","🤟🏽","🤟🏾","🤟🏿","🤲","🤲🏻","🤲🏼","🤲🏽","🤲🏾","🤲🏿","🤳","🤳🏻","🤳🏼","🤳🏽","🤳🏾","🤳🏿","🦴","🦵","🦵🏻","🦵🏼","🦵🏽","🦵🏾","🦵🏿","🦶","🦶🏻","🦶🏼","🦶🏽","🦶🏾","🦶🏿","🦷","🦻","🦻🏻","🦻🏼","🦻🏽","🦻🏾","🦻🏿","🦾","🦿","🧠","🫀","🫁"],person:["🎅","🎅🏻","🎅🏼","🎅🏽","🎅🏾","🎅🏿","👦","👦🏻","👦🏼","👦🏽","👦🏾","👦🏿","👧","👧🏻","👧🏼","👧🏽","👧🏾","👧🏿","👨","👨‍⚕️","👨‍⚖️","👨‍✈️","👨‍🌾","👨‍🍳","👨‍🍼","👨‍🎓","👨‍🎤","👨‍🎨","👨‍🏫","👨‍🏭","👨‍💻","👨‍💼","👨‍🔧","👨‍🔬","👨‍🚀","👨‍🚒","👨‍🦰","👨‍🦱","👨‍🦲","👨‍🦳","👨🏻","👨🏻‍⚕️","👨🏻‍⚖️","👨🏻‍✈️","👨🏻‍🌾","👨🏻‍🍳","👨🏻‍🍼","👨🏻‍🎓","👨🏻‍🎤","👨🏻‍🎨","👨🏻‍🏫","👨🏻‍🏭","👨🏻‍💻","👨🏻‍💼","👨🏻‍🔧","👨🏻‍🔬","👨🏻‍🚀","👨🏻‍🚒","👨🏻‍🦰","👨🏻‍🦱","👨🏻‍🦲","👨🏻‍🦳","👨🏼","👨🏼‍⚕️","👨🏼‍⚖️","👨🏼‍✈️","👨🏼‍🌾","👨🏼‍🍳","👨🏼‍🍼","👨🏼‍🎓","👨🏼‍🎤","👨🏼‍🎨","👨🏼‍🏫","👨🏼‍🏭","👨🏼‍💻","👨🏼‍💼","👨🏼‍🔧","👨🏼‍🔬","👨🏼‍🚀","👨🏼‍🚒","👨🏼‍🦰","👨🏼‍🦱","👨🏼‍🦲","👨🏼‍🦳","👨🏽","👨🏽‍⚕️","👨🏽‍⚖️","👨🏽‍✈️","👨🏽‍🌾","👨🏽‍🍳","👨🏽‍🍼","👨🏽‍🎓","👨🏽‍🎤","👨🏽‍🎨","👨🏽‍🏫","👨🏽‍🏭","👨🏽‍💻","👨🏽‍💼","👨🏽‍🔧","👨🏽‍🔬","👨🏽‍🚀","👨🏽‍🚒","👨🏽‍🦰","👨🏽‍🦱","👨🏽‍🦲","👨🏽‍🦳","👨🏾","👨🏾‍⚕️","👨🏾‍⚖️","👨🏾‍✈️","👨🏾‍🌾","👨🏾‍🍳","👨🏾‍🍼","👨🏾‍🎓","👨🏾‍🎤","👨🏾‍🎨","👨🏾‍🏫","👨🏾‍🏭","👨🏾‍💻","👨🏾‍💼","👨🏾‍🔧","👨🏾‍🔬","👨🏾‍🚀","👨🏾‍🚒","👨🏾‍🦰","👨🏾‍🦱","👨🏾‍🦲","👨🏾‍🦳","👨🏿","👨🏿‍⚕️","👨🏿‍⚖️","👨🏿‍✈️","👨🏿‍🌾","👨🏿‍🍳","👨🏿‍🍼","👨🏿‍🎓","👨🏿‍🎤","👨🏿‍🎨","👨🏿‍🏫","👨🏿‍🏭","👨🏿‍💻","👨🏿‍💼","👨🏿‍🔧","👨🏿‍🔬","👨🏿‍🚀","👨🏿‍🚒","👨🏿‍🦰","👨🏿‍🦱","👨🏿‍🦲","👨🏿‍🦳","👩","👩‍⚕️","👩‍⚖️","👩‍✈️","👩‍🌾","👩‍🍳","👩‍🍼","👩‍🎓","👩‍🎤","👩‍🎨","👩‍🏫","👩‍🏭","👩‍💻","👩‍💼","👩‍🔧","👩‍🔬","👩‍🚀","👩‍🚒","👩‍🦰","👩‍🦱","👩‍🦲","👩‍🦳","👩🏻","👩🏻‍⚕️","👩🏻‍⚖️","👩🏻‍✈️","👩🏻‍🌾","👩🏻‍🍳","👩🏻‍🍼","👩🏻‍🎓","👩🏻‍🎤","👩🏻‍🎨","👩🏻‍🏫","👩🏻‍🏭","👩🏻‍💻","👩🏻‍💼","👩🏻‍🔧","👩🏻‍🔬","👩🏻‍🚀","👩🏻‍🚒","👩🏻‍🦰","👩🏻‍🦱","👩🏻‍🦲","👩🏻‍🦳","👩🏼","👩🏼‍⚕️","👩🏼‍⚖️","👩🏼‍✈️","👩🏼‍🌾","👩🏼‍🍳","👩🏼‍🍼","👩🏼‍🎓","👩🏼‍🎤","👩🏼‍🎨","👩🏼‍🏫","👩🏼‍🏭","👩🏼‍💻","👩🏼‍💼","👩🏼‍🔧","👩🏼‍🔬","👩🏼‍🚀","👩🏼‍🚒","👩🏼‍🦰","👩🏼‍🦱","👩🏼‍🦲","👩🏼‍🦳","👩🏽","👩🏽‍⚕️","👩🏽‍⚖️","👩🏽‍✈️","👩🏽‍🌾","👩🏽‍🍳","👩🏽‍🍼","👩🏽‍🎓","👩🏽‍🎤","👩🏽‍🎨","👩🏽‍🏫","👩🏽‍🏭","👩🏽‍💻","👩🏽‍💼","👩🏽‍🔧","👩🏽‍🔬","👩🏽‍🚀","👩🏽‍🚒","👩🏽‍🦰","👩🏽‍🦱","👩🏽‍🦲","👩🏽‍🦳","👩🏾","👩🏾‍⚕️","👩🏾‍⚖️","👩🏾‍✈️","👩🏾‍🌾","👩🏾‍🍳","👩🏾‍🍼","👩🏾‍🎓","👩🏾‍🎤","👩🏾‍🎨","👩🏾‍🏫","👩🏾‍🏭","👩🏾‍💻","👩🏾‍💼","👩🏾‍🔧","👩🏾‍🔬","👩🏾‍🚀","👩🏾‍🚒","👩🏾‍🦰","👩🏾‍🦱","👩🏾‍🦲","👩🏾‍🦳","👩🏿","👩🏿‍⚕️","👩🏿‍⚖️","👩🏿‍✈️","👩🏿‍🌾","👩🏿‍🍳","👩🏿‍🍼","👩🏿‍🎓","👩🏿‍🎤","👩🏿‍🎨","👩🏿‍🏫","👩🏿‍🏭","👩🏿‍💻","👩🏿‍💼","👩🏿‍🔧","👩🏿‍🔬","👩🏿‍🚀","👩🏿‍🚒","👩🏿‍🦰","👩🏿‍🦱","👩🏿‍🦲","👩🏿‍🦳","👮","👮‍♀️","👮‍♂️","👮🏻","👮🏻‍♀️","👮🏻‍♂️","👮🏼","👮🏼‍♀️","👮🏼‍♂️","👮🏽","👮🏽‍♀️","👮🏽‍♂️","👮🏾","👮🏾‍♀️","👮🏾‍♂️","👮🏿","👮🏿‍♀️","👮🏿‍♂️","👰","👰‍♀️","👰‍♂️","👰🏻","👰🏻‍♀️","👰🏻‍♂️","👰🏼","👰🏼‍♀️","👰🏼‍♂️","👰🏽","👰🏽‍♀️","👰🏽‍♂️","👰🏾","👰🏾‍♀️","👰🏾‍♂️","👰🏿","👰🏿‍♀️","👰🏿‍♂️","👱","👱‍♀️","👱‍♂️","👱🏻","👱🏻‍♀️","👱🏻‍♂️","👱🏼","👱🏼‍♀️","👱🏼‍♂️","👱🏽","👱🏽‍♀️","👱🏽‍♂️","👱🏾","👱🏾‍♀️","👱🏾‍♂️","👱🏿","👱🏿‍♀️","👱🏿‍♂️","👲","👲🏻","👲🏼","👲🏽","👲🏾","👲🏿","👳","👳‍♀️","👳‍♂️","👳🏻","👳🏻‍♀️","👳🏻‍♂️","👳🏼","👳🏼‍♀️","👳🏼‍♂️","👳🏽","👳🏽‍♀️","👳🏽‍♂️","👳🏾","👳🏾‍♀️","👳🏾‍♂️","👳🏿","👳🏿‍♀️","👳🏿‍♂️","👴","👴🏻","👴🏼","👴🏽","👴🏾","👴🏿","👵","👵🏻","👵🏼","👵🏽","👵🏾","👵🏿","👶","👶🏻","👶🏼","👶🏽","👶🏾","👶🏿","👷","👷‍♀️","👷‍♂️","👷🏻","👷🏻‍♀️","👷🏻‍♂️","👷🏼","👷🏼‍♀️","👷🏼‍♂️","👷🏽","👷🏽‍♀️","👷🏽‍♂️","👷🏾","👷🏾‍♀️","👷🏾‍♂️","👷🏿","👷🏿‍♀️","👷🏿‍♂️","👸","👸🏻","👸🏼","👸🏽","👸🏾","👸🏿","👼","👼🏻","👼🏼","👼🏽","👼🏾","👼🏿","💁","💁‍♀️","💁‍♂️","💁🏻","💁🏻‍♀️","💁🏻‍♂️","💁🏼","💁🏼‍♀️","💁🏼‍♂️","💁🏽","💁🏽‍♀️","💁🏽‍♂️","💁🏾","💁🏾‍♀️","💁🏾‍♂️","💁🏿","💁🏿‍♀️","💁🏿‍♂️","💂","💂‍♀️","💂‍♂️","💂🏻","💂🏻‍♀️","💂🏻‍♂️","💂🏼","💂🏼‍♀️","💂🏼‍♂️","💂🏽","💂🏽‍♀️","💂🏽‍♂️","💂🏾","💂🏾‍♀️","💂🏾‍♂️","💂🏿","💂🏿‍♀️","💂🏿‍♂️","💆","💆‍♀️","💆‍♂️","💆🏻","💆🏻‍♀️","💆🏻‍♂️","💆🏼","💆🏼‍♀️","💆🏼‍♂️","💆🏽","💆🏽‍♀️","💆🏽‍♂️","💆🏾","💆🏾‍♀️","💆🏾‍♂️","💆🏿","💆🏿‍♀️","💆🏿‍♂️","💇","💇🏻","💇🏼","💇🏽","🕵🏻","🕵🏻‍♀️","🕵🏻‍♂️","🕵🏼","🕵🏼‍♀️","🕵🏼‍♂️","🕵🏽","🕵🏽‍♀️","🕵🏽‍♂️","🕵🏾","🕵🏾‍♀️","🕵🏾‍♂️","🕵🏿","🕵🏿‍♀️","🕵🏿‍♂️","🕵️","🕵️‍♀️","🕵️‍♂️","🙅","🙅‍♀️","🙅‍♂️","🙅🏻","🙅🏻‍♀️","🙅🏻‍♂️","🙅🏼","🙅🏼‍♀️","🙅🏼‍♂️","🙅🏽","🙅🏽‍♀️","🙅🏽‍♂️","🙅🏾","🙅🏾‍♀️","🙅🏾‍♂️","🙅🏿","🙅🏿‍♀️","🙅🏿‍♂️","🙆","🙆‍♀️","🙆‍♂️","🙆🏻","🙆🏻‍♀️","🙆🏻‍♂️","🙆🏼","🙆🏼‍♀️","🙆🏼‍♂️","🙆🏽","🙆🏽‍♀️","🙆🏽‍♂️","🙆🏾","🙆🏾‍♀️","🙆🏾‍♂️","🙆🏿","🙆🏿‍♀️","🙆🏿‍♂️","🙇","🙇‍♀️","🙇‍♂️","🙇🏻","🙇🏻‍♀️","🙇🏻‍♂️","🙇🏼","🙇🏼‍♀️","🙇🏼‍♂️","🙇🏽","🙇🏽‍♀️","🙇🏽‍♂️","🙇🏾","🙇🏾‍♀️","🙇🏾‍♂️","🙇🏿","🙇🏿‍♀️","🙇🏿‍♂️","🙋","🙋‍♀️","🙋‍♂️","🙋🏻","🙋🏻‍♀️","🙋🏻‍♂️","🙋🏼","🙋🏼‍♀️","🙋🏼‍♂️","🙋🏽","🙋🏽‍♀️","🙋🏽‍♂️","🙋🏾","🙋🏾‍♀️","🙋🏾‍♂️","🙋🏿","🙋🏿‍♀️","🙋🏿‍♂️","🙍","🙍‍♀️","🙍‍♂️","🙍🏻","🙍🏻‍♀️","🙍🏻‍♂️","🙍🏼","🙍🏼‍♀️","🙍🏼‍♂️","🙍🏽","🙍🏽‍♀️","🙍🏽‍♂️","🙍🏾","🙍🏾‍♀️","🙍🏾‍♂️","🙍🏿","🙍🏿‍♀️","🙍🏿‍♂️","🙎","🙎‍♀️","🙎‍♂️","🙎🏻","🙎🏻‍♀️","🙎🏻‍♂️","🙎🏼","🙎🏼‍♀️","🙎🏼‍♂️","🙎🏽","🙎🏽‍♀️","🙎🏽‍♂️","🙎🏾","🙎🏾‍♀️","🙎🏾‍♂️","🙎🏿","🙎🏿‍♀️","🙎🏿‍♂️","🤦","🤦‍♀️","🤦‍♂️","🤦🏻","🤦🏻‍♀️","🤦🏻‍♂️","🤦🏼","🤦🏼‍♀️","🤦🏼‍♂️","🤦🏽","🤦🏽‍♀️","🤦🏽‍♂️","🤦🏾","🤦🏾‍♀️","🤦🏾‍♂️","🤦🏿","🤦🏿‍♀️","🤦🏿‍♂️","🤰","🤰🏻","🤰🏼","🤰🏽","🤰🏾","🤰🏿","🤱","🤱🏻","🤱🏼","🤱🏽","🤱🏾","🤱🏿","🤴","🤴🏻","🤴🏼","🤴🏽","🤴🏾","🤴🏿","🤵","🤵‍♀️","🤵‍♂️","🤵🏻","🤵🏻‍♀️","🤵🏻‍♂️","🤵🏼","🤵🏼‍♀️","🤵🏼‍♂️","🤵🏽","🤵🏽‍♀️","🤵🏽‍♂️","🤵🏾","🤵🏾‍♀️","🤵🏾‍♂️","🤵🏿","🤵🏿‍♀️","🤵🏿‍♂️","🤶","🤶🏻","🤶🏼","🤶🏽","🤶🏾","🤶🏿","🤷","🤷‍♀️","🤷‍♂️","🤷🏻","🤷🏻‍♀️","🤷🏻‍♂️","🤷🏼","🤷🏼‍♀️","🤷🏼‍♂️","🤷🏽","🤷🏽‍♀️","🤷🏽‍♂️","🤷🏾","🤷🏾‍♀️","🤷🏾‍♂️","🤷🏿","🤷🏿‍♀️","🤷🏿‍♂️","🥷","🥷🏻","🥷🏼","🥷🏽","🥷🏾","🥷🏿","🦸","🦸‍♀️","🦸‍♂️","🦸🏻","🦸🏻‍♀️","🦸🏻‍♂️","🦸🏼","🦸🏼‍♀️","🦸🏼‍♂️","🦸🏽","🦸🏽‍♀️","🦸🏽‍♂️","🦸🏾","🦸🏾‍♀️","🦸🏾‍♂️","🦸🏿","🦸🏿‍♀️","🦸🏿‍♂️","🦹","🦹‍♀️","🦹‍♂️","🦹🏻","🦹🏻‍♀️","🦹🏻‍♂️","🦹🏼","🦹🏼‍♀️","🦹🏼‍♂️","🦹🏽","🦹🏽‍♀️","🦹🏽‍♂️","🦹🏾","🦹🏾‍♀️","🦹🏾‍♂️","🦹🏿","🦹🏿‍♀️","🦹🏿‍♂️","🧏","🧏‍♀️","🧏‍♂️","🧏🏻","🧏🏻‍♀️","🧏🏻‍♂️","🧏🏼","🧏🏼‍♀️","🧏🏼‍♂️","🧏🏽","🧏🏽‍♀️","🧏🏽‍♂️","🧏🏾","🧏🏾‍♀️","🧏🏾‍♂️","🧏🏿","🧏🏿‍♀️","🧏🏿‍♂️","🧑","🧑‍⚕️","🧑‍⚖️","🧑‍✈️","🧑‍🌾","🧑‍🍳","🧑‍🍼","🧑‍🎄","🧑‍🎓","🧑‍🎤","🧑‍🎨","🧑‍🏫","🧑‍🏭","🧑‍💻","🧑‍💼","🧑‍🔧","🧑‍🔬","🧑‍🚀","🧑‍🚒","🧑‍🦰","🧑‍🦱","🧑‍🦲","🧑‍🦳","🧑🏻","🧑🏻‍⚕️","🧑🏻‍⚖️","🧑🏻‍✈️","🧑🏻‍🌾","🧑🏻‍🍳","🧑🏻‍🍼","🧑🏻‍🎄","🧑🏻‍🎓","🧑🏻‍🎤","🧑🏻‍🎨","🧑🏻‍🏫","🧑🏻‍🏭","🧑🏻‍💻","🧑🏻‍💼","🧑🏻‍🔧","🧑🏻‍🔬","🧑🏻‍🚀","🧑🏻‍🚒","🧑🏻‍🦰","🧑🏻‍🦱","🧑🏻‍🦲","🧑🏻‍🦳","🧑🏼","🧑🏼‍⚕️","🧑🏼‍⚖️","🧑🏼‍✈️","🧑🏼‍🌾","🧑🏼‍🍳","🧑🏼‍🍼","🧑🏼‍🎄","🧑🏼‍🎓","🧑🏼‍🎤","🧑🏼‍🎨","🧑🏼‍🏫","🧑🏼‍🏭","🧑🏼‍💻","🧑🏼‍💼","🧑🏼‍🔧","🧑🏼‍🔬","🧑🏼‍🚀","🧑🏼‍🚒","🧑🏼‍🦰","🧑🏼‍🦱","🧑🏼‍🦲","🧑🏼‍🦳","🧑🏽","🧑🏽‍⚕️","🧑🏽‍⚖️","🧑🏽‍✈️","🧑🏽‍🌾","🧑🏽‍🍳","🧑🏽‍🍼","🧑🏽‍🎄","🧑🏽‍🎓","🧑🏽‍🎤","🧑🏽‍🎨","🧑🏽‍🏫","🧑🏽‍🏭","🧑🏽‍💻","🧑🏽‍💼","🧑🏽‍🔧","🧑🏽‍🔬","🧑🏽‍🚀","🧑🏽‍🚒","🧑🏽‍🦰","🧑🏽‍🦱","🧑🏽‍🦲","🧑🏽‍🦳","🧑🏾","🧑🏾‍⚕️","🧑🏾‍⚖️","🧑🏾‍✈️","🧑🏾‍🌾","🧑🏾‍🍳","🧑🏾‍🍼","🧑🏾‍🎄","🧑🏾‍🎓","🧑🏾‍🎤","🧑🏾‍🎨","🧑🏾‍🏫","🧑🏾‍🏭","🧑🏾‍💻","🧑🏾‍💼","🧑🏾‍🔧","🧑🏾‍🔬","🧑🏾‍🚀","🧑🏾‍🚒","🧑🏾‍🦰","🧑🏾‍🦱","🧑🏾‍🦲","🧑🏾‍🦳","🧑🏿","🧑🏿‍⚕️","🧑🏿‍⚖️","🧑🏿‍✈️","🧑🏿‍🌾","🧑🏿‍🍳","🧑🏿‍🍼","🧑🏿‍🎄","🧑🏿‍🎓","🧑🏿‍🎤","🧑🏿‍🎨","🧑🏿‍🏫","🧑🏿‍🏭","🧑🏿‍💻","🧑🏿‍💼","🧑🏿‍🔧","🧑🏿‍🔬","🧑🏿‍🚀","🧑🏿‍🚒","🧑🏿‍🦰","🧑🏿‍🦱","🧑🏿‍🦲","🧑🏿‍🦳","🧒","🧒🏻","🧒🏼","🧒🏽","🧒🏾","🧒🏿","🧓","🧓🏻","🧓🏼","🧓🏽","🧓🏾","🧓🏿","🧔","🧔‍♀️","🧔‍♂️","🧔🏻","🧔🏻‍♀️","🧔🏻‍♂️","🧔🏼","🧔🏼‍♀️","🧔🏼‍♂️","🧔🏽","🧔🏽‍♀️","🧔🏽‍♂️","🧔🏾","🧔🏾‍♀️","🧔🏾‍♂️","🧔🏿","🧔🏿‍♀️","🧔🏿‍♂️","🧕","🧕🏻","🧕🏼","🧕🏽","🧕🏾","🧕🏿","🧙","🧙‍♀️","🧙‍♂️","🧙🏻","🧙🏻‍♀️","🧙🏻‍♂️","🧙🏼","🧙🏼‍♀️","🧙🏼‍♂️","🧙🏽","🧙🏽‍♀️","🧙🏽‍♂️","🧙🏾","🧙🏾‍♀️","🧙🏾‍♂️","🧙🏿","🧙🏿‍♀️","🧙🏿‍♂️","🧚","🧚‍♀️","🧚‍♂️","🧚🏻","🧚🏻‍♀️","🧚🏻‍♂️","🧚🏼","🧚🏼‍♀️","🧚🏼‍♂️","🧚🏽","🧚🏽‍♀️","🧚🏽‍♂️","🧚🏾","🧚🏾‍♀️","🧚🏾‍♂️","🧚🏿","🧚🏿‍♀️","🧚🏿‍♂️","🧛","🧛‍♀️","🧛‍♂️","🧛🏻","🧛🏻‍♀️","🧛🏻‍♂️","🧛🏼","🧛🏼‍♀️","🧛🏼‍♂️","🧛🏽","🧛🏽‍♀️","🧛🏽‍♂️","🧛🏾","🧛🏾‍♀️","🧛🏾‍♂️","🧛🏿","🧛🏿‍♀️","🧛🏿‍♂️","🧜","🧜‍♀️","🧜‍♂️","🧜🏻","🧜🏻‍♀️","🧜🏻‍♂️","🧜🏼","🧜🏼‍♀️","🧜🏼‍♂️","🧜🏽","🧜🏽‍♀️","🧜🏽‍♂️","🧜🏾","🧜🏾‍♀️","🧜🏾‍♂️","🧜🏿","🧜🏿‍♀️","🧜🏿‍♂️","🧝","🧝‍♀️","🧝‍♂️","🧝🏻","🧝🏻‍♀️","🧝🏻‍♂️","🧝🏼","🧝🏼‍♀️","🧝🏼‍♂️","🧝🏽","🧝🏽‍♀️","🧝🏽‍♂️","🧝🏾","🧝🏾‍♀️","🧝🏾‍♂️","🧝🏿","🧝🏿‍♀️","🧝🏿‍♂️","🧞","🧞‍♀️","🧞‍♂️","🧟","🧟‍♀️","🧟‍♂️"],nature:["☘️","🌱","🌲","🌳","🌴","🌵","🌷","🌸","🌹","🌺","🌻","🌼","🌾","🌿","🍀","🍁","🍂","🍃","🏵️","🐀","🐁","🐂","🐃","🐄","🐅","🐆","🐇","🐈","🐈‍⬛","🐉","🐊","🐋","🐌","🐍","🐎","🐏","🐐","🐑","🐒","🐓","🐔","🐕","🐕‍🦺","🐖","🐗","🐘","🐙","🐚","🐛","🐜","🐝","🐞","🐟","🐠","🐡","🐢","🐣","🐤","🐥","🐦","🐧","🐨","🐩","🐪","🐫","🐬","🐭","🐮","🐯","🐰","🐱","🐲","🐳","🐴","🐵","🐶","🐷","🐸","🐹","🐺","🐻","🐻‍❄️","🐼","🐽","🐾","🐿️","💐","💮","🕊️","🕷️","🕸️","🥀","🦁","🦂","🦃","🦄","🦅","🦆","🦇","🦈","🦉","🦊","🦋","🦌","🦍","🦎","🦏","🦒","🦓","🦔","🦕","🦖","🦗","🦘","🦙","🦚","🦛","🦜","🦝","🦟","🦠","🦡","🦢","🦣","🦤","🦥","🦦","🦧","🦨","🦩","🦫","🦬","🦭","🦮","🪰","🪱","🪲","🪳","🪴","🪶"],food:["☕","🌭","🌮","🌯","🌰","🌶️","🌽","🍄","🍅","🍆","🍇","🍈","🍉","🍊","🍋","🍌","🍍","🍎","🍏","🍐","🍑","🍒","🍓","🍔","🍕","🍖","🍗","🍘","🍙","🍚","🍛","🍜","🍝","🍞","🍟","🍠","🍡","🍢","🍣","🍤","🍥","🍦","🍧","🍨","🍩","🍪","🍫","🍬","🍭","🍮","🍯","🍰","🍱","🍲","🍳","🍴","🍵","🍶","🍷","🍸","🍹","🍺","🍻","🍼","🍽️","🍾","🍿","🎂","🏺","🔪","🥂","🥃","🥄","🥐","🥑","🥒","🥓","🥔","🥕","🥖","🥗","🥘","🥙","🥚","🥛","🥜","🥝","🥞","🥟","🥠","🥡","🥢","🥣","🥤","🥥","🥦","🥧","🥨","🥩","🥪","🥫","🥬","🥭","🥮","🥯","🦀","🦐","🦑","🦞","🦪","🧀","🧁","🧂","🧃","🧄","🧅","🧆","🧇","🧈","🧉","🧊","🧋","🫐","🫑","🫒","🫓","🫔","🫕","🫖"],travel:["⌚","⌛","⏰","⏱️","⏲️","⏳","☀️","☁️","☂️","☃️","☄️","☔","♨️","⚓","⚡","⛄","⛅","⛈️","⛩️","⛪","⛰️","⛱️","⛲","⛴️","⛵","⛺","⛽","✈️","❄️","⭐","🌀","🌁","🌂","🌃","🌄","🌅","🌆","🌇","🌈","🌉","🌊","🌋","🌌","🌍","🌎","🌏","🌐","🌑","🌒","🌓","🌔","🌕","🌖","🌗","🌘","🌙","🌚","🌛","🌜","🌝","🌞","🌟","🌠","🌡️","🌤️","🌥️","🌦️","🌧️","🌨️","🌩️","🌪️","🌫️","🌬️","🎠","🎡","🎢","🎪","🏍️","🏎️","🏔️","🏕️","🏖️","🏗️","🏘️","🏙️","🏚️","🏛️","🏜️","🏝️","🏞️","🏟️","🏠","🏡","🏢","🏣","🏤","🏥","🏦","🏨","🏩","🏪","🏫","🏬","🏭","🏯","🏰","💈","💒","💧","💺","🔥","🕋","🕌","🕍","🕐","🕑","🕒","🕓","🕔","🕕","🕖","🕗","🕘","🕙","🕚","🕛","🕜","🕝","🕞","🕟","🕠","🕡","🕢","🕣","🕤","🕥","🕦","🕧","🕰️","🗺️","🗻","🗼","🗽","🗾","🚀","🚁","🚂","🚃","🚄","🚅","🚆","🚇","🚈","🚉","🚊","🚋","🚌","🚍","🚎","🚏","🚐","🚑","🚒","🚓","🚔","🚕","🚖","🚗","🚘","🚙","🚚","🚛","🚜","🚝","🚞","🚟","🚠","🚡","🚢","🚤","🚥","🚦","🚧","🚨","🚲","🛎️","🛑","🛕","🛖","🛢️","🛣️","🛤️","🛥️","🛩️","🛫","🛬","🛰️","🛳️","🛴","🛵","🛶","🛸","🛹","🛺","🛻","🛼","🦼","🦽","🧭","🧱","🧳","🪂","🪐","🪨","🪵"],activity:["♟️","♠️","♣️","♥️","♦️","⚽","⚾","⛳","⛸️","✨","🀄","🃏","🎀","🎁","🎃","🎄","🎆","🎇","🎈","🎉","🎊","🎋","🎍","🎎","🎏","🎐","🎑","🎖️","🎗️","🎟️","🎣","🎨","🎫","🎭","🎮","🎯","🎰","🎱","🎲","🎳","🎴","🎽","🎾","🎿","🏀","🏅","🏆","🏈","🏉","🏏","🏐","🏑","🏒","🏓","🏸","🔮","🕹️","🖼️","🛷","🤿","🥅","🥇","🥈","🥉","🥊","🥋","🥌","🥍","🥎","🥏","🧧","🧨","🧩","🧵","🧶","🧸","🧿","🪀","🪁","🪄","🪅","🪆","🪡","🪢"],object:["⌨️","☎️","⚒️","⚔️","⚖️","⚗️","⚙️","⚰️","⚱️","⛏️","⛑️","⛓️","✂️","✉️","✏️","✒️","🎒","🎓","🎙️","🎚️","🎛️","🎞️","🎤","🎥","🎧","🎩","🎬","🎵","🎶","🎷","🎸","🎹","🎺","🎻","🎼","🏮","🏷️","🏹","👑","👒","👓","👔","👕","👖","👗","👘","👙","👚","👛","👜","👝","👞","👟","👠","👡","👢","💄","💉","💊","💍","💎","💡","💰","💳","💴","💵","💶","💷","💸","💹","💻","💼","💽","💾","💿","📀","📁","📂","📃","📄","📅","📆","📇","📈","📉","📊","📋","📌","📍","📎","📏","📐","📑","📒","📓","📔","📕","📖","📗","📘","📙","📚","📜","📝","📞","📟","📠","📡","📢","📣","📤","📥","📦","📧","📨","📩","📪","📫","📬","📭","📮","📯","📰","📱","📲","📷","📸","📹","📺","📻","📼","📽️","📿","🔇","🔈","🔉","🔊","🔋","🔌","🔍","🔎","🔏","🔐","🔑","🔒","🔓","🔔","🔕","🔖","🔗","🔦","🔧","🔨","🔩","🔫","🔬","🔭","🕯️","🕶️","🖇️","🖊️","🖋️","🖌️","🖍️","🖥️","🖨️","🖱️","🖲️","🗂️","🗃️","🗄️","🗑️","🗒️","🗓️","🗜️","🗝️","🗞️","🗡️","🗳️","🗿","🚪","🚬","🚽","🚿","🛁","🛋️","🛍️","🛏️","🛒","🛗","🛠️","🛡️","🥁","🥻","🥼","🥽","🥾","🥿","🦯","🦺","🧢","🧣","🧤","🧥","🧦","🧪","🧫","🧬","🧮","🧯","🧰","🧲","🧴","🧷","🧹","🧺","🧻","🧼","🧽","🧾","🩰","🩱","🩲","🩳","🩴","🩸","🩹","🩺","🪃","🪑","🪒","🪓","🪔","🪕","🪖","🪗","🪘","🪙","🪚","🪛","🪜","🪝","🪞","🪟","🪠","🪣","🪤","🪥","🪦","🪧"],symbol:["#️⃣","*️⃣","0️⃣","1️⃣","2️⃣","3️⃣","4️⃣","5️⃣","6️⃣","7️⃣","8️⃣","9️⃣","©️","®️","‼️","⁉️","™️","ℹ️","↔️","↕️","↖️","↗️","↘️","↙️","↩️","↪️","⏏️","⏩","⏪","⏫","⏬","⏭️","⏮️","⏯️","⏸️","⏹️","⏺️","Ⓜ️","▪️","▫️","▶️","◀️","◻️","◼️","◽","◾","☑️","☢️","☣️","☦️","☪️","☮️","☯️","☸️","♀️","♂️","♈","♉","♊","♋","♌","♍","♎","♏","♐","♑","♒","♓","♻️","♾️","♿","⚕️","⚛️","⚜️","⚠️","⚧️","⚪","⚫","⛎","⛔","✅","✔️","✖️","✝️","✡️","✳️","✴️","❇️","❌","❎","❓","❔","❕","❗","➕","➖","➗","➡️","➰","➿","⤴️","⤵️","⬅️","⬆️","⬇️","⬛","⬜","⭕","〰️","〽️","㊗️","㊙️","🅰️","🅱️","🅾️","🅿️","🆎","🆑","🆒","🆓","🆔","🆕","🆖","🆗","🆘","🆙","🆚","🈁","🈂️","🈚","🈯","🈲","🈳","🈴","🈵","🈶","🈷️","🈸","🈹","🈺","🉐","🉑","🎦","🏧","💠","💱","💲","📛","📳","📴","📵","📶","🔀","🔁","🔂","🔃","🔄","🔅","🔆","🔘","🔙","🔚","🔛","🔜","🔝","🔞","🔟","🔠","🔡","🔢","🔣","🔤","🔯","🔰","🔱","🔲","🔳","🔴","🔵","🔶","🔷","🔸","🔹","🔺","🔻","🔼","🔽","🕉️","🕎","🚫","🚭","🚮","🚯","🚰","🚱","🚳","🚷","🚸","🚹","🚺","🚻","🚼","🚾","🛂","🛃","🛄","🛅","🛐","🟠","🟡","🟢","🟣","🟤","🟥","🟦","🟧","🟨","🟩","🟪","🟫"],flag:["🇦🇨","🇦🇩","🇦🇪","🇦🇫","🇦🇬","🇦🇮","🇦🇱","🇦🇲","🇦🇴","🇦🇶","🇦🇷","🇦🇸","🇦🇹","🇦🇺","🇦🇼","🇦🇽","🇦🇿","🇧🇦","🇧🇧","🇧🇩","🇧🇪","🇧🇫","🇧🇬","🇧🇭","🇧🇮","🇧🇯","🇧🇱","🇧🇲","🇧🇳","🇧🇴","🇧🇶","🇧🇷","🇧🇸","🇧🇹","🇧🇻","🇧🇼","🇧🇾","🇧🇿","🇨🇦","🇨🇨","🇨🇩","🇨🇫","🇨🇬","🇨🇭","🇨🇮","🇨🇰","🇨🇱","🇨🇲","🇨🇳","🇨🇴","🇨🇵","🇨🇷","🇨🇺","🇨🇻","🇨🇼","🇨🇽","🇨🇾","🇨🇿","🇩🇪","🇩🇬","🇩🇯","🇩🇰","🇩🇲","🇩🇴","🇩🇿","🇪🇦","🇪🇨","🇪🇪","🇪🇬","🇪🇭","🇪🇷","🇪🇸","🇪🇹","🇪🇺","🇫🇮","🇫🇯","🇫🇰","🇫🇲","🇫🇴","🇫🇷","🇬🇦","🇬🇧","🇬🇩","🇬🇪","🇬🇫","🇬🇬","🇬🇭","🇬🇮","🇬🇱","🇬🇲","🇬🇳","🇬🇵","🇬🇶","🇬🇷","🇬🇸","🇬🇹","🇬🇺","🇬🇼","🇬🇾","🇭🇰","🇭🇲","🇭🇳","🇭🇷","🇭🇹","🇭🇺","🇮🇨","🇮🇩","🇮🇪","🇮🇱","🇮🇲","🇮🇳","🇮🇴","🇮🇶","🇮🇷","🇮🇸","🇮🇹","🇯🇪","🇯🇲","🇯🇴","🇯🇵","🇰🇪","🇰🇬","🇰🇭","🇰🇮","🇰🇲","🇰🇳","🇰🇵","🇰🇷","🇰🇼","🇰🇾","🇰🇿","🇱🇦","🇱🇧","🇱🇨","🇱🇮","🇱🇰","🇱🇷","🇱🇸","🇱🇹","🇱🇺","🇱🇻","🇱🇾","🇲🇦","🇲🇨","🇲🇩","🇲🇪","🇲🇫","🇲🇬","🇲🇭","🇲🇰","🇲🇱","🇲🇲","🇲🇳","🇲🇴","🇲🇵","🇲🇶","🇲🇷","🇲🇸","🇲🇹","🇲🇺","🇲🇻","🇲🇼","🇲🇽","🇲🇾","🇲🇿","🇳🇦","🇳🇨","🇳🇪","🇳🇫","🇳🇬","🇳🇮","🇳🇱","🇳🇴","🇳🇵","🇳🇷","🇳🇺","🇳🇿","🇴🇲","🇵🇦","🇵🇪","🇵🇫","🇵🇬","🇵🇭","🇵🇰","🇵🇱","🇵🇲","🇵🇳","🇵🇷","🇵🇸","🇵🇹","🇵🇼","🇵🇾","🇶🇦","🇷🇪","🇷🇴","🇷🇸","🇷🇺","🇷🇼","🇸🇦","🇸🇧","🇸🇨","🇸🇩","🇸🇪","🇸🇬","🇸🇭","🇸🇮","🇸🇯","🇸🇰","🇸🇱","🇸🇲","🇸🇳","🇸🇴","🇸🇷","🇸🇸","🇸🇹","🇸🇻","🇸🇽","🇸🇾","🇸🇿","🇹🇦","🇹🇨","🇹🇩","🇹🇫","🇹🇬","🇹🇭","🇹🇯","🇹🇰","🇹🇱","🇹🇲","🇹🇳","🇹🇴","🇹🇷","🇹🇹","🇹🇻","🇹🇼","🇹🇿","🇺🇦","🇺🇬","🇺🇲","🇺🇳","🇺🇸","🇺🇾","🇺🇿","🇻🇦","🇻🇨","🇻🇪","🇻🇬","🇻🇮","🇻🇳","🇻🇺","🇼🇫","🇼🇸","🇽🇰","🇾🇪","🇾🇹","🇿🇦","🇿🇲","🇿🇼","🎌","🏁","🏳️","🏳️‍⚧️","🏳️‍🌈","🏴","🏴‍☠️","🚩"]},lr={informational:[100,101,102,103],success:[200,201,202,203,204,205,206,207,208,226],redirection:[300,301,302,303,304,305,306,307,308],clientError:[400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,421,422,423,424,425,426,428,429,431,451],serverError:[500,501,502,503,504,505,506,507,508,510,511]},mr=["ES256","ES384","ES512","HS256","HS384","HS512","PS256","PS384","PS512","RS256","RS384","RS512","none"],ur=["FakerBot/{{system.semver}}","Googlebot/2.1 (+http://www.google.com/bot.html)",'Mozilla/5.0 (Linux; Android {{number.int({"min":5,"max":13})}}; {{helpers.arrayElement(["SM-G998U","SM-G998B","SM-G998N","SM-G998P","SM-T800"])}}) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Chrome/{{number.int({"min":55,"max":131})}}.{{system.semver}} Mobile Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}','Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:{{number.int({"min":75, "max":133})}}.0) Gecko/20100101 Firefox/{{number.int({"min":75, "max":133})}}.0','Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Version/16.1 Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}}','Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_15_7) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Chrome/{{number.int({"min":55,"max":131})}}.{{system.semver}} Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}}','Mozilla/5.0 (Windows NT {{helpers.arrayElement(["5.1","5.2","6.0","6.1","6.2","6.3","10.0"])}}; Win64; x64) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Chrome/{{number.int({"min":55,"max":131})}}.{{system.semver}} Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}} Edg/{{number.int({"min":110,"max":131})}}.{{system.semver}}','Mozilla/5.0 (X11; Linux x86_64; rv:{{number.int({"min":75,"max":133})}}.0) Gecko/20100101 Firefox/{{number.int({"min":75,"max":133})}}.0','Mozilla/5.0 (compatible; MSIE {{number.int({"min":6,"max":10})}}.0; Windows NT {{helpers.arrayElement(["5.1","5.2","6.0","6.1","6.2","6.3","10.0"])}}; Trident/{{number.int({"min":4,"max":7})}}.0)','Mozilla/5.0 (iPhone; CPU iPhone OS {{number.int({"min":10,"max":18})}}_{{number.int({"min":0,"max":4})}} like Mac OS X) AppleWebKit/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}.{{number.int({"min":0,"max":99})}} (KHTML, like Gecko) Version/{{number.int({"min":10,"max":18})}}_{{number.int({"min":0,"max":4})}} Mobile/15E148 Safari/{{number.int({"min":536,"max":605})}}.{{number.int({"min":0,"max":99})}}'],at={emoji:cr,http_status_code:lr,jwt_algorithm:mr,user_agent_pattern:ur},pr=at,hr=[{alpha2:"AD",alpha3:"AND",numeric:"020"},{alpha2:"AE",alpha3:"ARE",numeric:"784"},{alpha2:"AF",alpha3:"AFG",numeric:"004"},{alpha2:"AG",alpha3:"ATG",numeric:"028"},{alpha2:"AI",alpha3:"AIA",numeric:"660"},{alpha2:"AL",alpha3:"ALB",numeric:"008"},{alpha2:"AM",alpha3:"ARM",numeric:"051"},{alpha2:"AO",alpha3:"AGO",numeric:"024"},{alpha2:"AQ",alpha3:"ATA",numeric:"010"},{alpha2:"AR",alpha3:"ARG",numeric:"032"},{alpha2:"AS",alpha3:"ASM",numeric:"016"},{alpha2:"AT",alpha3:"AUT",numeric:"040"},{alpha2:"AU",alpha3:"AUS",numeric:"036"},{alpha2:"AW",alpha3:"ABW",numeric:"533"},{alpha2:"AX",alpha3:"ALA",numeric:"248"},{alpha2:"AZ",alpha3:"AZE",numeric:"031"},{alpha2:"BA",alpha3:"BIH",numeric:"070"},{alpha2:"BB",alpha3:"BRB",numeric:"052"},{alpha2:"BD",alpha3:"BGD",numeric:"050"},{alpha2:"BE",alpha3:"BEL",numeric:"056"},{alpha2:"BF",alpha3:"BFA",numeric:"854"},{alpha2:"BG",alpha3:"BGR",numeric:"100"},{alpha2:"BH",alpha3:"BHR",numeric:"048"},{alpha2:"BI",alpha3:"BDI",numeric:"108"},{alpha2:"BJ",alpha3:"BEN",numeric:"204"},{alpha2:"BL",alpha3:"BLM",numeric:"652"},{alpha2:"BM",alpha3:"BMU",numeric:"060"},{alpha2:"BN",alpha3:"BRN",numeric:"096"},{alpha2:"BO",alpha3:"BOL",numeric:"068"},{alpha2:"BQ",alpha3:"BES",numeric:"535"},{alpha2:"BR",alpha3:"BRA",numeric:"076"},{alpha2:"BS",alpha3:"BHS",numeric:"044"},{alpha2:"BT",alpha3:"BTN",numeric:"064"},{alpha2:"BV",alpha3:"BVT",numeric:"074"},{alpha2:"BW",alpha3:"BWA",numeric:"072"},{alpha2:"BY",alpha3:"BLR",numeric:"112"},{alpha2:"BZ",alpha3:"BLZ",numeric:"084"},{alpha2:"CA",alpha3:"CAN",numeric:"124"},{alpha2:"CC",alpha3:"CCK",numeric:"166"},{alpha2:"CD",alpha3:"COD",numeric:"180"},{alpha2:"CF",alpha3:"CAF",numeric:"140"},{alpha2:"CG",alpha3:"COG",numeric:"178"},{alpha2:"CH",alpha3:"CHE",numeric:"756"},{alpha2:"CI",alpha3:"CIV",numeric:"384"},{alpha2:"CK",alpha3:"COK",numeric:"184"},{alpha2:"CL",alpha3:"CHL",numeric:"152"},{alpha2:"CM",alpha3:"CMR",numeric:"120"},{alpha2:"CN",alpha3:"CHN",numeric:"156"},{alpha2:"CO",alpha3:"COL",numeric:"170"},{alpha2:"CR",alpha3:"CRI",numeric:"188"},{alpha2:"CU",alpha3:"CUB",numeric:"192"},{alpha2:"CV",alpha3:"CPV",numeric:"132"},{alpha2:"CW",alpha3:"CUW",numeric:"531"},{alpha2:"CX",alpha3:"CXR",numeric:"162"},{alpha2:"CY",alpha3:"CYP",numeric:"196"},{alpha2:"CZ",alpha3:"CZE",numeric:"203"},{alpha2:"DE",alpha3:"DEU",numeric:"276"},{alpha2:"DJ",alpha3:"DJI",numeric:"262"},{alpha2:"DK",alpha3:"DNK",numeric:"208"},{alpha2:"DM",alpha3:"DMA",numeric:"212"},{alpha2:"DO",alpha3:"DOM",numeric:"214"},{alpha2:"DZ",alpha3:"DZA",numeric:"012"},{alpha2:"EC",alpha3:"ECU",numeric:"218"},{alpha2:"EE",alpha3:"EST",numeric:"233"},{alpha2:"EG",alpha3:"EGY",numeric:"818"},{alpha2:"EH",alpha3:"ESH",numeric:"732"},{alpha2:"ER",alpha3:"ERI",numeric:"232"},{alpha2:"ES",alpha3:"ESP",numeric:"724"},{alpha2:"ET",alpha3:"ETH",numeric:"231"},{alpha2:"FI",alpha3:"FIN",numeric:"246"},{alpha2:"FJ",alpha3:"FJI",numeric:"242"},{alpha2:"FK",alpha3:"FLK",numeric:"238"},{alpha2:"FM",alpha3:"FSM",numeric:"583"},{alpha2:"FO",alpha3:"FRO",numeric:"234"},{alpha2:"FR",alpha3:"FRA",numeric:"250"},{alpha2:"GA",alpha3:"GAB",numeric:"266"},{alpha2:"GB",alpha3:"GBR",numeric:"826"},{alpha2:"GD",alpha3:"GRD",numeric:"308"},{alpha2:"GE",alpha3:"GEO",numeric:"268"},{alpha2:"GF",alpha3:"GUF",numeric:"254"},{alpha2:"GG",alpha3:"GGY",numeric:"831"},{alpha2:"GH",alpha3:"GHA",numeric:"288"},{alpha2:"GI",alpha3:"GIB",numeric:"292"},{alpha2:"GL",alpha3:"GRL",numeric:"304"},{alpha2:"GM",alpha3:"GMB",numeric:"270"},{alpha2:"GN",alpha3:"GIN",numeric:"324"},{alpha2:"GP",alpha3:"GLP",numeric:"312"},{alpha2:"GQ",alpha3:"GNQ",numeric:"226"},{alpha2:"GR",alpha3:"GRC",numeric:"300"},{alpha2:"GS",alpha3:"SGS",numeric:"239"},{alpha2:"GT",alpha3:"GTM",numeric:"320"},{alpha2:"GU",alpha3:"GUM",numeric:"316"},{alpha2:"GW",alpha3:"GNB",numeric:"624"},{alpha2:"GY",alpha3:"GUY",numeric:"328"},{alpha2:"HK",alpha3:"HKG",numeric:"344"},{alpha2:"HM",alpha3:"HMD",numeric:"334"},{alpha2:"HN",alpha3:"HND",numeric:"340"},{alpha2:"HR",alpha3:"HRV",numeric:"191"},{alpha2:"HT",alpha3:"HTI",numeric:"332"},{alpha2:"HU",alpha3:"HUN",numeric:"348"},{alpha2:"ID",alpha3:"IDN",numeric:"360"},{alpha2:"IE",alpha3:"IRL",numeric:"372"},{alpha2:"IL",alpha3:"ISR",numeric:"376"},{alpha2:"IM",alpha3:"IMN",numeric:"833"},{alpha2:"IN",alpha3:"IND",numeric:"356"},{alpha2:"IO",alpha3:"IOT",numeric:"086"},{alpha2:"IQ",alpha3:"IRQ",numeric:"368"},{alpha2:"IR",alpha3:"IRN",numeric:"364"},{alpha2:"IS",alpha3:"ISL",numeric:"352"},{alpha2:"IT",alpha3:"ITA",numeric:"380"},{alpha2:"JE",alpha3:"JEY",numeric:"832"},{alpha2:"JM",alpha3:"JAM",numeric:"388"},{alpha2:"JO",alpha3:"JOR",numeric:"400"},{alpha2:"JP",alpha3:"JPN",numeric:"392"},{alpha2:"KE",alpha3:"KEN",numeric:"404"},{alpha2:"KG",alpha3:"KGZ",numeric:"417"},{alpha2:"KH",alpha3:"KHM",numeric:"116"},{alpha2:"KI",alpha3:"KIR",numeric:"296"},{alpha2:"KM",alpha3:"COM",numeric:"174"},{alpha2:"KN",alpha3:"KNA",numeric:"659"},{alpha2:"KP",alpha3:"PRK",numeric:"408"},{alpha2:"KR",alpha3:"KOR",numeric:"410"},{alpha2:"KW",alpha3:"KWT",numeric:"414"},{alpha2:"KY",alpha3:"CYM",numeric:"136"},{alpha2:"KZ",alpha3:"KAZ",numeric:"398"},{alpha2:"LA",alpha3:"LAO",numeric:"418"},{alpha2:"LB",alpha3:"LBN",numeric:"422"},{alpha2:"LC",alpha3:"LCA",numeric:"662"},{alpha2:"LI",alpha3:"LIE",numeric:"438"},{alpha2:"LK",alpha3:"LKA",numeric:"144"},{alpha2:"LR",alpha3:"LBR",numeric:"430"},{alpha2:"LS",alpha3:"LSO",numeric:"426"},{alpha2:"LT",alpha3:"LTU",numeric:"440"},{alpha2:"LU",alpha3:"LUX",numeric:"442"},{alpha2:"LV",alpha3:"LVA",numeric:"428"},{alpha2:"LY",alpha3:"LBY",numeric:"434"},{alpha2:"MA",alpha3:"MAR",numeric:"504"},{alpha2:"MC",alpha3:"MCO",numeric:"492"},{alpha2:"MD",alpha3:"MDA",numeric:"498"},{alpha2:"ME",alpha3:"MNE",numeric:"499"},{alpha2:"MF",alpha3:"MAF",numeric:"663"},{alpha2:"MG",alpha3:"MDG",numeric:"450"},{alpha2:"MH",alpha3:"MHL",numeric:"584"},{alpha2:"MK",alpha3:"MKD",numeric:"807"},{alpha2:"ML",alpha3:"MLI",numeric:"466"},{alpha2:"MM",alpha3:"MMR",numeric:"104"},{alpha2:"MN",alpha3:"MNG",numeric:"496"},{alpha2:"MO",alpha3:"MAC",numeric:"446"},{alpha2:"MP",alpha3:"MNP",numeric:"580"},{alpha2:"MQ",alpha3:"MTQ",numeric:"474"},{alpha2:"MR",alpha3:"MRT",numeric:"478"},{alpha2:"MS",alpha3:"MSR",numeric:"500"},{alpha2:"MT",alpha3:"MLT",numeric:"470"},{alpha2:"MU",alpha3:"MUS",numeric:"480"},{alpha2:"MV",alpha3:"MDV",numeric:"462"},{alpha2:"MW",alpha3:"MWI",numeric:"454"},{alpha2:"MX",alpha3:"MEX",numeric:"484"},{alpha2:"MY",alpha3:"MYS",numeric:"458"},{alpha2:"MZ",alpha3:"MOZ",numeric:"508"},{alpha2:"NA",alpha3:"NAM",numeric:"516"},{alpha2:"NC",alpha3:"NCL",numeric:"540"},{alpha2:"NE",alpha3:"NER",numeric:"562"},{alpha2:"NF",alpha3:"NFK",numeric:"574"},{alpha2:"NG",alpha3:"NGA",numeric:"566"},{alpha2:"NI",alpha3:"NIC",numeric:"558"},{alpha2:"NL",alpha3:"NLD",numeric:"528"},{alpha2:"NO",alpha3:"NOR",numeric:"578"},{alpha2:"NP",alpha3:"NPL",numeric:"524"},{alpha2:"NR",alpha3:"NRU",numeric:"520"},{alpha2:"NU",alpha3:"NIU",numeric:"570"},{alpha2:"NZ",alpha3:"NZL",numeric:"554"},{alpha2:"OM",alpha3:"OMN",numeric:"512"},{alpha2:"PA",alpha3:"PAN",numeric:"591"},{alpha2:"PE",alpha3:"PER",numeric:"604"},{alpha2:"PF",alpha3:"PYF",numeric:"258"},{alpha2:"PG",alpha3:"PNG",numeric:"598"},{alpha2:"PH",alpha3:"PHL",numeric:"608"},{alpha2:"PK",alpha3:"PAK",numeric:"586"},{alpha2:"PL",alpha3:"POL",numeric:"616"},{alpha2:"PM",alpha3:"SPM",numeric:"666"},{alpha2:"PN",alpha3:"PCN",numeric:"612"},{alpha2:"PR",alpha3:"PRI",numeric:"630"},{alpha2:"PS",alpha3:"PSE",numeric:"275"},{alpha2:"PT",alpha3:"PRT",numeric:"620"},{alpha2:"PW",alpha3:"PLW",numeric:"585"},{alpha2:"PY",alpha3:"PRY",numeric:"600"},{alpha2:"QA",alpha3:"QAT",numeric:"634"},{alpha2:"RE",alpha3:"REU",numeric:"638"},{alpha2:"RO",alpha3:"ROU",numeric:"642"},{alpha2:"RS",alpha3:"SRB",numeric:"688"},{alpha2:"RU",alpha3:"RUS",numeric:"643"},{alpha2:"RW",alpha3:"RWA",numeric:"646"},{alpha2:"SA",alpha3:"SAU",numeric:"682"},{alpha2:"SB",alpha3:"SLB",numeric:"090"},{alpha2:"SC",alpha3:"SYC",numeric:"690"},{alpha2:"SD",alpha3:"SDN",numeric:"729"},{alpha2:"SE",alpha3:"SWE",numeric:"752"},{alpha2:"SG",alpha3:"SGP",numeric:"702"},{alpha2:"SH",alpha3:"SHN",numeric:"654"},{alpha2:"SI",alpha3:"SVN",numeric:"705"},{alpha2:"SJ",alpha3:"SJM",numeric:"744"},{alpha2:"SK",alpha3:"SVK",numeric:"703"},{alpha2:"SL",alpha3:"SLE",numeric:"694"},{alpha2:"SM",alpha3:"SMR",numeric:"674"},{alpha2:"SN",alpha3:"SEN",numeric:"686"},{alpha2:"SO",alpha3:"SOM",numeric:"706"},{alpha2:"SR",alpha3:"SUR",numeric:"740"},{alpha2:"SS",alpha3:"SSD",numeric:"728"},{alpha2:"ST",alpha3:"STP",numeric:"678"},{alpha2:"SV",alpha3:"SLV",numeric:"222"},{alpha2:"SX",alpha3:"SXM",numeric:"534"},{alpha2:"SY",alpha3:"SYR",numeric:"760"},{alpha2:"SZ",alpha3:"SWZ",numeric:"748"},{alpha2:"TC",alpha3:"TCA",numeric:"796"},{alpha2:"TD",alpha3:"TCD",numeric:"148"},{alpha2:"TF",alpha3:"ATF",numeric:"260"},{alpha2:"TG",alpha3:"TGO",numeric:"768"},{alpha2:"TH",alpha3:"THA",numeric:"764"},{alpha2:"TJ",alpha3:"TJK",numeric:"762"},{alpha2:"TK",alpha3:"TKL",numeric:"772"},{alpha2:"TL",alpha3:"TLS",numeric:"626"},{alpha2:"TM",alpha3:"TKM",numeric:"795"},{alpha2:"TN",alpha3:"TUN",numeric:"788"},{alpha2:"TO",alpha3:"TON",numeric:"776"},{alpha2:"TR",alpha3:"TUR",numeric:"792"},{alpha2:"TT",alpha3:"TTO",numeric:"780"},{alpha2:"TV",alpha3:"TUV",numeric:"798"},{alpha2:"TW",alpha3:"TWN",numeric:"158"},{alpha2:"TZ",alpha3:"TZA",numeric:"834"},{alpha2:"UA",alpha3:"UKR",numeric:"804"},{alpha2:"UG",alpha3:"UGA",numeric:"800"},{alpha2:"UM",alpha3:"UMI",numeric:"581"},{alpha2:"US",alpha3:"USA",numeric:"840"},{alpha2:"UY",alpha3:"URY",numeric:"858"},{alpha2:"UZ",alpha3:"UZB",numeric:"860"},{alpha2:"VA",alpha3:"VAT",numeric:"336"},{alpha2:"VC",alpha3:"VCT",numeric:"670"},{alpha2:"VE",alpha3:"VEN",numeric:"862"},{alpha2:"VG",alpha3:"VGB",numeric:"092"},{alpha2:"VI",alpha3:"VIR",numeric:"850"},{alpha2:"VN",alpha3:"VNM",numeric:"704"},{alpha2:"VU",alpha3:"VUT",numeric:"548"},{alpha2:"WF",alpha3:"WLF",numeric:"876"},{alpha2:"WS",alpha3:"WSM",numeric:"882"},{alpha2:"YE",alpha3:"YEM",numeric:"887"},{alpha2:"YT",alpha3:"MYT",numeric:"175"},{alpha2:"ZA",alpha3:"ZAF",numeric:"710"},{alpha2:"ZM",alpha3:"ZMB",numeric:"894"},{alpha2:"ZW",alpha3:"ZWE",numeric:"716"}],nt={country_code:hr,time_zone:_},fr=nt,it={title:"Base",code:"base"},br=it,dr=["/Applications","/bin","/boot","/boot/defaults","/dev","/etc","/etc/defaults","/etc/mail","/etc/namedb","/etc/periodic","/etc/ppp","/home","/home/user","/home/user/dir","/lib","/Library","/lost+found","/media","/mnt","/net","/Network","/opt","/opt/bin","/opt/include","/opt/lib","/opt/sbin","/opt/share","/private","/private/tmp","/private/var","/proc","/rescue","/root","/sbin","/selinux","/srv","/sys","/System","/tmp","/Users","/usr","/usr/X11R6","/usr/bin","/usr/include","/usr/lib","/usr/libdata","/usr/libexec","/usr/local/bin","/usr/local/src","/usr/obj","/usr/ports","/usr/sbin","/usr/share","/usr/src","/var","/var/log","/var/mail","/var/spool","/var/tmp","/var/yp"],gr={"application/epub+zip":{extensions:["epub"]},"application/gzip":{extensions:["gz"]},"application/java-archive":{extensions:["jar","war","ear"]},"application/json":{extensions:["json","map"]},"application/ld+json":{extensions:["jsonld"]},"application/msword":{extensions:["doc","dot"]},"application/octet-stream":{extensions:["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/ogg":{extensions:["ogx"]},"application/pdf":{extensions:["pdf"]},"application/rtf":{extensions:["rtf"]},"application/vnd.amazon.ebook":{extensions:["azw"]},"application/vnd.apple.installer+xml":{extensions:["mpkg"]},"application/vnd.mozilla.xul+xml":{extensions:["xul"]},"application/vnd.ms-excel":{extensions:["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-fontobject":{extensions:["eot"]},"application/vnd.ms-powerpoint":{extensions:["ppt","pps","pot"]},"application/vnd.oasis.opendocument.presentation":{extensions:["odp"]},"application/vnd.oasis.opendocument.spreadsheet":{extensions:["ods"]},"application/vnd.oasis.opendocument.text":{extensions:["odt"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{extensions:["pptx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{extensions:["xlsx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{extensions:["docx"]},"application/vnd.rar":{extensions:["rar"]},"application/vnd.visio":{extensions:["vsd","vst","vss","vsw"]},"application/x-7z-compressed":{extensions:["7z"]},"application/x-abiword":{extensions:["abw"]},"application/x-bzip":{extensions:["bz"]},"application/x-bzip2":{extensions:["bz2","boz"]},"application/x-csh":{extensions:["csh"]},"application/x-freearc":{extensions:["arc"]},"application/x-httpd-php":{extensions:["php"]},"application/x-sh":{extensions:["sh"]},"application/x-tar":{extensions:["tar"]},"application/xhtml+xml":{extensions:["xhtml","xht"]},"application/xml":{extensions:["xml","xsl","xsd","rng"]},"application/zip":{extensions:["zip"]},"audio/3gpp":{extensions:["3gpp"]},"audio/3gpp2":{extensions:["3g2"]},"audio/aac":{extensions:["aac"]},"audio/midi":{extensions:["mid","midi","kar","rmi"]},"audio/mpeg":{extensions:["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/ogg":{extensions:["oga","ogg","spx","opus"]},"audio/opus":{extensions:["opus"]},"audio/wav":{extensions:["wav"]},"audio/webm":{extensions:["weba"]},"font/otf":{extensions:["otf"]},"font/ttf":{extensions:["ttf"]},"font/woff":{extensions:["woff"]},"font/woff2":{extensions:["woff2"]},"image/avif":{extensions:["avif"]},"image/bmp":{extensions:["bmp"]},"image/gif":{extensions:["gif"]},"image/jpeg":{extensions:["jpeg","jpg","jpe"]},"image/png":{extensions:["png"]},"image/svg+xml":{extensions:["svg","svgz"]},"image/tiff":{extensions:["tif","tiff"]},"image/vnd.microsoft.icon":{extensions:["ico"]},"image/webp":{extensions:["webp"]},"text/calendar":{extensions:["ics","ifb"]},"text/css":{extensions:["css"]},"text/csv":{extensions:["csv"]},"text/html":{extensions:["html","htm","shtml"]},"text/javascript":{extensions:["js","mjs"]},"text/plain":{extensions:["txt","text","conf","def","list","log","in","ini"]},"video/3gpp":{extensions:["3gp","3gpp"]},"video/3gpp2":{extensions:["3g2"]},"video/mp2t":{extensions:["ts"]},"video/mp4":{extensions:["mp4","mp4v","mpg4"]},"video/mpeg":{extensions:["mpeg","mpg","mpe","m1v","m2v"]},"video/ogg":{extensions:["ogv"]},"video/webm":{extensions:["webm"]},"video/x-msvideo":{extensions:["avi"]}},ot={directory_path:dr,mime_type:gr},yr=ot,st={color:er,database:nr,date:ir,hacker:sr,internet:pr,location:fr,metadata:br,system:yr},Oi=st,f=new Qe({locale:[ys,Oi]});function getRandom(en){return Number(f.commerce.price(en))}const result={visits:{dayVisits:getRandom({min:1e4,max:99999,dec:2}),rise:getRandom({min:1e4,max:99999,dec:0}),decline:getRandom({min:1e4,max:99999,dec:0}),amount:getRandom({min:1e4,max:99999,dec:2})},saleroom:{weekSaleroom:getRandom({min:1e4,max:99999,dec:2}),amount:getRandom({min:1e4,max:99999,dec:2}),degree:getRandom({min:1e4,max:99999,dec:0})},orderLarge:{weekLarge:getRandom({min:1e4,max:99999,dec:2}),rise:getRandom({min:1e4,max:99999,dec:0}),decline:getRandom({min:1e4,max:99999,dec:0}),amount:getRandom({min:1e4,max:99999,dec:2})},volume:{weekLarge:getRandom({min:1e4,max:99999,dec:2}),rise:getRandom({min:1e4,max:99999,dec:0}),decline:getRandom({min:1e4,max:99999,dec:0}),amount:getRandom({min:1e4,max:99999,dec:2})}},ConsoleMock=defineMock({"/api/dashboard/console":()=>resultSuccess(result)});var dayjs_min={exports:{}};(function(en,rn){(function(an,nn){en.exports=nn()})(commonjsGlobal,function(){var an=1e3,nn=6e4,tn=36e5,un="millisecond",ln="second",dn="minute",hn="hour",cn="day",Fn="week",yn="month",gn="quarter",bn="year",pn="date",fn="Invalid Date",Cn=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,Sn=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,Gn={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(Ln){var Dn=["th","st","nd","rd"],En=Ln%100;return"["+Ln+(Dn[(En-20)%10]||Dn[En]||Dn[0])+"]"}},Jn=function(Ln,Dn,En){var Pn=String(Ln);return!Pn||Pn.length>=Dn?Ln:""+Array(Dn+1-Pn.length).join(En)+Ln},Mn={s:Jn,z:function(Ln){var Dn=-Ln.utcOffset(),En=Math.abs(Dn),Pn=Math.floor(En/60),Bn=En%60;return(Dn<=0?"+":"-")+Jn(Pn,2,"0")+":"+Jn(Bn,2,"0")},m:function Ln(Dn,En){if(Dn.date()<En.date())return-Ln(En,Dn);var Pn=12*(En.year()-Dn.year())+(En.month()-Dn.month()),Bn=Dn.clone().add(Pn,yn),Hn=En-Bn<0,_n=Dn.clone().add(Pn+(Hn?-1:1),yn);return+(-(Pn+(En-Bn)/(Hn?Bn-_n:_n-Bn))||0)},a:function(Ln){return Ln<0?Math.ceil(Ln)||0:Math.floor(Ln)},p:function(Ln){return{M:yn,y:bn,w:Fn,d:cn,D:pn,h:hn,m:dn,s:ln,ms:un,Q:gn}[Ln]||String(Ln||"").toLowerCase().replace(/s$/,"")},u:function(Ln){return Ln===void 0}},Tn="en",In={};In[Tn]=Gn;var An="$isDayjsObject",$n=function(Ln){return Ln instanceof Xn||!(!Ln||!Ln[An])},qn=function Ln(Dn,En,Pn){var Bn;if(!Dn)return Tn;if(typeof Dn=="string"){var Hn=Dn.toLowerCase();In[Hn]&&(Bn=Hn),En&&(In[Hn]=En,Bn=Hn);var _n=Dn.split("-");if(!Bn&&_n.length>1)return Ln(_n[0])}else{var Vn=Dn.name;In[Vn]=Dn,Bn=Vn}return!Pn&&Bn&&(Tn=Bn),Bn||!Pn&&Tn},zn=function(Ln,Dn){if($n(Ln))return Ln.clone();var En=typeof Dn=="object"?Dn:{};return En.date=Ln,En.args=arguments,new Xn(En)},kn=Mn;kn.l=qn,kn.i=$n,kn.w=function(Ln,Dn){return zn(Ln,{locale:Dn.$L,utc:Dn.$u,x:Dn.$x,$offset:Dn.$offset})};var Xn=function(){function Ln(En){this.$L=qn(En.locale,null,!0),this.parse(En),this.$x=this.$x||En.x||{},this[An]=!0}var Dn=Ln.prototype;return Dn.parse=function(En){this.$d=function(Pn){var Bn=Pn.date,Hn=Pn.utc;if(Bn===null)return new Date(NaN);if(kn.u(Bn))return new Date;if(Bn instanceof Date)return new Date(Bn);if(typeof Bn=="string"&&!/Z$/i.test(Bn)){var _n=Bn.match(Cn);if(_n){var Vn=_n[2]-1||0,Yn=(_n[7]||"0").substring(0,3);return Hn?new Date(Date.UTC(_n[1],Vn,_n[3]||1,_n[4]||0,_n[5]||0,_n[6]||0,Yn)):new Date(_n[1],Vn,_n[3]||1,_n[4]||0,_n[5]||0,_n[6]||0,Yn)}}return new Date(Bn)}(En),this.init()},Dn.init=function(){var En=this.$d;this.$y=En.getFullYear(),this.$M=En.getMonth(),this.$D=En.getDate(),this.$W=En.getDay(),this.$H=En.getHours(),this.$m=En.getMinutes(),this.$s=En.getSeconds(),this.$ms=En.getMilliseconds()},Dn.$utils=function(){return kn},Dn.isValid=function(){return this.$d.toString()!==fn},Dn.isSame=function(En,Pn){var Bn=zn(En);return this.startOf(Pn)<=Bn&&Bn<=this.endOf(Pn)},Dn.isAfter=function(En,Pn){return zn(En)<this.startOf(Pn)},Dn.isBefore=function(En,Pn){return this.endOf(Pn)<zn(En)},Dn.$g=function(En,Pn,Bn){return kn.u(En)?this[Pn]:this.set(Bn,En)},Dn.unix=function(){return Math.floor(this.valueOf()/1e3)},Dn.valueOf=function(){return this.$d.getTime()},Dn.startOf=function(En,Pn){var Bn=this,Hn=!!kn.u(Pn)||Pn,_n=kn.p(En),Vn=function(ct,Qn){var ht=kn.w(Bn.$u?Date.UTC(Bn.$y,Qn,ct):new Date(Bn.$y,Qn,ct),Bn);return Hn?ht:ht.endOf(cn)},Yn=function(ct,Qn){return kn.w(Bn.toDate()[ct].apply(Bn.toDate("s"),(Hn?[0,0,0,0]:[23,59,59,999]).slice(Qn)),Bn)},On=this.$W,Un=this.$M,Zn=this.$D,dt="set"+(this.$u?"UTC":"");switch(_n){case bn:return Hn?Vn(1,0):Vn(31,11);case yn:return Hn?Vn(1,Un):Vn(0,Un+1);case Fn:var ut=this.$locale().weekStart||0,lt=(On<ut?On+7:On)-ut;return Vn(Hn?Zn-lt:Zn+(6-lt),Un);case cn:case pn:return Yn(dt+"Hours",0);case hn:return Yn(dt+"Minutes",1);case dn:return Yn(dt+"Seconds",2);case ln:return Yn(dt+"Milliseconds",3);default:return this.clone()}},Dn.endOf=function(En){return this.startOf(En,!1)},Dn.$set=function(En,Pn){var Bn,Hn=kn.p(En),_n="set"+(this.$u?"UTC":""),Vn=(Bn={},Bn[cn]=_n+"Date",Bn[pn]=_n+"Date",Bn[yn]=_n+"Month",Bn[bn]=_n+"FullYear",Bn[hn]=_n+"Hours",Bn[dn]=_n+"Minutes",Bn[ln]=_n+"Seconds",Bn[un]=_n+"Milliseconds",Bn)[Hn],Yn=Hn===cn?this.$D+(Pn-this.$W):Pn;if(Hn===yn||Hn===bn){var On=this.clone().set(pn,1);On.$d[Vn](Yn),On.init(),this.$d=On.set(pn,Math.min(this.$D,On.daysInMonth())).$d}else Vn&&this.$d[Vn](Yn);return this.init(),this},Dn.set=function(En,Pn){return this.clone().$set(En,Pn)},Dn.get=function(En){return this[kn.p(En)]()},Dn.add=function(En,Pn){var Bn,Hn=this;En=Number(En);var _n=kn.p(Pn),Vn=function(Un){var Zn=zn(Hn);return kn.w(Zn.date(Zn.date()+Math.round(Un*En)),Hn)};if(_n===yn)return this.set(yn,this.$M+En);if(_n===bn)return this.set(bn,this.$y+En);if(_n===cn)return Vn(1);if(_n===Fn)return Vn(7);var Yn=(Bn={},Bn[dn]=nn,Bn[hn]=tn,Bn[ln]=an,Bn)[_n]||1,On=this.$d.getTime()+En*Yn;return kn.w(On,this)},Dn.subtract=function(En,Pn){return this.add(-1*En,Pn)},Dn.format=function(En){var Pn=this,Bn=this.$locale();if(!this.isValid())return Bn.invalidDate||fn;var Hn=En||"YYYY-MM-DDTHH:mm:ssZ",_n=kn.z(this),Vn=this.$H,Yn=this.$m,On=this.$M,Un=Bn.weekdays,Zn=Bn.months,dt=Bn.meridiem,ut=function(Qn,ht,Ft,pt){return Qn&&(Qn[ht]||Qn(Pn,Hn))||Ft[ht].slice(0,pt)},lt=function(Qn){return kn.s(Vn%12||12,Qn,"0")},ct=dt||function(Qn,ht,Ft){var pt=Qn<12?"AM":"PM";return Ft?pt.toLowerCase():pt};return Hn.replace(Sn,function(Qn,ht){return ht||function(Ft){switch(Ft){case"YY":return String(Pn.$y).slice(-2);case"YYYY":return kn.s(Pn.$y,4,"0");case"M":return On+1;case"MM":return kn.s(On+1,2,"0");case"MMM":return ut(Bn.monthsShort,On,Zn,3);case"MMMM":return ut(Zn,On);case"D":return Pn.$D;case"DD":return kn.s(Pn.$D,2,"0");case"d":return String(Pn.$W);case"dd":return ut(Bn.weekdaysMin,Pn.$W,Un,2);case"ddd":return ut(Bn.weekdaysShort,Pn.$W,Un,3);case"dddd":return Un[Pn.$W];case"H":return String(Vn);case"HH":return kn.s(Vn,2,"0");case"h":return lt(1);case"hh":return lt(2);case"a":return ct(Vn,Yn,!0);case"A":return ct(Vn,Yn,!1);case"m":return String(Yn);case"mm":return kn.s(Yn,2,"0");case"s":return String(Pn.$s);case"ss":return kn.s(Pn.$s,2,"0");case"SSS":return kn.s(Pn.$ms,3,"0");case"Z":return _n}return null}(Qn)||_n.replace(":","")})},Dn.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},Dn.diff=function(En,Pn,Bn){var Hn,_n=this,Vn=kn.p(Pn),Yn=zn(En),On=(Yn.utcOffset()-this.utcOffset())*nn,Un=this-Yn,Zn=function(){return kn.m(_n,Yn)};switch(Vn){case bn:Hn=Zn()/12;break;case yn:Hn=Zn();break;case gn:Hn=Zn()/3;break;case Fn:Hn=(Un-On)/6048e5;break;case cn:Hn=(Un-On)/864e5;break;case hn:Hn=Un/tn;break;case dn:Hn=Un/nn;break;case ln:Hn=Un/an;break;default:Hn=Un}return Bn?Hn:kn.a(Hn)},Dn.daysInMonth=function(){return this.endOf(yn).$D},Dn.$locale=function(){return In[this.$L]},Dn.locale=function(En,Pn){if(!En)return this.$L;var Bn=this.clone(),Hn=qn(En,Pn,!0);return Hn&&(Bn.$L=Hn),Bn},Dn.clone=function(){return kn.w(this.$d,this)},Dn.toDate=function(){return new Date(this.valueOf())},Dn.toJSON=function(){return this.isValid()?this.toISOString():null},Dn.toISOString=function(){return this.$d.toISOString()},Dn.toString=function(){return this.$d.toUTCString()},Ln}(),jn=Xn.prototype;return zn.prototype=jn,[["$ms",un],["$s",ln],["$m",dn],["$H",hn],["$W",cn],["$M",yn],["$y",bn],["$D",pn]].forEach(function(Ln){jn[Ln[1]]=function(Dn){return this.$g(Dn,Ln[0],Ln[1])}}),zn.extend=function(Ln,Dn){return Ln.$i||(Ln(Dn,Xn,zn),Ln.$i=!0),zn},zn.locale=qn,zn.isDayjs=$n,zn.unix=function(Ln){return zn(1e3*Ln)},zn.en=In[Tn],zn.Ls=In,zn.p={},zn})})(dayjs_min);var dayjs_minExports=dayjs_min.exports;const dayjs=getDefaultExportFromCjs(dayjs_minExports);function tableList(en){const rn=[];return doCustomTimes(en,()=>{rn.push({id:f.string.numeric(4),name:f.person.firstName(),sex:f.person.sexType(),avatar:`https://picsum.photos/200/200?v=${f.string.numeric(4)}`,email:f.internet.email({firstName:"admin"}),city:f.location.city(),status:f.helpers.arrayElement(["close","refuse","pass"]),type:f.helpers.arrayElement(["person","company"]),createDate:dayjs(f.date.anytime()).format("YYYY-MM-DD HH:mm")})}),rn}const TableMock=defineMock({"/api/table/list":({query:en})=>{const{page:rn=1,pageSize:an=10,name:nn}=en,tn=tableList(Number(an)),un=nn?30:60;return resultSuccess({page:Number(rn),pageSize:Number(an),pageCount:un,itemCount:un*Number(an),list:tn})}}),menuList=()=>[{label:"Dashboard",key:"dashboard",type:1,subtitle:"dashboard",openType:1,auth:"dashboard",path:"/dashboard",children:[{label:"主控台",key:"console",type:1,subtitle:"console",openType:1,auth:"console",path:"/dashboard/console"},{label:"工作台",key:"workplace",type:1,subtitle:"workplace",openType:1,auth:"workplace",path:"/dashboard/workplace"}]},{label:"表单管理",key:"form",type:1,subtitle:"form",openType:1,auth:"form",path:"/form",children:[{label:"基础表单",key:"basic-form",type:1,subtitle:"basic-form",openType:1,auth:"basic-form",path:"/form/basic-form"},{label:"分步表单",key:"step-form",type:1,subtitle:"step-form",openType:1,auth:"step-form",path:"/form/step-form"},{label:"表单详情",key:"detail",type:1,subtitle:"detail",openType:1,auth:"detail",path:"/form/detail"}]}],SystemMenuMock=defineMock({"/api/menu/list":()=>{const en=menuList();return resultSuccess({list:en})}});function getMenuKeys(){const en=["dashboard","console","workplace","basic-form","step-form","detail"],rn=[];return doCustomTimes(parseInt(Math.random()*6),()=>{const an=en[Math.floor(Math.random()*en.length)];rn.push(an)}),Array.from(new Set(rn))}const roleList=en=>{const rn=[];return doCustomTimes(en,()=>{rn.push({id:f.string.numeric(4),name:f.person.firstName(),explain:f.lorem.sentence({min:2,max:4}),isDefault:f.helpers.arrayElement([!0,!1]),menu_keys:getMenuKeys(),create_date:dayjs(f.date.anytime()).format("YYYY-MM-DD HH:mm"),status:f.helpers.arrayElement(["normal","enable","disable"])})}),rn},SystemRoleMock=defineMock({"/api/role/list":({query:en})=>{const{page:rn=1,pageSize:an=10,name:nn}=en,tn=roleList(Number(an)),un=nn?30:60;return resultSuccess({page:Number(rn),pageSize:Number(an),pageCount:un,itemCount:un*Number(an),list:tn})}}),mocks=[UserMock,MenusMock,TableMock,ConsoleMock,SystemMenuMock,SystemRoleMock],DEFAULT_CACHE_TIME=60*60*24*7;class Storage{constructor(rn="",an=localStorage){Wn(this,"storage");Wn(this,"prefixKey");this.storage=an,this.prefixKey=rn}getKey(rn){return`${this.prefixKey}${rn}`.toUpperCase()}set(rn,an,nn=DEFAULT_CACHE_TIME){const tn=JSON.stringify({value:an,expire:nn!==null?new Date().getTime()+nn*1e3:null});this.storage.setItem(this.getKey(rn),tn)}get(rn,an=null){const nn=this.storage.getItem(this.getKey(rn));if(nn)try{const tn=JSON.parse(nn),{value:un,expire:ln}=tn;if(ln===null||ln>=Date.now())return un;this.remove(rn)}catch{return an}return an}remove(rn){this.storage.removeItem(this.getKey(rn))}clear(){this.storage.clear()}setCookie(rn,an,nn=DEFAULT_CACHE_TIME){document.cookie=`${this.getKey(rn)}=${an}; Max-Age=${nn}`}getCookie(rn){const an=document.cookie.split("; ");for(let nn=0,tn=an.length;nn<tn;nn++){const un=an[nn].split("=");if(un[0]===this.getKey(rn))return un[1]}return""}removeCookie(rn){this.setCookie(rn,1,-1)}clearCookie(){const rn=document.cookie.match(/[^ =;]+(?==)/g);if(rn)for(let an=rn.length;an--;)document.cookie=rn[an]+"=0;expire="+new Date(0).toUTCString()}}const storage=new Storage(""),projectName="AdminPro";function warn(en){console.warn(`[${projectName} warn]:${en}`)}const getConfigFileName=en=>`__PRODUCTION__${en.VITE_GLOB_APP_SHORT_NAME||"__APP"}__CONF__`.toUpperCase().replace(/\s/g,""),__vite_import_meta_env__={VITE_GLOB_APP_SHORT_NAME:"AdminPro"};function getAppEnvConfig(){const en=getConfigFileName(__vite_import_meta_env__),rn=window[en],{VITE_GLOB_APP_TITLE:an,VITE_GLOB_API_URL:nn,VITE_GLOB_APP_SHORT_NAME:tn,VITE_GLOB_API_URL_PREFIX:un,VITE_GLOB_UPLOAD_URL:ln,VITE_GLOB_FILE_URL:dn,VITE_USE_MOCK:hn,VITE_LOGGER_MOCK:cn}=rn;return/^[a-zA-Z\_]*$/.test(tn)||warn("VITE_GLOB_APP_SHORT_NAME Variables can only be characters/underscores, please modify in the environment variables and re-running."),{VITE_GLOB_APP_TITLE:an,VITE_GLOB_API_URL:nn,VITE_GLOB_APP_SHORT_NAME:tn,VITE_GLOB_API_URL_PREFIX:un,VITE_GLOB_UPLOAD_URL:ln,VITE_GLOB_FILE_URL:dn,VITE_USE_MOCK:hn,VITE_LOGGER_MOCK:cn}}function isProdMode(){return!0}const useGlobSetting=()=>{const{VITE_GLOB_APP_TITLE:en,VITE_GLOB_API_URL:rn,VITE_GLOB_APP_SHORT_NAME:an,VITE_GLOB_API_URL_PREFIX:nn,VITE_GLOB_UPLOAD_URL:tn,VITE_GLOB_FILE_URL:un,VITE_USE_MOCK:ln,VITE_LOGGER_MOCK:dn}=getAppEnvConfig();return/[a-zA-Z\_]*/.test(an)||warn("VITE_GLOB_APP_SHORT_NAME Variables can only be characters/underscores, please modify in the environment variables and re-running."),{title:en,apiUrl:rn,shortName:an,urlPrefix:nn,uploadUrl:tn,fileUrl:un,useMock:ln==="true",loggerMock:dn==="true"}},{useMock,apiUrl,urlPrefix,loggerMock}=useGlobSetting(),mockAdapter=createAlovaMockAdapter([...mocks],{enable:useMock,httpAdapter:adapterFetch(),delay:1e3,mockRequestLogger:loggerMock,onMockError(en,rn){console.error("🚀 ~ onMockError ~ currentMethod:",rn),console.error("🚀 ~ onMockError ~ error:",en)}}),Alova=createAlova({baseURL:apiUrl,statesHook:vue,cacheLogger:!1,requestAdapter:mockAdapter,beforeRequest(en){const an=useUser().getToken;!en.meta?.ignoreToken&&an&&(en.config.headers.token=an);const nn=isUrl(en.url);!nn&&urlPrefix&&(en.url=`${urlPrefix}${en.url}`),!nn&&apiUrl&&isString$2(apiUrl)&&(en.url=`${apiUrl}${en.url}`)},responded:{onSuccess:async(en,rn)=>{const an=en.json&&await en.json()||en.body;if(rn.meta?.isReturnNativeResponse)return an;const{message:nn,code:tn,result:un}=an;if(rn.meta?.isTransformResponse===!1)return an.data;const ln=window.$message,dn=window.$dialog,hn=PageEnum.BASE_LOGIN;if(ResultEnum.SUCCESS===tn)return un;if(tn===912)dn?.warning({title:"提示",content:"登录身份已失效，请重新登录!",okText:"确定",closable:!1,maskClosable:!1,onOk:async()=>{storage.clear(),window.location.href=hn}});else throw ln?.error(nn),new Error(nn)}}});function getUserInfo(){return Alova.Get("/admin_info",{meta:{isReturnNativeResponse:!0}})}function login(en){return Alova.Post("/login",{params:en},{meta:{isReturnNativeResponse:!0}})}const useUserStore=defineStore({id:"app-user",state:()=>({token:storage.get(ACCESS_TOKEN,""),username:"",welcome:"",avatar:"",permissions:[],info:storage.get(CURRENT_USER,{})}),getters:{getToken(){return this.token},getAvatar(){return this.avatar},getNickname(){return this.username},getPermissions(){return this.permissions},getUserInfo(){return this.info}},actions:{setToken(en){this.token=en},setAvatar(en){this.avatar=en},setPermissions(en){this.permissions=en},setUserInfo(en){this.info=en},async login(en){const rn=await login(en),{result:an,code:nn}=rn;return nn===ResultEnum.SUCCESS&&(storage.set(ACCESS_TOKEN,an.token,604800),storage.set(CURRENT_USER,an,604800),storage.set(IS_SCREENLOCKED,!1),this.setToken(an.token),this.setUserInfo(an)),rn},async getInfo(){const en=await getUserInfo(),{result:rn}=en;if(rn.permissions&&rn.permissions.length){const an=rn.permissions;this.setPermissions(an),this.setUserInfo(rn)}else throw new Error("getInfo: permissionsList must be a non-null array !");return this.setAvatar(rn.avatar),rn},async logout(){this.setPermissions([]),this.setUserInfo({username:"",email:""}),storage.remove(ACCESS_TOKEN),storage.remove(CURRENT_USER)}}});function useUser(){return useUserStore(store)}function usePermission(){const en=useUserStore();function rn(un){return en.getPermissions.some(ln=>{const{value:dn}=ln;return un.includes(dn)})}function an(un){return!un||!un.length?!0:rn(un)}function nn(un){const ln=en.getPermissions;if(Array.isArray(un))return ln.every(dn=>un.includes(dn.value));throw new Error(`[hasEveryPermission]: ${un} should be a array !`)}function tn(un){const ln=en.getPermissions;if(Array.isArray(un))return ln.some(dn=>un.includes(dn.value));throw new Error(`[hasSomePermission]: ${un} should be a array !`)}return{hasPermission:an,hasEveryPermission:nn,hasSomePermission:tn}}const permission={mounted(en,rn){if(rn.value==null)return;const{action:an,effect:nn}=rn.value,{hasPermission:tn}=usePermission();tn(an)||(nn=="disabled"?(en.disabled=!0,en.style.disabled="disabled",en.classList.add("n-button--disabled")):en.remove())}},copy={mounted(en,rn){en.copyData=rn.value,en.addEventListener("click",handleClick)},updated(en,rn){en.copyData=rn.value},beforeUnmount(en){en.removeEventListener("click",en.__handleClick__)}};function handleClick(){const en=document.createElement("input");en.value=this.copyData.toLocaleString(),document.body.appendChild(en),en.select(),document.execCommand("Copy"),document.body.removeChild(en),console.log("复制成功",this.copyData)}const debounce={mounted(en,rn){if(typeof rn.value!="function")throw"callback must be a function";let an=null;en.__handleClick__=function(){an&&clearInterval(an),an=setTimeout(()=>{rn.value()},500)},en.addEventListener("click",en.__handleClick__)},beforeUnmount(en){en.removeEventListener("click",en.__handleClick__)}},throttle={mounted(en,rn){if(typeof rn.value!="function")throw"callback must be a function";let an=null;en.__handleClick__=function(){an&&clearTimeout(an),en.disabled||(en.disabled=!0,rn.value(),an=setTimeout(()=>{en.disabled=!1},1e3))},en.addEventListener("click",en.__handleClick__)},beforeUnmount(en){en.removeEventListener("click",en.__handleClick__)}},draggable={mounted:function(en){en.style.cursor="move",en.style.position="absolute",en.onmousedown=function(rn){const an=rn.pageX-en.offsetLeft,nn=rn.pageY-en.offsetTop;document.onmousemove=function(tn){let un=tn.pageX-an,ln=tn.pageY-nn;const dn=en.parentNode.offsetWidth-en.offsetWidth,hn=en.parentNode.offsetHeight-en.offsetHeight;un<0?un=0:un>dn&&(un=dn),ln<0?ln=0:ln>hn&&(ln=hn),en.style.left=un+"px",en.style.top=ln+"px"},document.onmouseup=function(){document.onmousemove=document.onmouseup=null}}}};function setupDirectives(en){en.directive("permission",permission),en.directive("copy",copy),en.directive("debounce",debounce),en.directive("throttle",throttle),en.directive("draggable",draggable)}const _sfc_main$3=defineComponent({name:"HuaweiCharge",props:{battery:{type:Object,default:()=>({})},calcDischargingTime:{type:String,default:""},calcChargingTime:{type:String,default:""},batteryStatus:{type:String,validator:en=>["充电中","已充满","已断开电源"].includes(en)}}}),_export_sfc=(en,rn)=>{const an=en.__vccOpts||en;for(const[nn,tn]of rn)an[nn]=tn;return an},_hoisted_1$1={class:"container"},_hoisted_2$1={class:"number"},_hoisted_3$1={class:"contrast"},_hoisted_4$1={class:"bubbles"},_hoisted_5$1={class:"charging"};function _sfc_render$2(en,rn,an,nn,tn,un){return openBlock(),createElementBlock("div",_hoisted_1$1,[createBaseVNode("div",_hoisted_2$1,toDisplayString(en.battery.level)+"%",1),createBaseVNode("div",_hoisted_3$1,[rn[0]||(rn[0]=createBaseVNode("div",{class:"circle"},null,-1)),createBaseVNode("ul",_hoisted_4$1,[(openBlock(),createElementBlock(Fragment,null,renderList(15,ln=>createBaseVNode("li",{key:ln})),64))])]),createBaseVNode("div",_hoisted_5$1,[createBaseVNode("div",null,toDisplayString(en.batteryStatus),1),withDirectives(createBaseVNode("div",null," 剩余可使用时间："+toDisplayString(en.calcDischargingTime),513),[[vShow,Number.isFinite(en.battery.dischargingTime)&&en.battery.dischargingTime!=0]]),withDirectives(createBaseVNode("span",null," 距离电池充满需要："+toDisplayString(en.calcChargingTime),513),[[vShow,Number.isFinite(en.battery.chargingTime)&&en.battery.chargingTime!=0]])])])}const __unplugin_components_1=_export_sfc(_sfc_main$3,[["render",_sfc_render$2],["__scopeId","data-v-62db234c"]]);function useOnline(){const en=ref(!0),rn=an=>{en.value=typeof an=="boolean"?an:an.target.online};return navigator.onLine?rn(!0):rn(!1),onMounted(()=>{window.addEventListener("online",rn),window.addEventListener("offline",rn)}),onUnmounted(()=>{window.removeEventListener("online",rn),window.removeEventListener("offline",rn)}),{online:en}}function useTime(){let en;const rn=ref(0),an=ref(0),nn=ref(""),tn=ref(0),un=ref(0),ln=ref(0),dn=ref(0),hn=()=>{const cn=new Date;rn.value=cn.getFullYear(),an.value=cn.getMonth()+1,nn.value="日一二三四五六".charAt(cn.getDay()),tn.value=cn.getDate(),un.value=(cn.getHours()+"").padStart(2,"0")||new Intl.NumberFormat(void 0,{minimumIntegerDigits:2}).format(cn.getHours()),ln.value=(cn.getMinutes()+"").padStart(2,"0")||new Intl.NumberFormat(void 0,{minimumIntegerDigits:2}).format(cn.getMinutes()),dn.value=cn.getSeconds()};return hn(),onMounted(()=>{clearInterval(en),en=setInterval(()=>hn(),1e3)}),onUnmounted(()=>{clearInterval(en)}),{month:an,day:tn,hour:un,minute:ln,second:dn,week:nn}}const useBattery=()=>{const en=reactive({battery:{charging:!1,chargingTime:0,dischargingTime:0,level:100}}),rn=un=>{for(const ln in en.battery)en.battery[ln]=un[ln];en.battery.level=en.battery.level*100},an=computed(()=>{const un=en.battery.dischargingTime/3600,ln=en.battery.dischargingTime/60%60;return`${~~un}小时${~~ln}分钟`}),nn=computed(()=>{console.log(en.battery);const un=en.battery.chargingTime/3600,ln=en.battery.chargingTime/60%60;return`${~~un}小时${~~ln}分钟`}),tn=computed(()=>en.battery.charging&&en.battery.level>=100?"已充满":en.battery.charging?"充电中":"已断开电源");return onMounted(async()=>{const un=await window.navigator.getBattery();rn(un),un.onchargingchange=({target:ln})=>{rn(ln)},un.onchargingtimechange=({target:ln})=>{rn(ln)},un.ondischargingtimechange=({target:ln})=>{rn(ln)},un.onlevelchange=({target:ln})=>{rn(ln)}}),{...toRefs(en),batteryStatus:tn,calcDischargingTime:an,calcChargingTime:nn}},initTime=60*60,isLocked=storage.get(IS_SCREENLOCKED,!1),useScreenLockStore=defineStore({id:"app-screen-lock",state:()=>({isLocked:isLocked===!0,lockTime:isLocked=="true"?initTime:0}),getters:{},actions:{setLock(en){this.isLocked=en,storage.set(IS_SCREENLOCKED,this.isLocked)},setLockTime(en=initTime){this.lockTime=en}}}),_sfc_main$2=defineComponent({name:"ScreenLock",components:{LockOutlined,LoadingOutlined,UserOutlined,ArrowRightOutlined,ApiOutlined,WifiOutlined,recharge:__unplugin_components_1},setup(){const en=useScreenLockStore(),rn=useUserStore(),{month:an,day:nn,hour:tn,minute:un,second:ln,week:dn}=useTime(),{online:hn}=useOnline(),cn=useRouter(),Fn=useRoute(),{battery:yn,batteryStatus:gn,calcDischargingTime:bn,calcChargingTime:pn}=useBattery(),Cn=(rn.getUserInfo||{}).username||"",Sn=reactive({showLogin:!1,loginLoading:!1,isLoginError:!1,errorMsg:"密码错误",loginParams:{username:Cn||"",password:""}}),Gn=Tn=>Sn.showLogin=Tn,Jn=async()=>{if(!Sn.loginParams.password.trim())return;const Tn={isLock:!0,...Sn.loginParams};Sn.loginLoading=!0;const{code:In,message:An}=await rn.login(Tn);In===ResultEnum.SUCCESS?(Gn(!1),en.setLock(!1)):(Sn.errorMsg=An,Sn.isLoginError=!0),Sn.loginLoading=!1},Mn=()=>{Gn(!1),en.setLock(!1),cn.replace({path:"/login",query:{redirect:Fn.fullPath}})};return{...toRefs(Sn),online:hn,month:an,day:nn,hour:tn,minute:un,second:ln,week:dn,battery:yn,batteryStatus:gn,calcDischargingTime:bn,calcChargingTime:pn,onLockLogin:Gn,onLogin:Jn,goLogin:Mn}}}),_hoisted_1={class:"lock-box"},_hoisted_2={class:"lock"},_hoisted_3={class:"local-time"},_hoisted_4={class:"time"},_hoisted_5={class:"date"},_hoisted_6={class:"computer-status"},_hoisted_7={key:1,class:"login-box"},_hoisted_8={class:"username"},_hoisted_9={key:0,class:"flex w-full"},_hoisted_10={class:"text-red-500"},_hoisted_11={class:"flex justify-around w-full mt-1"};function _sfc_render$1(en,rn,an,nn,tn,un){const ln=resolveComponent("lock-outlined"),dn=NIcon,hn=__unplugin_components_1,cn=resolveComponent("wifi-outlined"),Fn=resolveComponent("api-outlined"),yn=resolveComponent("user-outlined"),gn=NAvatar,bn=resolveComponent("LoadingOutlined"),pn=resolveComponent("arrow-right-outlined"),fn=__unplugin_components_1$1;return openBlock(),createElementBlock("div",{class:normalizeClass([{onLockLogin:en.showLogin},"lockscreen"]),onKeyup:rn[5]||(rn[5]=Cn=>en.onLockLogin(!0)),onMousedown:rn[6]||(rn[6]=withModifiers(()=>{},["stop"])),onContextmenu:rn[7]||(rn[7]=withModifiers(()=>{},["prevent"]))},[en.showLogin?createCommentVNode("",!0):(openBlock(),createElementBlock(Fragment,{key:0},[createBaseVNode("div",_hoisted_1,[createBaseVNode("div",_hoisted_2,[createBaseVNode("span",{class:"lock-icon",title:"解锁屏幕",onClick:rn[0]||(rn[0]=Cn=>en.onLockLogin(!0))},[createVNode(dn,null,{default:withCtx(()=>[createVNode(ln)]),_:1})])])]),createVNode(hn,{battery:en.battery,"battery-status":en.batteryStatus,"calc-discharging-time":en.calcDischargingTime,"calc-charging-time":en.calcChargingTime},null,8,["battery","battery-status","calc-discharging-time","calc-charging-time"]),createBaseVNode("div",_hoisted_3,[createBaseVNode("div",_hoisted_4,toDisplayString(en.hour)+":"+toDisplayString(en.minute),1),createBaseVNode("div",_hoisted_5,toDisplayString(en.month)+"月"+toDisplayString(en.day)+"号，星期"+toDisplayString(en.week),1)]),createBaseVNode("div",_hoisted_6,[createBaseVNode("span",{class:normalizeClass([{offline:!en.online},"network"])},[createVNode(cn,{class:"network"})],2),createVNode(Fn)])],64)),en.showLogin?(openBlock(),createElementBlock("div",_hoisted_7,[createVNode(gn,{size:128},{default:withCtx(()=>[createVNode(dn,null,{default:withCtx(()=>[createVNode(yn)]),_:1})]),_:1}),createBaseVNode("div",_hoisted_8,toDisplayString(en.loginParams.username),1),createVNode(fn,{type:"password",autofocus:"",value:en.loginParams.password,"onUpdate:value":rn[1]||(rn[1]=Cn=>en.loginParams.password=Cn),onKeyup:withKeys(en.onLogin,["enter"]),placeholder:"请输入登录密码"},{suffix:withCtx(()=>[createVNode(dn,{onClick:en.onLogin,style:{cursor:"pointer"}},{default:withCtx(()=>[en.loginLoading?(openBlock(),createBlock(bn,{key:0})):(openBlock(),createBlock(pn,{key:1}))]),_:1},8,["onClick"])]),_:1},8,["value","onKeyup"]),en.isLoginError?(openBlock(),createElementBlock("div",_hoisted_9,[createBaseVNode("span",_hoisted_10,toDisplayString(en.errorMsg),1)])):createCommentVNode("",!0),createBaseVNode("div",_hoisted_11,[createBaseVNode("div",null,[createBaseVNode("a",{onClick:rn[2]||(rn[2]=Cn=>en.showLogin=!1)},"返回")]),createBaseVNode("div",null,[createBaseVNode("a",{onClick:rn[3]||(rn[3]=(...Cn)=>en.goLogin&&en.goLogin(...Cn))},"重新登录")]),createBaseVNode("div",null,[createBaseVNode("a",{onClick:rn[4]||(rn[4]=(...Cn)=>en.onLogin&&en.onLogin(...Cn))},"进入系统")])])])):createCommentVNode("",!0)],34)}const LockScreen=_export_sfc(_sfc_main$2,[["render",_sfc_render$1],["__scopeId","data-v-bed9b923"]]),_sfc_main$1=defineComponent({name:"Application",components:{NDialogProvider,NNotificationProvider:__unplugin_components_1$5,NMessageProvider:__unplugin_components_0},setup(){return{}}});function _sfc_render(en,rn,an,nn,tn,un){const ln=__unplugin_components_0,dn=__unplugin_components_1$5,hn=NDialogProvider;return openBlock(),createBlock(hn,null,{default:withCtx(()=>[createVNode(dn,null,{default:withCtx(()=>[createVNode(ln,null,{default:withCtx(()=>[renderSlot(en.$slots,"default")]),_:3})]),_:3})]),_:3})}const AppProvider=_export_sfc(_sfc_main$1,[["render",_sfc_render]]),_sfc_main=defineComponent({__name:"App",setup(en){const rn=useRoute(),an=useScreenLockStore(),nn=useDesignSettingStore(),tn=computed(()=>an.isLocked),un=computed(()=>an.lockTime),ln=computed(()=>{const Fn=nn.appTheme,yn=lighten(nn.appTheme,6);return{common:{primaryColor:Fn,primaryColorHover:yn,primaryColorPressed:yn,primaryColorSuppl:Fn},LoadingBar:{colorLoading:Fn}}}),dn=computed(()=>nn.darkTheme?darkTheme$1:void 0);let hn;const cn=()=>{clearInterval(hn),!(rn.name=="login"||tn.value)&&(an.setLock(!1),an.setLockTime(),hn=setInterval(()=>{if(an.setLockTime(un.value-1),un.value<=0)return an.setLock(!0),clearInterval(hn)},1e3))};return onMounted(()=>{document.addEventListener("mousedown",cn)}),onUnmounted(()=>{document.removeEventListener("mousedown",cn)}),(Fn,yn)=>{const gn=resolveComponent("RouterView"),bn=__unplugin_components_0$1;return openBlock(),createElementBlock(Fragment,null,[tn.value?createCommentVNode("",!0):(openBlock(),createBlock(bn,{key:0,locale:unref(zhCN),theme:dn.value,"theme-overrides":ln.value,"date-locale":unref(dateZhCN)},{default:withCtx(()=>[createVNode(unref(AppProvider),null,{default:withCtx(()=>[createVNode(gn)]),_:1})]),_:1},8,["locale","theme","theme-overrides","date-locale"])),tn.value&&Fn.$route.name!=="login"?(openBlock(),createBlock(Transition,{key:1,name:"slide-up"},{default:withCtx(()=>[createVNode(unref(LockScreen))]),_:1})):createCommentVNode("",!0)],64)}}}),scriptRel="modulepreload",assetsURL=function(en){return"/"+en},seen={},__vitePreload=function en(rn,an,nn){let tn=Promise.resolve();if(an&&an.length>0){document.getElementsByTagName("link");const ln=document.querySelector("meta[property=csp-nonce]"),dn=ln?.nonce||ln?.getAttribute("nonce");tn=Promise.allSettled(an.map(hn=>{if(hn=assetsURL(hn),hn in seen)return;seen[hn]=!0;const cn=hn.endsWith(".css"),Fn=cn?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${hn}"]${Fn}`))return;const yn=document.createElement("link");if(yn.rel=cn?"stylesheet":scriptRel,cn||(yn.as="script"),yn.crossOrigin="",yn.href=hn,dn&&yn.setAttribute("nonce",dn),document.head.appendChild(yn),cn)return new Promise((gn,bn)=>{yn.addEventListener("load",gn),yn.addEventListener("error",()=>bn(new Error(`Unable to preload CSS for ${hn}`)))})}))}function un(ln){const dn=new Event("vite:preloadError",{cancelable:!0});if(dn.payload=ln,window.dispatchEvent(dn),!dn.defaultPrevented)throw ln}return tn.then(ln=>{for(const dn of ln||[])dn.status==="rejected"&&un(dn.reason);return rn().catch(un)})},RedirectName="Redirect",ErrorPage=()=>__vitePreload(()=>import("./404-DwL9NKrt.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),Layout=()=>__vitePreload(()=>import("./index-CIYD8UKT.js"),__vite__mapDeps([10,11,2,1,5,12,6,13,7,3,4,8,14])),ParentLayout=()=>__vitePreload(()=>import("./parentLayout-DKpnT2r7.js"),__vite__mapDeps([15,2,3,4,5,6,1,7,8])),routes$c=[{path:"/about",name:"about",component:Layout,meta:{sort:10,isRoot:!0,activeMenu:"about_index",icon:renderIcon(ProjectOutlined)},children:[{path:"index",name:"about_index",meta:{title:"关于项目",activeMenu:"about_index"},component:()=>__vitePreload(()=>import("./index-jk-l93XS.js"),__vite__mapDeps([16,2,3,4]))}]}],__vite_glob_0_0=Object.freeze(Object.defineProperty({__proto__:null,default:routes$c},Symbol.toStringTag,{value:"Module"})),routeName$1="comp",routes$b=[{path:"/comp",name:routeName$1,component:Layout,redirect:"/comp/table",meta:{title:"组件示例",icon:renderIcon(WalletOutlined),sort:8},children:[{path:"table",name:`${routeName$1}_table`,redirect:"/comp/table/basic",component:ParentLayout,meta:{title:"表格"},children:[{path:"basic",name:`${routeName$1}_table_basic`,meta:{title:"基础表格"},component:()=>__vitePreload(()=>import("./basic-CxVvlXq-.js"),__vite__mapDeps([17,18,2,12,6,13,7,4,3,19,20,21,22,23,24,5,1,8]))},{path:"editCell",name:`${routeName$1}_table_editCell`,meta:{title:"单元格编辑"},component:()=>__vitePreload(()=>import("./editCell-KTxyxhWV.js"),__vite__mapDeps([25,18,2,12,6,13,7,4,3,19,20,21,22,24,5,1,8]))},{path:"editRow",name:`${routeName$1}_table_editRow`,meta:{title:"整行编辑"},component:()=>__vitePreload(()=>import("./editRow-qCGK53im.js"),__vite__mapDeps([26,18,2,12,6,13,7,4,3,19,20,21,22,23,24,5,1,8]))}]},{path:"form",name:`${routeName$1}_form`,redirect:"/comp/form/basic",component:ParentLayout,meta:{title:"表单"},children:[{path:"basic",name:`${routeName$1}_form_basic`,meta:{title:"基础使用"},component:()=>__vitePreload(()=>import("./basic-S6S53ZDa.js"),__vite__mapDeps([27,28,2,4,19,7,3,29,5,6,1,8,30]))},{path:"useForm",name:"useForm",meta:{title:"useForm"},component:()=>__vitePreload(()=>import("./useForm-8RKCouDT.js"),__vite__mapDeps([31,28,2,4,19,7,3,29,32,5,6,1,8,33]))}]},{path:"upload",name:`${routeName$1}_upload`,meta:{title:"上传图片"},component:()=>__vitePreload(()=>import("./index-DE-qLJoy.js"),__vite__mapDeps([34,35,3,2,4,20,7,36,5,6,1,8]))},{path:"modal",name:`${routeName$1}_modal`,meta:{title:"弹窗扩展"},component:()=>__vitePreload(()=>import("./index-Cfene4oS.js"),__vite__mapDeps([37,38,3,2,4,21,39,28,19,7,29,32,5,6,1,8,40]))},{path:"richtext",name:"richtext",meta:{title:"富文本",extra:renderNew()},component:()=>__vitePreload(()=>import("./vue-quill-CYzGuerY.js"),__vite__mapDeps([41,6,2,3,4,42]))},{path:"drag",name:"Drag",meta:{title:"拖拽",extra:renderNew()},component:()=>__vitePreload(()=>import("./index-nTYw3IVe.js"),__vite__mapDeps([43,12,6,2,3,4,5,1,7,8,44]))}]}],__vite_glob_0_1=Object.freeze(Object.defineProperty({__proto__:null,default:routes$b},Symbol.toStringTag,{value:"Module"})),routeName="dashboard",routes$a=[{path:"/dashboard",name:routeName,redirect:"/dashboard/console",component:Layout,meta:{title:"Dashboard",icon:renderIcon(DashboardOutlined),permissions:["dashboard_console","dashboard_console","dashboard_workplace"],sort:0},children:[{path:"console",name:`${routeName}_console`,meta:{title:"主控台",permissions:["dashboard_console"],affix:!0},component:()=>__vitePreload(()=>import("./console-DoIVFooB.js"),__vite__mapDeps([45,46,47,48,2,21,49,13,50,3,4,7,5,6,1,8]))},{path:"workplace",name:`${routeName}_workplace`,meta:{title:"工作台",keepAlive:!0,permissions:["dashboard_workplace"]},component:()=>__vitePreload(()=>import("./workplace-rflwL6fG.js"),__vite__mapDeps([51,7,2,8,3,4,5,6,1,52]))}]}],__vite_glob_0_2=Object.freeze(Object.defineProperty({__proto__:null,default:routes$a},Symbol.toStringTag,{value:"Module"})),routes$9=[{path:"/directive",name:"directive",component:Layout,meta:{sort:9,isRoot:!0,activeMenu:"directive_index",icon:renderIcon(BorderOuterOutlined)},children:[{path:"index",name:"directive_index",meta:{title:"指令示例",activeMenu:"directive_index"},component:()=>__vitePreload(()=>import("./index-CvtO90oY.js"),__vite__mapDeps([53,3,2,4,5,6,1,7,8,54]))}]}],__vite_glob_0_3=Object.freeze(Object.defineProperty({__proto__:null,default:routes$9},Symbol.toStringTag,{value:"Module"})),routes$8=[{path:"/external",name:"https://docs.naiveadmin.com",component:Layout,meta:{title:"项目文档",icon:renderIcon(DocumentTextOutline),sort:11}}],__vite_glob_0_4=Object.freeze(Object.defineProperty({__proto__:null,default:routes$8},Symbol.toStringTag,{value:"Module"})),routes$7=[{path:"/exception",name:"Exception",redirect:"/exception/403",component:Layout,meta:{title:"异常页面",icon:renderIcon(ExclamationCircleOutlined),sort:3},children:[{path:"403",name:"exception-403",meta:{title:"403"},component:()=>__vitePreload(()=>import("./403-BHJjRcck.js"),__vite__mapDeps([55,1,2,3,4,5,6,7,8,56]))},{path:"404",name:"exception-404",meta:{title:"404"},component:()=>__vitePreload(()=>import("./404-DwL9NKrt.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9]))},{path:"500",name:"exception-500",meta:{title:"500"},component:()=>__vitePreload(()=>import("./500-D25Kj5En.js"),__vite__mapDeps([57,1,2,3,4,5,6,7,8,58]))}]}],__vite_glob_0_5=Object.freeze(Object.defineProperty({__proto__:null,default:routes$7},Symbol.toStringTag,{value:"Module"})),routes$6=[{path:"/form",name:"Form",redirect:"/form/basic-form",component:Layout,meta:{title:"表单页面",icon:renderIcon(ProfileOutlined),sort:3},children:[{path:"basic-form",name:"form-basic-form",meta:{title:"基础表单"},component:()=>__vitePreload(()=>import("./index-B1Thw49Y.js"),__vite__mapDeps([59,35,3,2,4,20,7,36,5,6,1,8]))},{path:"step-form",name:"form-step-form",meta:{title:"分步表单"},component:()=>__vitePreload(()=>import("./stepForm-CSZXupuw.js"),__vite__mapDeps([60,61,3,2,4,62,63,5,6,1,7,8,64,65]))},{path:"detail",name:"form-detail",meta:{title:"表单详情"},component:()=>__vitePreload(()=>import("./index-DND4v4IW.js"),__vite__mapDeps([66,3,2,4,5,6,1,7,8]))}]}],__vite_glob_0_6=Object.freeze(Object.defineProperty({__proto__:null,default:routes$6},Symbol.toStringTag,{value:"Module"})),IFrame=()=>__vitePreload(()=>import("./index-CfcBoXAF.js"),__vite__mapDeps([67,1,2,3,4,5,6,7,8,68])),routes$5=[{path:"/frame",name:"Frame",redirect:"/frame/docs",component:Layout,meta:{title:"外部页面",sort:8,icon:renderIcon(DesktopOutline)},children:[{path:"naive-admin",name:"naive-admin",meta:{title:"NaiveAdmin",frameSrc:"https://www.naiveadmin.com"},component:IFrame},{path:"docs",name:"frame-docs",meta:{title:"项目文档(内嵌)",frameSrc:"https://jekip.github.io/docs"},component:IFrame},{path:"naive",name:"frame-naive",meta:{title:"NaiveUi(内嵌)",frameSrc:"https://www.naiveui.com"},component:IFrame}]}],__vite_glob_0_7=Object.freeze(Object.defineProperty({__proto__:null,default:routes$5},Symbol.toStringTag,{value:"Module"})),routes$4=[{path:"/list",name:"List",redirect:"/list/basic-list",component:Layout,meta:{title:"列表页面",icon:renderIcon(TableOutlined),sort:2},children:[{path:"basic-list",name:"basic-list",meta:{title:"基础列表"},component:()=>__vitePreload(()=>import("./index-BIm1dsaH.js"),__vite__mapDeps([69,18,2,12,6,13,7,4,3,19,20,21,22,23,28,29,32,24,1,5,8]))},{path:"basic-info/:id?",name:"basic-info",meta:{title:"基础详情",hidden:!0,activeMenu:"basic-list"},component:()=>__vitePreload(()=>import("./info-vZbT9a7o.js"),__vite__mapDeps([70,2,3,4,5,6,1,7,8]))}]}],__vite_glob_0_8=Object.freeze(Object.defineProperty({__proto__:null,default:routes$4},Symbol.toStringTag,{value:"Module"})),routes$3=[{path:"/newversion",name:"https://www.naiveadmin.com",component:Layout,meta:{title:"Plus 版本",extra:renderNew(),icon:renderIcon(SketchOutlined),sort:12}}],__vite_glob_0_9=Object.freeze(Object.defineProperty({__proto__:null,default:routes$3},Symbol.toStringTag,{value:"Module"})),routes$2=[{path:"/result",name:"Result",redirect:"/result/success",component:Layout,meta:{title:"结果页面",icon:renderIcon(CheckCircleOutlined),sort:4},children:[{path:"success",name:"result-success",meta:{title:"成功页"},component:()=>__vitePreload(()=>import("./success-CFOGelnv.js"),__vite__mapDeps([71,2,1,3,4,5,6,7,8,72]))},{path:"fail",name:"result-fail",meta:{title:"失败页"},component:()=>__vitePreload(()=>import("./fail-ZX36aY8a.js"),__vite__mapDeps([73,2,1,7,3,4,5,6,8,74]))},{path:"info",name:"result-info",meta:{title:"信息页"},component:()=>__vitePreload(()=>import("./info-B7a8dTHJ.js"),__vite__mapDeps([75,2,1,7,3,4,5,6,8,76]))}]}],__vite_glob_0_10=Object.freeze(Object.defineProperty({__proto__:null,default:routes$2},Symbol.toStringTag,{value:"Module"})),routes$1=[{path:"/setting",name:"Setting",redirect:"/setting/account",component:Layout,meta:{title:"设置页面",icon:renderIcon(SettingOutlined),sort:5},children:[{path:"account",name:"setting-account",meta:{title:"个人设置"},component:()=>__vitePreload(()=>import("./account-RBbFUHjI.js"),__vite__mapDeps([77,78,3,2,4,79,5,6,1,7,8,80]))},{path:"system",name:"setting-system",meta:{title:"系统设置"},component:()=>__vitePreload(()=>import("./system-DYo5KSv6.js"),__vite__mapDeps([81,82,3,2,4,83,84,5,6,1,7,8,85]))}]}],__vite_glob_0_11=Object.freeze(Object.defineProperty({__proto__:null,default:routes$1},Symbol.toStringTag,{value:"Module"})),routes=[{path:"/system",name:"System",redirect:"/system/menu",component:Layout,meta:{title:"系统设置",icon:renderIcon(OptionsSharp),sort:1},children:[{path:"menu",name:"system_menu",meta:{title:"菜单权限"},component:()=>__vitePreload(()=>import("./menu-Ba5Tci0F.js"),__vite__mapDeps([86,87,3,2,4,7,5,6,1,8]))},{path:"role",name:"system_role",meta:{title:"角色权限"},component:()=>__vitePreload(()=>import("./role-DUznBL57.js"),__vite__mapDeps([88,18,2,12,6,13,7,4,3,19,20,21,22,23,89,28,29,32,38,39,90,5,1,8]))}]}],__vite_glob_0_12=Object.freeze(Object.defineProperty({__proto__:null,default:routes},Symbol.toStringTag,{value:"Module"})),ErrorPageRoute={path:"/:path(.*)*",name:"ErrorPage",component:Layout,meta:{title:"ErrorPage",hideBreadcrumb:!0},children:[{path:"/:path(.*)*",name:"ErrorPageSon",component:ErrorPage,meta:{title:"ErrorPage",hideBreadcrumb:!0}}]},RedirectRoute={path:"/redirect",name:RedirectName,component:Layout,meta:{title:RedirectName,hideBreadcrumb:!0},children:[{path:"/redirect/:path(.*)",name:`${RedirectName}Son`,component:()=>__vitePreload(()=>import("./index-Q5luFLOi.js"),__vite__mapDeps([91,1,2,3,4])),meta:{title:RedirectName,hideBreadcrumb:!0}}]};function adminMenus(){return Alova.Get("/menus")}function getMenuList(en){return Alova.Get("/menu/list",{params:en})}const constantRouterIcon={DashboardOutlined:renderIcon(DashboardOutlined)},Iframe=()=>__vitePreload(()=>import("./index-CfcBoXAF.js"),__vite__mapDeps([67,1,2,3,4,5,6,7,8,68])),LayoutMap=new Map;LayoutMap.set("LAYOUT",Layout);LayoutMap.set("IFRAME",Iframe);const generateRoutes=(en,rn)=>en.map(an=>{const nn={path:`${(rn&&rn.path)??""}/${an.path}`,name:an.name??"",component:an.component,meta:{...an.meta,label:an.meta.title,icon:constantRouterIcon[an.meta.icon]||null,permissions:an.meta.permissions||null}};return nn.path=nn.path.replace("//","/"),an.redirect&&(nn.redirect=an.redirect),an.children&&an.children.length>0&&(!an.redirect&&(nn.redirect=`${an.path}/${an.children[0].path}`),nn.children=generateRoutes(an.children,nn)),nn}),generateDynamicRoutes=async()=>{const en=await adminMenus(),rn=generateRoutes(en);return asyncImportRoute(rn),rn};let viewsModules;const asyncImportRoute=en=>{viewsModules=viewsModules||Object.assign({"../views/about/index.vue":()=>__vitePreload(()=>import("./index-jk-l93XS.js"),__vite__mapDeps([16,2,3,4])),"../views/comp/drag/index.vue":()=>__vitePreload(()=>import("./index-nTYw3IVe.js"),__vite__mapDeps([43,12,6,2,3,4,5,1,7,8,44])),"../views/comp/form/basic.vue":()=>__vitePreload(()=>import("./basic-S6S53ZDa.js"),__vite__mapDeps([27,28,2,4,19,7,3,29,5,6,1,8,30])),"../views/comp/form/useForm.vue":()=>__vitePreload(()=>import("./useForm-8RKCouDT.js"),__vite__mapDeps([31,28,2,4,19,7,3,29,32,5,6,1,8,33])),"../views/comp/modal/index.vue":()=>__vitePreload(()=>import("./index-Cfene4oS.js"),__vite__mapDeps([37,38,3,2,4,21,39,28,19,7,29,32,5,6,1,8,40])),"../views/comp/richtext/vue-quill.vue":()=>__vitePreload(()=>import("./vue-quill-CYzGuerY.js"),__vite__mapDeps([41,6,2,3,4,42])),"../views/comp/table/basic.vue":()=>__vitePreload(()=>import("./basic-CxVvlXq-.js"),__vite__mapDeps([17,18,2,12,6,13,7,4,3,19,20,21,22,23,24,5,1,8])),"../views/comp/table/editCell.vue":()=>__vitePreload(()=>import("./editCell-KTxyxhWV.js"),__vite__mapDeps([25,18,2,12,6,13,7,4,3,19,20,21,22,24,5,1,8])),"../views/comp/table/editRow.vue":()=>__vitePreload(()=>import("./editRow-qCGK53im.js"),__vite__mapDeps([26,18,2,12,6,13,7,4,3,19,20,21,22,23,24,5,1,8])),"../views/comp/upload/index.vue":()=>__vitePreload(()=>import("./index-DE-qLJoy.js"),__vite__mapDeps([34,35,3,2,4,20,7,36,5,6,1,8])),"../views/dashboard/console/components/FluxTrend.vue":()=>__vitePreload(()=>import("./FluxTrend-DTlQvTWk.js"),__vite__mapDeps([92,47,48,2,21,49,13,3,4,5,6,1,7,8])),"../views/dashboard/console/components/VisiTab.vue":()=>__vitePreload(()=>import("./VisiTab-OwAF9yeq.js"),__vite__mapDeps([93,46,47,48,2,21,49,13,50,3,4,5,6,1,7,8])),"../views/dashboard/console/components/VisitAmount.vue":()=>__vitePreload(()=>import("./VisitAmount-CxxoN6_0.js"),__vite__mapDeps([94,50,48,2,21,49,13,3,4,5,6,1,7,8])),"../views/dashboard/console/console.vue":()=>__vitePreload(()=>import("./console-DoIVFooB.js"),__vite__mapDeps([45,46,47,48,2,21,49,13,50,3,4,7,5,6,1,8])),"../views/dashboard/monitor/monitor.vue":()=>__vitePreload(()=>import("./monitor-BFH_8Dmc.js"),__vite__mapDeps([95,2,3,4,5,6,1,7,8])),"../views/dashboard/workplace/workplace.vue":()=>__vitePreload(()=>import("./workplace-rflwL6fG.js"),__vite__mapDeps([51,7,2,8,3,4,5,6,1,52])),"../views/directive/index.vue":()=>__vitePreload(()=>import("./index-CvtO90oY.js"),__vite__mapDeps([53,3,2,4,5,6,1,7,8,54])),"../views/exception/403.vue":()=>__vitePreload(()=>import("./403-BHJjRcck.js"),__vite__mapDeps([55,1,2,3,4,5,6,7,8,56])),"../views/exception/404.vue":()=>__vitePreload(()=>import("./404-DwL9NKrt.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9])),"../views/exception/500.vue":()=>__vitePreload(()=>import("./500-D25Kj5En.js"),__vite__mapDeps([57,1,2,3,4,5,6,7,8,58])),"../views/form/basicForm/index.vue":()=>__vitePreload(()=>import("./index-B1Thw49Y.js"),__vite__mapDeps([59,35,3,2,4,20,7,36,5,6,1,8])),"../views/form/detail/index.vue":()=>__vitePreload(()=>import("./index-DND4v4IW.js"),__vite__mapDeps([66,3,2,4,5,6,1,7,8])),"../views/form/stepForm/Step1.vue":()=>__vitePreload(()=>import("./Step1-COxCc1oF.js"),__vite__mapDeps([96,61,3,2,4])),"../views/form/stepForm/Step2.vue":()=>__vitePreload(()=>import("./Step2-D5iwnIRz.js"),__vite__mapDeps([97,62,3,2,4])),"../views/form/stepForm/Step3.vue":()=>__vitePreload(()=>import("./Step3-DFiEr4U0.js"),__vite__mapDeps([63,3,2,4,5,6,1,7,8,64])),"../views/form/stepForm/stepForm.vue":()=>__vitePreload(()=>import("./stepForm-CSZXupuw.js"),__vite__mapDeps([60,61,3,2,4,62,63,5,6,1,7,8,64,65])),"../views/frame/docs.vue":()=>__vitePreload(()=>import("./docs-IU1ahACg.js"),__vite__mapDeps([98,2,3,4,5,6,1,7,8])),"../views/iframe/index.vue":()=>__vitePreload(()=>import("./index-CfcBoXAF.js"),__vite__mapDeps([67,1,2,3,4,5,6,7,8,68])),"../views/list/basicList/index.vue":()=>__vitePreload(()=>import("./index-BIm1dsaH.js"),__vite__mapDeps([69,18,2,12,6,13,7,4,3,19,20,21,22,23,28,29,32,24,1,5,8])),"../views/list/basicList/info.vue":()=>__vitePreload(()=>import("./info-vZbT9a7o.js"),__vite__mapDeps([70,2,3,4,5,6,1,7,8])),"../views/login/index.vue":()=>__vitePreload(()=>import("./index-C3pdQTaH.js"),__vite__mapDeps([99,1,2,11,8,3,4,5,6,7,100])),"../views/redirect/index.vue":()=>__vitePreload(()=>import("./index-Q5luFLOi.js"),__vite__mapDeps([91,1,2,3,4])),"../views/result/fail.vue":()=>__vitePreload(()=>import("./fail-ZX36aY8a.js"),__vite__mapDeps([73,2,1,7,3,4,5,6,8,74])),"../views/result/info.vue":()=>__vitePreload(()=>import("./info-B7a8dTHJ.js"),__vite__mapDeps([75,2,1,7,3,4,5,6,8,76])),"../views/result/success.vue":()=>__vitePreload(()=>import("./success-CFOGelnv.js"),__vite__mapDeps([71,2,1,3,4,5,6,7,8,72])),"../views/setting/account/BasicSetting.vue":()=>__vitePreload(()=>import("./BasicSetting-CZr7w5wX.js"),__vite__mapDeps([101,78,3,2,4])),"../views/setting/account/SafetySetting.vue":()=>__vitePreload(()=>import("./SafetySetting-De0udgjN.js"),__vite__mapDeps([79,3,2,4,5,6,1,7,8])),"../views/setting/account/account.vue":()=>__vitePreload(()=>import("./account-RBbFUHjI.js"),__vite__mapDeps([77,78,3,2,4,79,5,6,1,7,8,80])),"../views/setting/system/BasicSetting.vue":()=>__vitePreload(()=>import("./BasicSetting-D1Xhtoxa.js"),__vite__mapDeps([102,82,3,2,4])),"../views/setting/system/EmailSetting.vue":()=>__vitePreload(()=>import("./EmailSetting-CtV1CB2z.js"),__vite__mapDeps([103,84,3,2,4])),"../views/setting/system/RevealSetting.vue":()=>__vitePreload(()=>import("./RevealSetting-DDOfUVxl.js"),__vite__mapDeps([104,83,3,2,4])),"../views/setting/system/system.vue":()=>__vitePreload(()=>import("./system-DYo5KSv6.js"),__vite__mapDeps([81,82,3,2,4,83,84,5,6,1,7,8,85])),"../views/system/menu/CreateDrawer.vue":()=>__vitePreload(()=>import("./CreateDrawer-Bmv4FNpa.js"),__vite__mapDeps([105,87,3,2,4])),"../views/system/menu/menu.vue":()=>__vitePreload(()=>import("./menu-Ba5Tci0F.js"),__vite__mapDeps([86,87,3,2,4,7,5,6,1,8])),"../views/system/role/CreateModal.vue":()=>__vitePreload(()=>import("./CreateModal-CXpB36aS.js"),__vite__mapDeps([106,89,28,2,4,19,7,3,29,32,38,21,39,5,6,1,8])),"../views/system/role/EditModal.vue":()=>__vitePreload(()=>import("./EditModal-BPNgaTJI.js"),__vite__mapDeps([107,90,28,2,4,19,7,3,29,32,38,21,39,5,6,1,8])),"../views/system/role/role.vue":()=>__vitePreload(()=>import("./role-DUznBL57.js"),__vite__mapDeps([88,18,2,12,6,13,7,4,3,19,20,21,22,23,89,28,29,32,38,39,90,5,1,8]))}),en&&en.forEach(rn=>{!rn.component&&rn.meta?.frameSrc&&(rn.component="IFRAME");const{component:an,name:nn}=rn,{children:tn}=rn;if(an){const un=LayoutMap.get(an);un?rn.component=un:rn.component=dynamicImport(viewsModules,an)}else nn&&(rn.component=ParentLayout);tn&&asyncImportRoute(tn)})},dynamicImport=(en,rn)=>{const nn=Object.keys(en).filter(tn=>{let un=tn.replace("../views","");const ln=un.lastIndexOf(".");return un=un.substring(0,ln),un===rn});if(nn?.length===1){const tn=nn[0];return en[tn]}if(nn?.length>1){console.warn("Please do not create `.vue` and `.TSX` files with the same file name in the same hierarchical directory under the views folder. This will cause dynamic introduction failure");return}},setting={navMode:"vertical",navTheme:"dark",isMobile:!1,headerSetting:{bgColor:"#fff",fixed:!0,isReload:!0},showFooter:!0,multiTabsSetting:{bgColor:"#fff",show:!0,fixed:!0},menuSetting:{minMenuWidth:64,menuWidth:200,fixed:!0,mixMenu:!1,mobileWidth:800,collapsed:!1},crumbsSetting:{show:!0,showIcon:!1},permissionMode:"FIXED",isPageAnimate:!0,pageAnimateType:"zoom-fade"},{navMode,navTheme,isMobile,headerSetting,showFooter,menuSetting,multiTabsSetting,crumbsSetting,permissionMode,isPageAnimate,pageAnimateType}=setting,useProjectSettingStore=defineStore({id:"app-project-setting",state:()=>({navMode,navTheme,isMobile,headerSetting,showFooter,menuSetting,multiTabsSetting,crumbsSetting,permissionMode,isPageAnimate,pageAnimateType}),getters:{getNavMode(){return this.navMode},getNavTheme(){return this.navTheme},getIsMobile(){return this.isMobile},getHeaderSetting(){return this.headerSetting},getShowFooter(){return this.showFooter},getMenuSetting(){return this.menuSetting},getMultiTabsSetting(){return this.multiTabsSetting},getCrumbsSetting(){return this.crumbsSetting},getPermissionMode(){return this.permissionMode},getIsPageAnimate(){return this.isPageAnimate},getPageAnimateType(){return this.pageAnimateType}},actions:{setNavTheme(en){this.navTheme=en},setIsMobile(en){this.isMobile=en}}});function useProjectSetting(){const en=useProjectSettingStore(),rn=computed(()=>en.navMode),an=computed(()=>en.navTheme),nn=computed(()=>en.isMobile),tn=computed(()=>en.headerSetting),un=computed(()=>en.multiTabsSetting),ln=computed(()=>en.menuSetting),dn=computed(()=>en.crumbsSetting),hn=computed(()=>en.permissionMode),cn=computed(()=>en.showFooter),Fn=computed(()=>en.isPageAnimate),yn=computed(()=>en.pageAnimateType);return{navMode:rn,navTheme:an,isMobile:nn,headerSetting:tn,multiTabsSetting:un,menuSetting:ln,crumbsSetting:dn,permissionMode:hn,showFooter:cn,isPageAnimate:Fn,pageAnimateType:yn}}const DEFAULT_CONFIG={id:"id",children:"children",pid:"pid"},getConfig=en=>Object.assign({},DEFAULT_CONFIG,en);function filter(en,rn,an={}){an=getConfig(an);const nn=an.children;function tn(un){return un.map(ln=>({...ln})).filter(ln=>(ln[nn]=ln[nn]&&tn(ln[nn]),rn(ln)||ln[nn]&&ln[nn].length))}return tn(en)}const useAsyncRouteStore=defineStore({id:"app-async-route",state:()=>({menus:[],routers:constantRouter,routersAdded:[],keepAliveComponents:[],isDynamicRouteAdded:!1}),getters:{getMenus(){return this.menus},getIsDynamicRouteAdded(){return this.isDynamicRouteAdded}},actions:{getRouters(){return toRaw(this.routersAdded)},setDynamicRouteAdded(en){this.isDynamicRouteAdded=en},setRouters(en){this.routersAdded=en,this.routers=constantRouter.concat(en)},setMenus(en){this.menus=en},setKeepAliveComponents(en){this.keepAliveComponents=en},async generateRoutes(en){let rn;const an=en.permissions??[],nn=un=>{const{meta:ln}=un,{permissions:dn}=ln||{};return dn?an.some(hn=>dn.includes(hn.value)):!0},{permissionMode:tn}=useProjectSetting();if(unref(tn)==="BACK")try{rn=await generateDynamicRoutes()}catch(un){console.log(un)}else try{rn=filter(asyncRoutes,nn)}catch(un){console.log(un)}return rn=rn.filter(nn),this.setRouters(rn),this.setMenus(rn),toRaw(rn)}}});function useAsyncRoute(){return useAsyncRouteStore(store)}const LOGIN_PATH=PageEnum.BASE_LOGIN,whitePathList=[LOGIN_PATH];function createRouterGuards(en){const rn=useUser(),an=useAsyncRoute();en.beforeEach(async(nn,tn,un)=>{const ln=window.$loading||null;if(ln&&ln.start(),tn.path===LOGIN_PATH&&nn.name==="errorPage"){un(PageEnum.BASE_HOME);return}if(whitePathList.includes(nn.path)){un();return}if(!storage.get(ACCESS_TOKEN)){if(nn.meta.ignoreAuth){un();return}const pn={path:LOGIN_PATH,replace:!0};nn.path&&(pn.query={...pn.query,redirect:nn.path}),un(pn);return}if(an.getIsDynamicRouteAdded){un();return}const hn=await rn.getInfo();(await an.generateRoutes(hn)).forEach(pn=>{en.addRoute(pn)}),en.getRoutes().findIndex(pn=>pn.name===ErrorPageRoute.name)===-1&&en.addRoute(ErrorPageRoute);const yn=tn.query.redirect||nn.path,gn=decodeURIComponent(yn),bn=nn.path===gn?{...nn,replace:!0}:{path:gn};an.setDynamicRouteAdded(!0),un(bn),ln&&ln.finish()}),en.afterEach((nn,tn,un)=>{document.title=nn?.meta?.title||document.title,isNavigationFailure(un);const ln=useAsyncRoute(),dn=ln.keepAliveComponents,hn=nn.matched.find(Fn=>Fn.name==nn.name)?.name;if(hn&&!dn.includes(hn)&&nn.meta?.keepAlive)dn.push(hn);else if(!nn.meta?.keepAlive||nn.name==RedirectName){const Fn=ln.keepAliveComponents.findIndex(yn=>yn==hn);Fn!=-1&&dn.splice(Fn,1)}ln.setKeepAliveComponents(dn);const cn=window.$loading||null;cn&&cn.finish()}),en.onError(nn=>{console.log(nn,"路由错误")})}const modules=Object.assign({"./modules/about.ts":__vite_glob_0_0,"./modules/comp.ts":__vite_glob_0_1,"./modules/dashboard.ts":__vite_glob_0_2,"./modules/directive.ts":__vite_glob_0_3,"./modules/docs.ts":__vite_glob_0_4,"./modules/exception.ts":__vite_glob_0_5,"./modules/form.ts":__vite_glob_0_6,"./modules/frame.ts":__vite_glob_0_7,"./modules/list.ts":__vite_glob_0_8,"./modules/newVersion.ts":__vite_glob_0_9,"./modules/result.ts":__vite_glob_0_10,"./modules/setting.ts":__vite_glob_0_11,"./modules/system.ts":__vite_glob_0_12}),routeModuleList=Object.keys(modules).reduce((en,rn)=>{const an=modules[rn].default??{},nn=Array.isArray(an)?[...an]:[an];return[...en,...nn]},[]);function sortRoute(en,rn){return(en.meta?.sort??0)-(rn.meta?.sort??0)}routeModuleList.sort(sortRoute);const RootRoute={path:"/",name:"Root",redirect:PageEnum.BASE_HOME,meta:{title:"Root"}},LoginRoute={path:"/login",name:"Login",component:()=>__vitePreload(()=>import("./index-C3pdQTaH.js"),__vite__mapDeps([99,1,2,11,8,3,4,5,6,7,100])),meta:{title:"登录"}},asyncRoutes=[...routeModuleList],constantRouter=[LoginRoute,RootRoute,RedirectRoute],router=createRouter({history:createWebHistory(),routes:constantRouter,strict:!0,scrollBehavior:()=>({left:0,top:0})});function setupRouter(en){en.use(router),createRouterGuards(router)}async function bootstrap(){const en=createApp(_sfc_main);setupStore(en),setupNaive(en),setupNaiveDiscreteApi(),setupDirectives(en),setupRouter(en),await router.isReady();const rn=document.createElement("meta");rn.name="naive-ui-style",document.head.appendChild(rn),en.mount("#app",!0)}bootstrap();export{Alova as A,generatorMenuMix as B,useScreenLockStore as C,PageEnum as P,ResultEnum as R,TABS_ROUTES as T,_export_sfc as _,useGlobSetting as a,isString$1 as b,getTreeItem as c,getTreeAll as d,usePermission as e,isBoolean as f,getMenuList as g,isFunction as h,isNumber$1 as i,isServer as j,isArray$1 as k,useDesignSettingStore as l,isNullOrUnDef as m,isObject as n,deepMerge as o,isProdMode as p,getDynamicProps as q,RedirectName as r,useProjectSetting as s,useProjectSettingStore as t,useUserStore as u,useAsyncRouteStore as v,withInstall as w,renderIcon as x,storage as y,generatorMenu as z};
